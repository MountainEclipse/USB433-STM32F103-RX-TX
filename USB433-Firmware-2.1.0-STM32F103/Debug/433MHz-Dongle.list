
433MHz-Dongle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7e4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  0800d8f0  0800d8f0  0000e8f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de14  0800de14  0000f1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800de14  0800de14  0000ee14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de1c  0800de1c  0000f1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800de1c  0800de1c  0000ee1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800de28  0800de28  0000ee28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800de2c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030a0  200001e0  0800e00c  0000f1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00001100  20003280  0800e00c  0000f280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c65  00000000  00000000  0000f209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004786  00000000  00000000  00026e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  0002b5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb2  00000000  00000000  0002c970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f323  00000000  00000000  0002d822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a677  00000000  00000000  0004cb45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000936f1  00000000  00000000  000671bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa8ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c48  00000000  00000000  000fa8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00100538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d8d8 	.word	0x0800d8d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	0800d8d8 	.word	0x0800d8d8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_f2uiz>:
 8000718:	0042      	lsls	r2, r0, #1
 800071a:	d20e      	bcs.n	800073a <__aeabi_f2uiz+0x22>
 800071c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000720:	d30b      	bcc.n	800073a <__aeabi_f2uiz+0x22>
 8000722:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000726:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800072a:	d409      	bmi.n	8000740 <__aeabi_f2uiz+0x28>
 800072c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000730:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000734:	fa23 f002 	lsr.w	r0, r3, r2
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr
 8000740:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000744:	d101      	bne.n	800074a <__aeabi_f2uiz+0x32>
 8000746:	0242      	lsls	r2, r0, #9
 8000748:	d102      	bne.n	8000750 <__aeabi_f2uiz+0x38>
 800074a:	f04f 30ff 	mov.w	r0, #4294967295
 800074e:	4770      	bx	lr
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop

08000758 <_ZL8tokenizePcPS_i>:
#define USB_COMMAND_COUNT (sizeof(usb_nodes) / sizeof(CommandNode))

/*
 * Utility: Split command into list of tokens
 */
static int tokenize(char* input, char* argv[], int max_tokens) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
    int count = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
    char* token = strtok(input, " \r\n");
 8000768:	490f      	ldr	r1, [pc, #60]	@ (80007a8 <_ZL8tokenizePcPS_i+0x50>)
 800076a:	68f8      	ldr	r0, [r7, #12]
 800076c:	f00c f822 	bl	800c7b4 <strtok>
 8000770:	6138      	str	r0, [r7, #16]
    while (token && count < max_tokens) {
 8000772:	e00c      	b.n	800078e <_ZL8tokenizePcPS_i+0x36>
        argv[count++] = token;
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	1c5a      	adds	r2, r3, #1
 8000778:	617a      	str	r2, [r7, #20]
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	68ba      	ldr	r2, [r7, #8]
 800077e:	4413      	add	r3, r2
 8000780:	693a      	ldr	r2, [r7, #16]
 8000782:	601a      	str	r2, [r3, #0]
        token = strtok(0, " \r\n");
 8000784:	4908      	ldr	r1, [pc, #32]	@ (80007a8 <_ZL8tokenizePcPS_i+0x50>)
 8000786:	2000      	movs	r0, #0
 8000788:	f00c f814 	bl	800c7b4 <strtok>
 800078c:	6138      	str	r0, [r7, #16]
    while (token && count < max_tokens) {
 800078e:	693b      	ldr	r3, [r7, #16]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d003      	beq.n	800079c <_ZL8tokenizePcPS_i+0x44>
 8000794:	697a      	ldr	r2, [r7, #20]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	429a      	cmp	r2, r3
 800079a:	dbeb      	blt.n	8000774 <_ZL8tokenizePcPS_i+0x1c>
    }
    return count;
 800079c:	697b      	ldr	r3, [r7, #20]
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	0800d9a0 	.word	0x0800d9a0

080007ac <_Z8dispatchPK11CommandNodehP14CommandContexti>:

/*
 * Command dispatcher using the command hierarchy defined above
 */
bool dispatch(const CommandNode* nodes, uint8_t count, CommandContext* ctx, int index) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	460b      	mov	r3, r1
 80007ba:	72fb      	strb	r3, [r7, #11]
	for (uint8_t i = 0; i < count; i++) {
 80007bc:	2300      	movs	r3, #0
 80007be:	75fb      	strb	r3, [r7, #23]
 80007c0:	e086      	b.n	80008d0 <_Z8dispatchPK11CommandNodehP14CommandContexti+0x124>
		if (strcmp(ctx->argv[index], nodes[i].token) == 0) {
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	4413      	add	r3, r2
 80007ca:	6858      	ldr	r0, [r3, #4]
 80007cc:	7dfb      	ldrb	r3, [r7, #23]
 80007ce:	011b      	lsls	r3, r3, #4
 80007d0:	68fa      	ldr	r2, [r7, #12]
 80007d2:	4413      	add	r3, r2
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4619      	mov	r1, r3
 80007d8:	f7ff fcb8 	bl	800014c <strcmp>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d173      	bne.n	80008ca <_Z8dispatchPK11CommandNodehP14CommandContexti+0x11e>
			bool child_handled = false;
 80007e2:	2300      	movs	r3, #0
 80007e4:	75bb      	strb	r3, [r7, #22]

			if (index + 1 < ctx->argc && nodes[i].children) {
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	da1a      	bge.n	8000828 <_Z8dispatchPK11CommandNodehP14CommandContexti+0x7c>
 80007f2:	7dfb      	ldrb	r3, [r7, #23]
 80007f4:	011b      	lsls	r3, r3, #4
 80007f6:	68fa      	ldr	r2, [r7, #12]
 80007f8:	4413      	add	r3, r2
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d013      	beq.n	8000828 <_Z8dispatchPK11CommandNodehP14CommandContexti+0x7c>
				// first try to dispatch the command to child nodes
				ctx->arg_idx = index;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	683a      	ldr	r2, [r7, #0]
 8000804:	631a      	str	r2, [r3, #48]	@ 0x30
				child_handled = dispatch(nodes[i].children, nodes[i].child_count, ctx, index + 1);
 8000806:	7dfb      	ldrb	r3, [r7, #23]
 8000808:	011b      	lsls	r3, r3, #4
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	4413      	add	r3, r2
 800080e:	6898      	ldr	r0, [r3, #8]
 8000810:	7dfb      	ldrb	r3, [r7, #23]
 8000812:	011b      	lsls	r3, r3, #4
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	4413      	add	r3, r2
 8000818:	7b19      	ldrb	r1, [r3, #12]
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	3301      	adds	r3, #1
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	f7ff ffc4 	bl	80007ac <_Z8dispatchPK11CommandNodehP14CommandContexti>
 8000824:	4603      	mov	r3, r0
 8000826:	75bb      	strb	r3, [r7, #22]
			}
			// check if child failed to handle the command and if a handler is specified for this command
			if (!child_handled && nodes[i].handler) {
 8000828:	7dbb      	ldrb	r3, [r7, #22]
 800082a:	f083 0301 	eor.w	r3, r3, #1
 800082e:	b2db      	uxtb	r3, r3
 8000830:	2b00      	cmp	r3, #0
 8000832:	d022      	beq.n	800087a <_Z8dispatchPK11CommandNodehP14CommandContexti+0xce>
 8000834:	7dfb      	ldrb	r3, [r7, #23]
 8000836:	011b      	lsls	r3, r3, #4
 8000838:	68fa      	ldr	r2, [r7, #12]
 800083a:	4413      	add	r3, r2
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d01b      	beq.n	800087a <_Z8dispatchPK11CommandNodehP14CommandContexti+0xce>
				ctx->arg_idx = index;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	683a      	ldr	r2, [r7, #0]
 8000846:	631a      	str	r2, [r3, #48]	@ 0x30
				ctx->remaining = (index + 1 < ctx->argc) ? ctx->argv[index + 1] : 0;
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	1c5a      	adds	r2, r3, #1
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	429a      	cmp	r2, r3
 8000852:	da06      	bge.n	8000862 <_Z8dispatchPK11CommandNodehP14CommandContexti+0xb6>
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	3301      	adds	r3, #1
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	4413      	add	r3, r2
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	e000      	b.n	8000864 <_Z8dispatchPK11CommandNodehP14CommandContexti+0xb8>
 8000862:	2300      	movs	r3, #0
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	62d3      	str	r3, [r2, #44]	@ 0x2c
				nodes[i].handler(ctx);
 8000868:	7dfb      	ldrb	r3, [r7, #23]
 800086a:	011b      	lsls	r3, r3, #4
 800086c:	68fa      	ldr	r2, [r7, #12]
 800086e:	4413      	add	r3, r2
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	4798      	blx	r3
				return true;
 8000876:	2301      	movs	r3, #1
 8000878:	e03a      	b.n	80008f0 <_Z8dispatchPK11CommandNodehP14CommandContexti+0x144>
			} else if (!child_handled && index + 1 < ctx->argc) {
 800087a:	7dbb      	ldrb	r3, [r7, #22]
 800087c:	f083 0301 	eor.w	r3, r3, #1
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b00      	cmp	r3, #0
 8000884:	d012      	beq.n	80008ac <_Z8dispatchPK11CommandNodehP14CommandContexti+0x100>
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	1c5a      	adds	r2, r3, #1
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	429a      	cmp	r2, r3
 8000890:	da0c      	bge.n	80008ac <_Z8dispatchPK11CommandNodehP14CommandContexti+0x100>
				// child didn't handle, and there's an extra param; so the param must be bad
				sprintf(usb_tx_buffer, "%u %s\r\n", USB_CC_BAD_PARAM, ctx->argv[index+1]);
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	3301      	adds	r3, #1
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	4413      	add	r3, r2
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	2230      	movs	r2, #48	@ 0x30
 80008a0:	4915      	ldr	r1, [pc, #84]	@ (80008f8 <_Z8dispatchPK11CommandNodehP14CommandContexti+0x14c>)
 80008a2:	4816      	ldr	r0, [pc, #88]	@ (80008fc <_Z8dispatchPK11CommandNodehP14CommandContexti+0x150>)
 80008a4:	f00b fefe 	bl	800c6a4 <siprintf>
				return true;
 80008a8:	2301      	movs	r3, #1
 80008aa:	e021      	b.n	80008f0 <_Z8dispatchPK11CommandNodehP14CommandContexti+0x144>
			} else if (!child_handled) {
 80008ac:	7dbb      	ldrb	r3, [r7, #22]
 80008ae:	f083 0301 	eor.w	r3, r3, #1
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d006      	beq.n	80008c6 <_Z8dispatchPK11CommandNodehP14CommandContexti+0x11a>
				// child didn't handle, and there's no handler here; we must be missing a param
				sprintf(usb_tx_buffer, "%u\r\n", USB_CC_MISSING_PARAM);
 80008b8:	2231      	movs	r2, #49	@ 0x31
 80008ba:	4911      	ldr	r1, [pc, #68]	@ (8000900 <_Z8dispatchPK11CommandNodehP14CommandContexti+0x154>)
 80008bc:	480f      	ldr	r0, [pc, #60]	@ (80008fc <_Z8dispatchPK11CommandNodehP14CommandContexti+0x150>)
 80008be:	f00b fef1 	bl	800c6a4 <siprintf>
				return true;
 80008c2:	2301      	movs	r3, #1
 80008c4:	e014      	b.n	80008f0 <_Z8dispatchPK11CommandNodehP14CommandContexti+0x144>
			}

			return child_handled;
 80008c6:	7dbb      	ldrb	r3, [r7, #22]
 80008c8:	e012      	b.n	80008f0 <_Z8dispatchPK11CommandNodehP14CommandContexti+0x144>
	for (uint8_t i = 0; i < count; i++) {
 80008ca:	7dfb      	ldrb	r3, [r7, #23]
 80008cc:	3301      	adds	r3, #1
 80008ce:	75fb      	strb	r3, [r7, #23]
 80008d0:	7dfa      	ldrb	r2, [r7, #23]
 80008d2:	7afb      	ldrb	r3, [r7, #11]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	f4ff af74 	bcc.w	80007c2 <_Z8dispatchPK11CommandNodehP14CommandContexti+0x16>
		}
	}
	sprintf(usb_tx_buffer, "%u %s\r\n", USB_CC_UNKNOWN, ctx->argv[index]);
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	2210      	movs	r2, #16
 80008e6:	4904      	ldr	r1, [pc, #16]	@ (80008f8 <_Z8dispatchPK11CommandNodehP14CommandContexti+0x14c>)
 80008e8:	4804      	ldr	r0, [pc, #16]	@ (80008fc <_Z8dispatchPK11CommandNodehP14CommandContexti+0x150>)
 80008ea:	f00b fedb 	bl	800c6a4 <siprintf>
	return false;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	0800d9a4 	.word	0x0800d9a4
 80008fc:	200001fc 	.word	0x200001fc
 8000900:	0800d9ac 	.word	0x0800d9ac

08000904 <_ZN14CommandContextC1Ev>:

// rx/tx structs
extern Transmitter tx;
extern Receiver rx;

typedef struct CommandContext {
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f04f 32ff 	mov.w	r2, #4294967295
 8000912:	631a      	str	r2, [r3, #48]	@ 0x30
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4618      	mov	r0, r3
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <_Z10processUSBv>:
 *	****** RECEIVER OUTPUT SENTENCE ******
 *	<status> word:<0:1 string> len:<length of word> long_us:<us> short_us:<us> period_us:<us> logic:0 ignoresync:1
 *		// when the receiver detects a valid word, transmit it to the usb host
 *		// with timing information and logic assumption
 */
void processUSB() {
 8000920:	b580      	push	{r7, lr}
 8000922:	b08e      	sub	sp, #56	@ 0x38
 8000924:	af00      	add	r7, sp, #0
	// check for null receive buffer
	if ((uint8_t) usb_rx_buffer[0] == 0) {
 8000926:	4b20      	ldr	r3, [pc, #128]	@ (80009a8 <_Z10processUSBv+0x88>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d037      	beq.n	800099e <_Z10processUSBv+0x7e>
		return;
	}
	// flash USB activity light on
	HAL_GPIO_WritePin(USB_ACT_GPIO_Port, USB_ACT_Pin, GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000934:	481d      	ldr	r0, [pc, #116]	@ (80009ac <_Z10processUSBv+0x8c>)
 8000936:	f002 ffbe 	bl	80038b6 <HAL_GPIO_WritePin>

	// reset tx buffer for command acknowledge
	memset(usb_tx_buffer, 0, sizeof(usb_tx_buffer));
 800093a:	f44f 6282 	mov.w	r2, #1040	@ 0x410
 800093e:	2100      	movs	r1, #0
 8000940:	481b      	ldr	r0, [pc, #108]	@ (80009b0 <_Z10processUSBv+0x90>)
 8000942:	f00b ff2e 	bl	800c7a2 <memset>

	// process command received
    CommandContext ctx;
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ffdb 	bl	8000904 <_ZN14CommandContextC1Ev>
    ctx.argc = tokenize(usb_rx_buffer, ctx.argv, MAX_COMMAND_TOKENS);
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	3304      	adds	r3, #4
 8000952:	220a      	movs	r2, #10
 8000954:	4619      	mov	r1, r3
 8000956:	4814      	ldr	r0, [pc, #80]	@ (80009a8 <_Z10processUSBv+0x88>)
 8000958:	f7ff fefe 	bl	8000758 <_ZL8tokenizePcPS_i>
 800095c:	4603      	mov	r3, r0
 800095e:	607b      	str	r3, [r7, #4]
    ctx.remaining = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	633b      	str	r3, [r7, #48]	@ 0x30

    if (ctx.argc > 0) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	dd05      	ble.n	8000976 <_Z10processUSBv+0x56>
        dispatch(usb_nodes, USB_COMMAND_COUNT, &ctx, 0);
 800096a:	1d3a      	adds	r2, r7, #4
 800096c:	2300      	movs	r3, #0
 800096e:	2104      	movs	r1, #4
 8000970:	4810      	ldr	r0, [pc, #64]	@ (80009b4 <_Z10processUSBv+0x94>)
 8000972:	f7ff ff1b 	bl	80007ac <_Z8dispatchPK11CommandNodehP14CommandContexti>
    }

    // transmit any error messages or feedback
	CDC_Transmit_FS((uint8_t*) usb_tx_buffer, strlen(usb_tx_buffer));
 8000976:	480e      	ldr	r0, [pc, #56]	@ (80009b0 <_Z10processUSBv+0x90>)
 8000978:	f7ff fbf2 	bl	8000160 <strlen>
 800097c:	4603      	mov	r3, r0
 800097e:	b29b      	uxth	r3, r3
 8000980:	4619      	mov	r1, r3
 8000982:	480b      	ldr	r0, [pc, #44]	@ (80009b0 <_Z10processUSBv+0x90>)
 8000984:	f00a ffe2 	bl	800b94c <CDC_Transmit_FS>

    // reset the command buffer
    memset(usb_rx_buffer, 0, sizeof(usb_rx_buffer));
 8000988:	2280      	movs	r2, #128	@ 0x80
 800098a:	2100      	movs	r1, #0
 800098c:	4806      	ldr	r0, [pc, #24]	@ (80009a8 <_Z10processUSBv+0x88>)
 800098e:	f00b ff08 	bl	800c7a2 <memset>

    // note last time of USB access
    last_USB_time = HAL_GetTick();
 8000992:	f002 fa53 	bl	8002e3c <HAL_GetTick>
 8000996:	4603      	mov	r3, r0
 8000998:	4a07      	ldr	r2, [pc, #28]	@ (80009b8 <_Z10processUSBv+0x98>)
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	e000      	b.n	80009a0 <_Z10processUSBv+0x80>
		return;
 800099e:	bf00      	nop
}
 80009a0:	3738      	adds	r7, #56	@ 0x38
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200029bc 	.word	0x200029bc
 80009ac:	40011000 	.word	0x40011000
 80009b0:	200001fc 	.word	0x200001fc
 80009b4:	0800dbc8 	.word	0x0800dbc8
 80009b8:	2000060c 	.word	0x2000060c

080009bc <_Z7pushUSBv>:

void pushUSB() {
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(USB_ACT_GPIO_Port, USB_ACT_Pin, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009c6:	4809      	ldr	r0, [pc, #36]	@ (80009ec <_Z7pushUSBv+0x30>)
 80009c8:	f002 ff75 	bl	80038b6 <HAL_GPIO_WritePin>
	CDC_Transmit_FS((uint8_t*) usb_tx_buffer, strlen(usb_tx_buffer));
 80009cc:	4808      	ldr	r0, [pc, #32]	@ (80009f0 <_Z7pushUSBv+0x34>)
 80009ce:	f7ff fbc7 	bl	8000160 <strlen>
 80009d2:	4603      	mov	r3, r0
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <_Z7pushUSBv+0x34>)
 80009da:	f00a ffb7 	bl	800b94c <CDC_Transmit_FS>
	last_USB_time = HAL_GetTick();
 80009de:	f002 fa2d 	bl	8002e3c <HAL_GetTick>
 80009e2:	4603      	mov	r3, r0
 80009e4:	4a03      	ldr	r2, [pc, #12]	@ (80009f4 <_Z7pushUSBv+0x38>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40011000 	.word	0x40011000
 80009f0:	200001fc 	.word	0x200001fc
 80009f4:	2000060c 	.word	0x2000060c

080009f8 <_Z11handleLogicP14CommandContext>:

/*
* Handle the command "<rx:tx> logic <0:1>"
*/
void handleLogic(CommandContext* ctx) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	bool isRx = strncmp(ctx->argv[ctx->arg_idx - 1], "rx", 1) == 0;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a04:	3b01      	subs	r3, #1
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	4413      	add	r3, r2
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	781a      	ldrb	r2, [r3, #0]
 8000a10:	4b21      	ldr	r3, [pc, #132]	@ (8000a98 <_Z11handleLogicP14CommandContext+0xa0>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	bf0c      	ite	eq
 8000a1a:	2301      	moveq	r3, #1
 8000a1c:	2300      	movne	r3, #0
 8000a1e:	73fb      	strb	r3, [r7, #15]
	if (ctx->remaining) { // value passed with call
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d027      	beq.n	8000a78 <_Z11handleLogicP14CommandContext+0x80>
		uint8_t value = atoi(ctx->remaining); // parse argument
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f00b fb6b 	bl	800c108 <atoi>
 8000a32:	4603      	mov	r3, r0
 8000a34:	73bb      	strb	r3, [r7, #14]
		if (value > 1) { // invalid range of values
 8000a36:	7bbb      	ldrb	r3, [r7, #14]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d906      	bls.n	8000a4a <_Z11handleLogicP14CommandContext+0x52>
			sprintf(usb_tx_buffer, "%u %u\r\n", USB_CC_BAD_VALUE, (unsigned int) value);
 8000a3c:	7bbb      	ldrb	r3, [r7, #14]
 8000a3e:	2220      	movs	r2, #32
 8000a40:	4916      	ldr	r1, [pc, #88]	@ (8000a9c <_Z11handleLogicP14CommandContext+0xa4>)
 8000a42:	4817      	ldr	r0, [pc, #92]	@ (8000aa0 <_Z11handleLogicP14CommandContext+0xa8>)
 8000a44:	f00b fe2e 	bl	800c6a4 <siprintf>
			return;
 8000a48:	e022      	b.n	8000a90 <_Z11handleLogicP14CommandContext+0x98>
		}
		if (isRx)
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d008      	beq.n	8000a62 <_Z11handleLogicP14CommandContext+0x6a>
			rx.invert_logic = (bool) value;
 8000a50:	7bbb      	ldrb	r3, [r7, #14]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	bf14      	ite	ne
 8000a56:	2301      	movne	r3, #1
 8000a58:	2300      	moveq	r3, #0
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <_Z11handleLogicP14CommandContext+0xac>)
 8000a5e:	701a      	strb	r2, [r3, #0]
 8000a60:	e007      	b.n	8000a72 <_Z11handleLogicP14CommandContext+0x7a>
		else
			tx.invert_logic = (bool) value;
 8000a62:	7bbb      	ldrb	r3, [r7, #14]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	bf14      	ite	ne
 8000a68:	2301      	movne	r3, #1
 8000a6a:	2300      	moveq	r3, #0
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <_Z11handleLogicP14CommandContext+0xb0>)
 8000a70:	701a      	strb	r2, [r3, #0]
		bufferOk();
 8000a72:	f000 fbdb 	bl	800122c <_Z8bufferOkv>
		return;
 8000a76:	e00b      	b.n	8000a90 <_Z11handleLogicP14CommandContext+0x98>
	}
	bufferValueResponse(ctx, isRx ? (bool) rx.invert_logic : (bool) tx.invert_logic);
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d002      	beq.n	8000a84 <_Z11handleLogicP14CommandContext+0x8c>
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <_Z11handleLogicP14CommandContext+0xac>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	e001      	b.n	8000a88 <_Z11handleLogicP14CommandContext+0x90>
 8000a84:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <_Z11handleLogicP14CommandContext+0xb0>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f000 fb88 	bl	80011a0 <_Z19bufferValueResponseP14CommandContextl>
}
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	0800d988 	.word	0x0800d988
 8000a9c:	0800d9b4 	.word	0x0800d9b4
 8000aa0:	200001fc 	.word	0x200001fc
 8000aa4:	20000ef8 	.word	0x20000ef8
 8000aa8:	20001d0c 	.word	0x20001d0c

08000aac <_Z13handleSyncBitP14CommandContext>:

/*
 * Handle command "<rx:tx> ignoresyncbit <0:1>
 */
void handleSyncBit(CommandContext* ctx) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	bool isRx = strncmp(ctx->argv[ctx->arg_idx - 1], "rx", 1) == 0;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	4413      	add	r3, r2
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	781a      	ldrb	r2, [r3, #0]
 8000ac4:	4b21      	ldr	r3, [pc, #132]	@ (8000b4c <_Z13handleSyncBitP14CommandContext+0xa0>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	bf0c      	ite	eq
 8000ace:	2301      	moveq	r3, #1
 8000ad0:	2300      	movne	r3, #0
 8000ad2:	73fb      	strb	r3, [r7, #15]
	if (ctx->remaining) {// value passed with call
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d027      	beq.n	8000b2c <_Z13handleSyncBitP14CommandContext+0x80>
		uint32_t value = atoi(ctx->remaining); // parse argument
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f00b fb11 	bl	800c108 <atoi>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	60bb      	str	r3, [r7, #8]
		if (value > 1) {
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d906      	bls.n	8000afe <_Z13handleSyncBitP14CommandContext+0x52>
			sprintf(usb_tx_buffer, "%u %" PRIu32 "\r\n", USB_CC_BAD_VALUE, value);
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	2220      	movs	r2, #32
 8000af4:	4916      	ldr	r1, [pc, #88]	@ (8000b50 <_Z13handleSyncBitP14CommandContext+0xa4>)
 8000af6:	4817      	ldr	r0, [pc, #92]	@ (8000b54 <_Z13handleSyncBitP14CommandContext+0xa8>)
 8000af8:	f00b fdd4 	bl	800c6a4 <siprintf>
			return;
 8000afc:	e022      	b.n	8000b44 <_Z13handleSyncBitP14CommandContext+0x98>
		}
		if (isRx)
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d008      	beq.n	8000b16 <_Z13handleSyncBitP14CommandContext+0x6a>
			rx.ignore_sync_bit = (bool) value;
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	bf14      	ite	ne
 8000b0a:	2301      	movne	r3, #1
 8000b0c:	2300      	moveq	r3, #0
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <_Z13handleSyncBitP14CommandContext+0xac>)
 8000b12:	705a      	strb	r2, [r3, #1]
 8000b14:	e007      	b.n	8000b26 <_Z13handleSyncBitP14CommandContext+0x7a>
		else
			tx.ignore_sync_bit = (bool) value;
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	bf14      	ite	ne
 8000b1c:	2301      	movne	r3, #1
 8000b1e:	2300      	moveq	r3, #0
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <_Z13handleSyncBitP14CommandContext+0xb0>)
 8000b24:	705a      	strb	r2, [r3, #1]
		bufferOk();
 8000b26:	f000 fb81 	bl	800122c <_Z8bufferOkv>
		return;
 8000b2a:	e00b      	b.n	8000b44 <_Z13handleSyncBitP14CommandContext+0x98>
	}
	bufferValueResponse(ctx, isRx ? (long) rx.ignore_sync_bit : (long) tx.ignore_sync_bit);
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d002      	beq.n	8000b38 <_Z13handleSyncBitP14CommandContext+0x8c>
 8000b32:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <_Z13handleSyncBitP14CommandContext+0xac>)
 8000b34:	785b      	ldrb	r3, [r3, #1]
 8000b36:	e001      	b.n	8000b3c <_Z13handleSyncBitP14CommandContext+0x90>
 8000b38:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <_Z13handleSyncBitP14CommandContext+0xb0>)
 8000b3a:	785b      	ldrb	r3, [r3, #1]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f000 fb2e 	bl	80011a0 <_Z19bufferValueResponseP14CommandContextl>

}
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	0800d988 	.word	0x0800d988
 8000b50:	0800d9bc 	.word	0x0800d9bc
 8000b54:	200001fc 	.word	0x200001fc
 8000b58:	20000ef8 	.word	0x20000ef8
 8000b5c:	20001d0c 	.word	0x20001d0c

08000b60 <_Z12handleStatusP14CommandContext>:

/*
 * Handle command "status"
 */
void handleStatus(CommandContext* ctx) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	if (ctx->remaining) { // value passed with call - illegal
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d007      	beq.n	8000b80 <_Z12handleStatusP14CommandContext+0x20>
		sprintf(usb_tx_buffer, "%u %s\r\n", USB_CC_BAD_PARAM, ctx->remaining);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b74:	2230      	movs	r2, #48	@ 0x30
 8000b76:	4907      	ldr	r1, [pc, #28]	@ (8000b94 <_Z12handleStatusP14CommandContext+0x34>)
 8000b78:	4807      	ldr	r0, [pc, #28]	@ (8000b98 <_Z12handleStatusP14CommandContext+0x38>)
 8000b7a:	f00b fd93 	bl	800c6a4 <siprintf>
		return;
 8000b7e:	e005      	b.n	8000b8c <_Z12handleStatusP14CommandContext+0x2c>
	}
	bufferValueResponse(ctx, status);
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <_Z12handleStatusP14CommandContext+0x3c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f000 fb0a 	bl	80011a0 <_Z19bufferValueResponseP14CommandContextl>

}
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	0800d9a4 	.word	0x0800d9a4
 8000b98:	200001fc 	.word	0x200001fc
 8000b9c:	20000610 	.word	0x20000610

08000ba0 <_Z13handleVersionP14CommandContext>:

/*
 * Handle command "version"
 */
void handleVersion(CommandContext* ctx) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	if (ctx->remaining) { // value passed with call - illegal
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d007      	beq.n	8000bc0 <_Z13handleVersionP14CommandContext+0x20>
		sprintf(usb_tx_buffer, "%u %s\r\n", USB_CC_BAD_PARAM, ctx->remaining);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bb4:	2230      	movs	r2, #48	@ 0x30
 8000bb6:	4907      	ldr	r1, [pc, #28]	@ (8000bd4 <_Z13handleVersionP14CommandContext+0x34>)
 8000bb8:	4807      	ldr	r0, [pc, #28]	@ (8000bd8 <_Z13handleVersionP14CommandContext+0x38>)
 8000bba:	f00b fd73 	bl	800c6a4 <siprintf>
		return;
 8000bbe:	e005      	b.n	8000bcc <_Z13handleVersionP14CommandContext+0x2c>
	}
	sprintf(usb_tx_buffer, "%u %s\r\n", USB_CC_OK, version);
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <_Z13handleVersionP14CommandContext+0x3c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	4903      	ldr	r1, [pc, #12]	@ (8000bd4 <_Z13handleVersionP14CommandContext+0x34>)
 8000bc6:	4804      	ldr	r0, [pc, #16]	@ (8000bd8 <_Z13handleVersionP14CommandContext+0x38>)
 8000bc8:	f00b fd6c 	bl	800c6a4 <siprintf>
}
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	0800d9a4 	.word	0x0800d9a4
 8000bd8:	200001fc 	.word	0x200001fc
 8000bdc:	0800dc08 	.word	0x0800dc08

08000be0 <_Z12handleRxModeP14CommandContext>:

/*
 * Handle command "rx mode <0:1:2>"
 * to set or get Receiver operating mode
 */
void handleRxMode(CommandContext* ctx) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	if (ctx->remaining) {// value passed with call
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d01e      	beq.n	8000c2e <_Z12handleRxModeP14CommandContext+0x4e>
		uint8_t value = atoi(ctx->remaining); // parse argument
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f00b fa87 	bl	800c108 <atoi>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	73fb      	strb	r3, [r7, #15]
		if (value > 2) { // invalid range of values
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d906      	bls.n	8000c12 <_Z12handleRxModeP14CommandContext+0x32>
			sprintf(usb_tx_buffer, "%u %" PRIu8 "\r\n", USB_CC_BAD_VALUE, value);
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	2220      	movs	r2, #32
 8000c08:	490d      	ldr	r1, [pc, #52]	@ (8000c40 <_Z12handleRxModeP14CommandContext+0x60>)
 8000c0a:	480e      	ldr	r0, [pc, #56]	@ (8000c44 <_Z12handleRxModeP14CommandContext+0x64>)
 8000c0c:	f00b fd4a 	bl	800c6a4 <siprintf>
			return;
 8000c10:	e013      	b.n	8000c3a <_Z12handleRxModeP14CommandContext+0x5a>
		}
		rx.mode = value;
 8000c12:	4a0d      	ldr	r2, [pc, #52]	@ (8000c48 <_Z12handleRxModeP14CommandContext+0x68>)
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	7093      	strb	r3, [r2, #2]
		if (value == 0) disableRx();
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d102      	bne.n	8000c24 <_Z12handleRxModeP14CommandContext+0x44>
 8000c1e:	f001 f883 	bl	8001d28 <_Z9disableRxv>
 8000c22:	e001      	b.n	8000c28 <_Z12handleRxModeP14CommandContext+0x48>
		else enableRx();
 8000c24:	f001 f874 	bl	8001d10 <_Z8enableRxv>
		bufferOk();
 8000c28:	f000 fb00 	bl	800122c <_Z8bufferOkv>
		return;
 8000c2c:	e005      	b.n	8000c3a <_Z12handleRxModeP14CommandContext+0x5a>
	}
	bufferValueResponse(ctx, rx.mode);
 8000c2e:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <_Z12handleRxModeP14CommandContext+0x68>)
 8000c30:	789b      	ldrb	r3, [r3, #2]
 8000c32:	4619      	mov	r1, r3
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f000 fab3 	bl	80011a0 <_Z19bufferValueResponseP14CommandContextl>
}
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	0800d9c8 	.word	0x0800d9c8
 8000c44:	200001fc 	.word	0x200001fc
 8000c48:	20000ef8 	.word	0x20000ef8

08000c4c <_Z15handleRxTimeoutP14CommandContext>:

/*
 * Handle the command "rx timeout <uint16_t>"
 */
void handleRxTimeout(CommandContext* ctx) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	if (ctx->remaining) {// value passed with call
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d01d      	beq.n	8000c98 <_Z15handleRxTimeoutP14CommandContext+0x4c>
		uint32_t value = atoi(ctx->remaining); // parse argument
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c60:	4618      	mov	r0, r3
 8000c62:	f00b fa51 	bl	800c108 <atoi>
 8000c66:	4603      	mov	r3, r0
 8000c68:	60fb      	str	r3, [r7, #12]
		if (value > 5e6 || value < rx.bit_max_period) {
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000cac <_Z15handleRxTimeoutP14CommandContext+0x60>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d804      	bhi.n	8000c7c <_Z15handleRxTimeoutP14CommandContext+0x30>
 8000c72:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <_Z15handleRxTimeoutP14CommandContext+0x64>)
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d206      	bcs.n	8000c8a <_Z15handleRxTimeoutP14CommandContext+0x3e>
			// invalid range of values... 5 seconds not realistic for data rx
			// also any shorter than the maximum bit period means data blends together
			sprintf(usb_tx_buffer, "%u %" PRIu32 "\r\n", USB_CC_BAD_VALUE, value);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2220      	movs	r2, #32
 8000c80:	490c      	ldr	r1, [pc, #48]	@ (8000cb4 <_Z15handleRxTimeoutP14CommandContext+0x68>)
 8000c82:	480d      	ldr	r0, [pc, #52]	@ (8000cb8 <_Z15handleRxTimeoutP14CommandContext+0x6c>)
 8000c84:	f00b fd0e 	bl	800c6a4 <siprintf>
			return;
 8000c88:	e00d      	b.n	8000ca6 <_Z15handleRxTimeoutP14CommandContext+0x5a>
		}
		rx.correl.timeout_us = value;
 8000c8a:	4a09      	ldr	r2, [pc, #36]	@ (8000cb0 <_Z15handleRxTimeoutP14CommandContext+0x64>)
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f8c2 3e0c 	str.w	r3, [r2, #3596]	@ 0xe0c
		bufferOk();
 8000c92:	f000 facb 	bl	800122c <_Z8bufferOkv>
		return;
 8000c96:	e006      	b.n	8000ca6 <_Z15handleRxTimeoutP14CommandContext+0x5a>
	}
	bufferValueResponse(ctx, rx.correl.timeout_us);
 8000c98:	4b05      	ldr	r3, [pc, #20]	@ (8000cb0 <_Z15handleRxTimeoutP14CommandContext+0x64>)
 8000c9a:	f8d3 3e0c 	ldr.w	r3, [r3, #3596]	@ 0xe0c
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f000 fa7d 	bl	80011a0 <_Z19bufferValueResponseP14CommandContextl>
}
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	004c4b40 	.word	0x004c4b40
 8000cb0:	20000ef8 	.word	0x20000ef8
 8000cb4:	0800d9bc 	.word	0x0800d9bc
 8000cb8:	200001fc 	.word	0x200001fc

08000cbc <_Z15handleBitPeriodP14CommandContext>:

/*
 * Handle command "rx bitperiod <uint32_t>"
 */
void handleBitPeriod(CommandContext* ctx) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	if (ctx->remaining) { // value passed with call
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d00c      	beq.n	8000ce6 <_Z15handleBitPeriodP14CommandContext+0x2a>
		uint32_t value = atoi(ctx->remaining); // parse argument
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f00b fa19 	bl	800c108 <atoi>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	60fb      	str	r3, [r7, #12]
		rx.bit_max_period = value;
 8000cda:	4a07      	ldr	r2, [pc, #28]	@ (8000cf8 <_Z15handleBitPeriodP14CommandContext+0x3c>)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	60d3      	str	r3, [r2, #12]
		bufferOk();
 8000ce0:	f000 faa4 	bl	800122c <_Z8bufferOkv>
		return;
 8000ce4:	e005      	b.n	8000cf2 <_Z15handleBitPeriodP14CommandContext+0x36>
	}
	bufferValueResponse(ctx, rx.bit_max_period);
 8000ce6:	4b04      	ldr	r3, [pc, #16]	@ (8000cf8 <_Z15handleBitPeriodP14CommandContext+0x3c>)
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	4619      	mov	r1, r3
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 fa57 	bl	80011a0 <_Z19bufferValueResponseP14CommandContextl>
}
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000ef8 	.word	0x20000ef8

08000cfc <_Z18handleRxMatchCountP14CommandContext>:

/*
 * Handle the command "rx word matchcount"
 */
void handleRxMatchCount(CommandContext* ctx) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	if (ctx->remaining) {// value passed with call
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d017      	beq.n	8000d3c <_Z18handleRxMatchCountP14CommandContext+0x40>
		uint8_t value = atoi(ctx->remaining); // parse argument
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d10:	4618      	mov	r0, r3
 8000d12:	f00b f9f9 	bl	800c108 <atoi>
 8000d16:	4603      	mov	r3, r0
 8000d18:	73fb      	strb	r3, [r7, #15]
		if (value > RX_CORREL_WORDS) {
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	2b0c      	cmp	r3, #12
 8000d1e:	d906      	bls.n	8000d2e <_Z18handleRxMatchCountP14CommandContext+0x32>
			// wouldn't be able to buffer enough matches
			sprintf(usb_tx_buffer, "%u %u\r\n", USB_CC_BAD_VALUE, (unsigned int) value);
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	2220      	movs	r2, #32
 8000d24:	490a      	ldr	r1, [pc, #40]	@ (8000d50 <_Z18handleRxMatchCountP14CommandContext+0x54>)
 8000d26:	480b      	ldr	r0, [pc, #44]	@ (8000d54 <_Z18handleRxMatchCountP14CommandContext+0x58>)
 8000d28:	f00b fcbc 	bl	800c6a4 <siprintf>
			return;
 8000d2c:	e00d      	b.n	8000d4a <_Z18handleRxMatchCountP14CommandContext+0x4e>
		}
		rx.correl.match_thresh = value;
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d58 <_Z18handleRxMatchCountP14CommandContext+0x5c>)
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	f882 3e10 	strb.w	r3, [r2, #3600]	@ 0xe10
		bufferOk();
 8000d36:	f000 fa79 	bl	800122c <_Z8bufferOkv>
		return;
 8000d3a:	e006      	b.n	8000d4a <_Z18handleRxMatchCountP14CommandContext+0x4e>
	}
	bufferValueResponse(ctx, rx.correl.match_thresh);
 8000d3c:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <_Z18handleRxMatchCountP14CommandContext+0x5c>)
 8000d3e:	f893 3e10 	ldrb.w	r3, [r3, #3600]	@ 0xe10
 8000d42:	4619      	mov	r1, r3
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f000 fa2b 	bl	80011a0 <_Z19bufferValueResponseP14CommandContextl>
}
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	0800d9b4 	.word	0x0800d9b4
 8000d54:	200001fc 	.word	0x200001fc
 8000d58:	20000ef8 	.word	0x20000ef8

08000d5c <_Z17handleRxMinLengthP14CommandContext>:

/*
 * Handle command "rx word minlength"
 */
void handleRxMinLength(CommandContext* ctx) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	if (ctx->remaining) {// value passed with call
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d01d      	beq.n	8000da8 <_Z17handleRxMinLengthP14CommandContext+0x4c>
		uint8_t value = atoi(ctx->remaining); // parse argument
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d70:	4618      	mov	r0, r3
 8000d72:	f00b f9c9 	bl	800c108 <atoi>
 8000d76:	4603      	mov	r3, r0
 8000d78:	73fb      	strb	r3, [r7, #15]
		if (value > RX_MAX_BITS || value > rx.correl.max_word_len) {
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	2b40      	cmp	r3, #64	@ 0x40
 8000d7e:	d805      	bhi.n	8000d8c <_Z17handleRxMinLengthP14CommandContext+0x30>
 8000d80:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <_Z17handleRxMinLengthP14CommandContext+0x60>)
 8000d82:	f893 3e12 	ldrb.w	r3, [r3, #3602]	@ 0xe12
 8000d86:	7bfa      	ldrb	r2, [r7, #15]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d906      	bls.n	8000d9a <_Z17handleRxMinLengthP14CommandContext+0x3e>
			// not enough space in the word buffer
			sprintf(usb_tx_buffer, "%u %u\r\n", USB_CC_BAD_VALUE, (unsigned int) value);
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	2220      	movs	r2, #32
 8000d90:	490b      	ldr	r1, [pc, #44]	@ (8000dc0 <_Z17handleRxMinLengthP14CommandContext+0x64>)
 8000d92:	480c      	ldr	r0, [pc, #48]	@ (8000dc4 <_Z17handleRxMinLengthP14CommandContext+0x68>)
 8000d94:	f00b fc86 	bl	800c6a4 <siprintf>
			return;
 8000d98:	e00d      	b.n	8000db6 <_Z17handleRxMinLengthP14CommandContext+0x5a>
		}
		rx.correl.min_word_len = value;
 8000d9a:	4a08      	ldr	r2, [pc, #32]	@ (8000dbc <_Z17handleRxMinLengthP14CommandContext+0x60>)
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	f882 3e11 	strb.w	r3, [r2, #3601]	@ 0xe11
		bufferOk();
 8000da2:	f000 fa43 	bl	800122c <_Z8bufferOkv>
		return;
 8000da6:	e006      	b.n	8000db6 <_Z17handleRxMinLengthP14CommandContext+0x5a>
	}
	bufferValueResponse(ctx, rx.correl.min_word_len);
 8000da8:	4b04      	ldr	r3, [pc, #16]	@ (8000dbc <_Z17handleRxMinLengthP14CommandContext+0x60>)
 8000daa:	f893 3e11 	ldrb.w	r3, [r3, #3601]	@ 0xe11
 8000dae:	4619      	mov	r1, r3
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f000 f9f5 	bl	80011a0 <_Z19bufferValueResponseP14CommandContextl>
}
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000ef8 	.word	0x20000ef8
 8000dc0:	0800d9b4 	.word	0x0800d9b4
 8000dc4:	200001fc 	.word	0x200001fc

08000dc8 <_Z17handleRxMaxLengthP14CommandContext>:

/*
 * Handle command "rx word maxlength"
 */
void handleRxMaxLength(CommandContext* ctx) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	if (ctx->remaining) {// value passed with call
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d01d      	beq.n	8000e14 <_Z17handleRxMaxLengthP14CommandContext+0x4c>
		uint8_t value = atoi(ctx->remaining); // parse argument
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f00b f993 	bl	800c108 <atoi>
 8000de2:	4603      	mov	r3, r0
 8000de4:	73fb      	strb	r3, [r7, #15]
		if (value > RX_MAX_BITS || value < rx.correl.min_word_len) {
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	2b40      	cmp	r3, #64	@ 0x40
 8000dea:	d805      	bhi.n	8000df8 <_Z17handleRxMaxLengthP14CommandContext+0x30>
 8000dec:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <_Z17handleRxMaxLengthP14CommandContext+0x60>)
 8000dee:	f893 3e11 	ldrb.w	r3, [r3, #3601]	@ 0xe11
 8000df2:	7bfa      	ldrb	r2, [r7, #15]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d206      	bcs.n	8000e06 <_Z17handleRxMaxLengthP14CommandContext+0x3e>
			// not enough space in the word buffer
			sprintf(usb_tx_buffer, "%u %u\r\n", USB_CC_BAD_VALUE, (unsigned int) value);
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	2220      	movs	r2, #32
 8000dfc:	490b      	ldr	r1, [pc, #44]	@ (8000e2c <_Z17handleRxMaxLengthP14CommandContext+0x64>)
 8000dfe:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <_Z17handleRxMaxLengthP14CommandContext+0x68>)
 8000e00:	f00b fc50 	bl	800c6a4 <siprintf>
			return;
 8000e04:	e00d      	b.n	8000e22 <_Z17handleRxMaxLengthP14CommandContext+0x5a>
		}
		rx.correl.max_word_len = value;
 8000e06:	4a08      	ldr	r2, [pc, #32]	@ (8000e28 <_Z17handleRxMaxLengthP14CommandContext+0x60>)
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	f882 3e12 	strb.w	r3, [r2, #3602]	@ 0xe12
		bufferOk();
 8000e0e:	f000 fa0d 	bl	800122c <_Z8bufferOkv>
		return;
 8000e12:	e006      	b.n	8000e22 <_Z17handleRxMaxLengthP14CommandContext+0x5a>
	}
	bufferValueResponse(ctx, rx.correl.max_word_len);
 8000e14:	4b04      	ldr	r3, [pc, #16]	@ (8000e28 <_Z17handleRxMaxLengthP14CommandContext+0x60>)
 8000e16:	f893 3e12 	ldrb.w	r3, [r3, #3602]	@ 0xe12
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f000 f9bf 	bl	80011a0 <_Z19bufferValueResponseP14CommandContextl>
}
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000ef8 	.word	0x20000ef8
 8000e2c:	0800d9b4 	.word	0x0800d9b4
 8000e30:	200001fc 	.word	0x200001fc

08000e34 <_Z12handleTxLongP14CommandContext>:

/*
 * Handle command "tx time long <uint16_t>"
 */
void handleTxLong(CommandContext* ctx) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	if (ctx->remaining) {// value passed with call
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d021      	beq.n	8000e88 <_Z12handleTxLongP14CommandContext+0x54>
		uint32_t value = atoi(ctx->remaining); // parse argument
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f00b f95d 	bl	800c108 <atoi>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	60fb      	str	r3, [r7, #12]
		if (value > (UINT16_MAX >> 2) || value < tx.t_short) {
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000e58:	d205      	bcs.n	8000e66 <_Z12handleTxLongP14CommandContext+0x32>
 8000e5a:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <_Z12handleTxLongP14CommandContext+0x68>)
 8000e5c:	885b      	ldrh	r3, [r3, #2]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d206      	bcs.n	8000e74 <_Z12handleTxLongP14CommandContext+0x40>
			// not enough space in the word buffer
			sprintf(usb_tx_buffer, "%u %" PRIu32 "\r\n", USB_CC_BAD_VALUE, value);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	2220      	movs	r2, #32
 8000e6a:	490d      	ldr	r1, [pc, #52]	@ (8000ea0 <_Z12handleTxLongP14CommandContext+0x6c>)
 8000e6c:	480d      	ldr	r0, [pc, #52]	@ (8000ea4 <_Z12handleTxLongP14CommandContext+0x70>)
 8000e6e:	f00b fc19 	bl	800c6a4 <siprintf>
			return;
 8000e72:	e00f      	b.n	8000e94 <_Z12handleTxLongP14CommandContext+0x60>
		}
		tx.t_long = (uint16_t) value;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <_Z12handleTxLongP14CommandContext+0x68>)
 8000e7a:	809a      	strh	r2, [r3, #4]
		updateARR(&tx);
 8000e7c:	4807      	ldr	r0, [pc, #28]	@ (8000e9c <_Z12handleTxLongP14CommandContext+0x68>)
 8000e7e:	f001 fbb9 	bl	80025f4 <_Z9updateARRP11Transmitter>
		bufferOk();
 8000e82:	f000 f9d3 	bl	800122c <_Z8bufferOkv>
		return;
 8000e86:	e005      	b.n	8000e94 <_Z12handleTxLongP14CommandContext+0x60>
	}
	bufferValueResponse(ctx, tx.t_long);
 8000e88:	4b04      	ldr	r3, [pc, #16]	@ (8000e9c <_Z12handleTxLongP14CommandContext+0x68>)
 8000e8a:	889b      	ldrh	r3, [r3, #4]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f000 f986 	bl	80011a0 <_Z19bufferValueResponseP14CommandContextl>
}
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20001d0c 	.word	0x20001d0c
 8000ea0:	0800d9bc 	.word	0x0800d9bc
 8000ea4:	200001fc 	.word	0x200001fc

08000ea8 <_Z13handleTxShortP14CommandContext>:

/*
 * Handle command "tx time short <uint16_t>"
 */
void handleTxShort(CommandContext* ctx) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	if (ctx->remaining) {// value passed with call
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d021      	beq.n	8000efc <_Z13handleTxShortP14CommandContext+0x54>
		uint32_t value = atoi(ctx->remaining); // parse argument
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f00b f923 	bl	800c108 <atoi>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	60fb      	str	r3, [r7, #12]
		if (value > (UINT16_MAX >> 2) || value > tx.t_long) {
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000ecc:	d205      	bcs.n	8000eda <_Z13handleTxShortP14CommandContext+0x32>
 8000ece:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <_Z13handleTxShortP14CommandContext+0x68>)
 8000ed0:	889b      	ldrh	r3, [r3, #4]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d906      	bls.n	8000ee8 <_Z13handleTxShortP14CommandContext+0x40>
			// not enough space in the word buffer
			sprintf(usb_tx_buffer, "%u %" PRIu32 "\r\n", USB_CC_BAD_VALUE, value);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2220      	movs	r2, #32
 8000ede:	490d      	ldr	r1, [pc, #52]	@ (8000f14 <_Z13handleTxShortP14CommandContext+0x6c>)
 8000ee0:	480d      	ldr	r0, [pc, #52]	@ (8000f18 <_Z13handleTxShortP14CommandContext+0x70>)
 8000ee2:	f00b fbdf 	bl	800c6a4 <siprintf>
			return;
 8000ee6:	e00f      	b.n	8000f08 <_Z13handleTxShortP14CommandContext+0x60>
		}
		tx.t_short = (uint16_t) value;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <_Z13handleTxShortP14CommandContext+0x68>)
 8000eee:	805a      	strh	r2, [r3, #2]
		updateARR(&tx);
 8000ef0:	4807      	ldr	r0, [pc, #28]	@ (8000f10 <_Z13handleTxShortP14CommandContext+0x68>)
 8000ef2:	f001 fb7f 	bl	80025f4 <_Z9updateARRP11Transmitter>
		bufferOk();
 8000ef6:	f000 f999 	bl	800122c <_Z8bufferOkv>
		return;
 8000efa:	e005      	b.n	8000f08 <_Z13handleTxShortP14CommandContext+0x60>
	}
	bufferValueResponse(ctx, tx.t_short);
 8000efc:	4b04      	ldr	r3, [pc, #16]	@ (8000f10 <_Z13handleTxShortP14CommandContext+0x68>)
 8000efe:	885b      	ldrh	r3, [r3, #2]
 8000f00:	4619      	mov	r1, r3
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 f94c 	bl	80011a0 <_Z19bufferValueResponseP14CommandContextl>
}
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20001d0c 	.word	0x20001d0c
 8000f14:	0800d9bc 	.word	0x0800d9bc
 8000f18:	200001fc 	.word	0x200001fc

08000f1c <_Z18handleTxFrameDelayP14CommandContext>:

/*
 * Handle command "tx delay frame <uint32_t>"
 */
void handleTxFrameDelay(CommandContext* ctx) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	if (ctx->remaining) {// value passed with call
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d02a      	beq.n	8000f82 <_Z18handleTxFrameDelayP14CommandContext+0x66>
		uint32_t value = atoi(ctx->remaining); // parse argument
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f30:	4618      	mov	r0, r3
 8000f32:	f00b f8e9 	bl	800c108 <atoi>
 8000f36:	4603      	mov	r3, r0
 8000f38:	60fb      	str	r3, [r7, #12]
		if (value > 50*(tx.t_short + tx.t_long) || value < (tx.t_short + tx.t_long)) {
 8000f3a:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <_Z18handleTxFrameDelayP14CommandContext+0x78>)
 8000f3c:	885b      	ldrh	r3, [r3, #2]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b14      	ldr	r3, [pc, #80]	@ (8000f94 <_Z18handleTxFrameDelayP14CommandContext+0x78>)
 8000f42:	889b      	ldrh	r3, [r3, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	2232      	movs	r2, #50	@ 0x32
 8000f48:	fb02 f303 	mul.w	r3, r2, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d809      	bhi.n	8000f68 <_Z18handleTxFrameDelayP14CommandContext+0x4c>
 8000f54:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <_Z18handleTxFrameDelayP14CommandContext+0x78>)
 8000f56:	885b      	ldrh	r3, [r3, #2]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <_Z18handleTxFrameDelayP14CommandContext+0x78>)
 8000f5c:	889b      	ldrh	r3, [r3, #4]
 8000f5e:	4413      	add	r3, r2
 8000f60:	461a      	mov	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d206      	bcs.n	8000f76 <_Z18handleTxFrameDelayP14CommandContext+0x5a>
			// absurdly long delay between frames. Typically it's about 6-8 * t_long
			// constrained to > 1*period; < 50*period
			sprintf(usb_tx_buffer, "%u %" PRIu32 "\r\n", USB_CC_BAD_VALUE, value);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2220      	movs	r2, #32
 8000f6c:	490a      	ldr	r1, [pc, #40]	@ (8000f98 <_Z18handleTxFrameDelayP14CommandContext+0x7c>)
 8000f6e:	480b      	ldr	r0, [pc, #44]	@ (8000f9c <_Z18handleTxFrameDelayP14CommandContext+0x80>)
 8000f70:	f00b fb98 	bl	800c6a4 <siprintf>
			return;
 8000f74:	e00b      	b.n	8000f8e <_Z18handleTxFrameDelayP14CommandContext+0x72>
		}
		tx.frame_delay_us = value;
 8000f76:	4a07      	ldr	r2, [pc, #28]	@ (8000f94 <_Z18handleTxFrameDelayP14CommandContext+0x78>)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6093      	str	r3, [r2, #8]
		bufferOk();
 8000f7c:	f000 f956 	bl	800122c <_Z8bufferOkv>
		return;
 8000f80:	e005      	b.n	8000f8e <_Z18handleTxFrameDelayP14CommandContext+0x72>
	}
	bufferValueResponse(ctx, tx.frame_delay_us);
 8000f82:	4b04      	ldr	r3, [pc, #16]	@ (8000f94 <_Z18handleTxFrameDelayP14CommandContext+0x78>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	4619      	mov	r1, r3
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f909 	bl	80011a0 <_Z19bufferValueResponseP14CommandContextl>
}
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20001d0c 	.word	0x20001d0c
 8000f98:	0800d9bc 	.word	0x0800d9bc
 8000f9c:	200001fc 	.word	0x200001fc

08000fa0 <_Z18handleTxBurstDelayP14CommandContext>:

/*
 * Handle command "tx delay burst <uint32_t>"
 */
void handleTxBurstDelay(CommandContext* ctx) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	if (ctx->remaining) {// value passed with call
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d021      	beq.n	8000ff4 <_Z18handleTxBurstDelayP14CommandContext+0x54>
		uint32_t value = atoi(ctx->remaining); // parse argument
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f00b f8a7 	bl	800c108 <atoi>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	60fb      	str	r3, [r7, #12]
		if (value > 60e6 || value < (tx.t_long + tx.t_short)) {
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4a11      	ldr	r2, [pc, #68]	@ (8001008 <_Z18handleTxBurstDelayP14CommandContext+0x68>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d809      	bhi.n	8000fda <_Z18handleTxBurstDelayP14CommandContext+0x3a>
 8000fc6:	4b11      	ldr	r3, [pc, #68]	@ (800100c <_Z18handleTxBurstDelayP14CommandContext+0x6c>)
 8000fc8:	889b      	ldrh	r3, [r3, #4]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800100c <_Z18handleTxBurstDelayP14CommandContext+0x6c>)
 8000fce:	885b      	ldrh	r3, [r3, #2]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d206      	bcs.n	8000fe8 <_Z18handleTxBurstDelayP14CommandContext+0x48>
			// could do up to 60 seconds between transmissions... but that's absurd
			// can't be less than the frame delay
			sprintf(usb_tx_buffer, "%u %" PRIu32 "\r\n", USB_CC_BAD_VALUE, value);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2220      	movs	r2, #32
 8000fde:	490c      	ldr	r1, [pc, #48]	@ (8001010 <_Z18handleTxBurstDelayP14CommandContext+0x70>)
 8000fe0:	480c      	ldr	r0, [pc, #48]	@ (8001014 <_Z18handleTxBurstDelayP14CommandContext+0x74>)
 8000fe2:	f00b fb5f 	bl	800c6a4 <siprintf>
			return;
 8000fe6:	e00b      	b.n	8001000 <_Z18handleTxBurstDelayP14CommandContext+0x60>
		}
		tx.burst_delay_us = value;
 8000fe8:	4a08      	ldr	r2, [pc, #32]	@ (800100c <_Z18handleTxBurstDelayP14CommandContext+0x6c>)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	60d3      	str	r3, [r2, #12]
		bufferOk();
 8000fee:	f000 f91d 	bl	800122c <_Z8bufferOkv>
		return;
 8000ff2:	e005      	b.n	8001000 <_Z18handleTxBurstDelayP14CommandContext+0x60>
	}
	bufferValueResponse(ctx, tx.burst_delay_us);
 8000ff4:	4b05      	ldr	r3, [pc, #20]	@ (800100c <_Z18handleTxBurstDelayP14CommandContext+0x6c>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 f8d0 	bl	80011a0 <_Z19bufferValueResponseP14CommandContextl>
}
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	03938700 	.word	0x03938700
 800100c:	20001d0c 	.word	0x20001d0c
 8001010:	0800d9bc 	.word	0x0800d9bc
 8001014:	200001fc 	.word	0x200001fc

08001018 <_Z14handleTxRepeatP14CommandContext>:

/*
 * Handle command "tx repeat <uint8_t>"
 */
void handleTxRepeat(CommandContext* ctx) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	if (ctx->remaining) {// value passed with call
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001024:	2b00      	cmp	r3, #0
 8001026:	d017      	beq.n	8001058 <_Z14handleTxRepeatP14CommandContext+0x40>
		uint32_t value = atoi(ctx->remaining); // parse argument
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800102c:	4618      	mov	r0, r3
 800102e:	f00b f86b 	bl	800c108 <atoi>
 8001032:	4603      	mov	r3, r0
 8001034:	60fb      	str	r3, [r7, #12]
		if (value > 100) {
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2b64      	cmp	r3, #100	@ 0x64
 800103a:	d906      	bls.n	800104a <_Z14handleTxRepeatP14CommandContext+0x32>
			// why would you need to repeat more than 100 times??
			sprintf(usb_tx_buffer, "%u %" PRIu32 "\r\n", USB_CC_BAD_VALUE, value);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2220      	movs	r2, #32
 8001040:	490a      	ldr	r1, [pc, #40]	@ (800106c <_Z14handleTxRepeatP14CommandContext+0x54>)
 8001042:	480b      	ldr	r0, [pc, #44]	@ (8001070 <_Z14handleTxRepeatP14CommandContext+0x58>)
 8001044:	f00b fb2e 	bl	800c6a4 <siprintf>
			return;
 8001048:	e00c      	b.n	8001064 <_Z14handleTxRepeatP14CommandContext+0x4c>
		}
		tx.frame_repeat = (uint8_t) value;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <_Z14handleTxRepeatP14CommandContext+0x5c>)
 8001050:	741a      	strb	r2, [r3, #16]
		bufferOk();
 8001052:	f000 f8eb 	bl	800122c <_Z8bufferOkv>
		return;
 8001056:	e005      	b.n	8001064 <_Z14handleTxRepeatP14CommandContext+0x4c>
	}
	bufferValueResponse(ctx, tx.frame_repeat);
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <_Z14handleTxRepeatP14CommandContext+0x5c>)
 800105a:	7c1b      	ldrb	r3, [r3, #16]
 800105c:	4619      	mov	r1, r3
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f89e 	bl	80011a0 <_Z19bufferValueResponseP14CommandContextl>
}
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	0800d9bc 	.word	0x0800d9bc
 8001070:	200001fc 	.word	0x200001fc
 8001074:	20001d0c 	.word	0x20001d0c

08001078 <_Z12handleTxWordP14CommandContext>:
 */

/*
 * Handle command "tx <sequence 1:0>"
 */
void handleTxWord(CommandContext* ctx) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	if (!ctx->remaining) {// no value passed with call
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001084:	2b00      	cmp	r3, #0
 8001086:	d105      	bne.n	8001094 <_Z12handleTxWordP14CommandContext+0x1c>
		// we're missing a parameter
		sprintf(usb_tx_buffer, "%u\r\n", USB_CC_MISSING_PARAM);
 8001088:	2231      	movs	r2, #49	@ 0x31
 800108a:	493d      	ldr	r1, [pc, #244]	@ (8001180 <_Z12handleTxWordP14CommandContext+0x108>)
 800108c:	483d      	ldr	r0, [pc, #244]	@ (8001184 <_Z12handleTxWordP14CommandContext+0x10c>)
 800108e:	f00b fb09 	bl	800c6a4 <siprintf>
		return;
 8001092:	e072      	b.n	800117a <_Z12handleTxWordP14CommandContext+0x102>
	}

	// check for valid word length
	if (strlen(ctx->remaining) > TX_MAX_BITS + (tx.ignore_sync_bit ? 1 : 0)) {
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff f861 	bl	8000160 <strlen>
 800109e:	4602      	mov	r2, r0
 80010a0:	4b39      	ldr	r3, [pc, #228]	@ (8001188 <_Z12handleTxWordP14CommandContext+0x110>)
 80010a2:	785b      	ldrb	r3, [r3, #1]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <_Z12handleTxWordP14CommandContext+0x34>
 80010a8:	2341      	movs	r3, #65	@ 0x41
 80010aa:	e000      	b.n	80010ae <_Z12handleTxWordP14CommandContext+0x36>
 80010ac:	2340      	movs	r3, #64	@ 0x40
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d207      	bcs.n	80010c2 <_Z12handleTxWordP14CommandContext+0x4a>
		sprintf(usb_tx_buffer, "%u %s\r\n", USB_CC_BAD_VALUE, ctx->remaining);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010b6:	2220      	movs	r2, #32
 80010b8:	4934      	ldr	r1, [pc, #208]	@ (800118c <_Z12handleTxWordP14CommandContext+0x114>)
 80010ba:	4832      	ldr	r0, [pc, #200]	@ (8001184 <_Z12handleTxWordP14CommandContext+0x10c>)
 80010bc:	f00b faf2 	bl	800c6a4 <siprintf>
		return;
 80010c0:	e05b      	b.n	800117a <_Z12handleTxWordP14CommandContext+0x102>
	}

	// check if the tx buffer has data in the last index already; if so, return busy error
	if (tx.buffer[TX_BUFFER_LEN - 1][0] != 0) {
 80010c2:	4b31      	ldr	r3, [pc, #196]	@ (8001188 <_Z12handleTxWordP14CommandContext+0x110>)
 80010c4:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <_Z12handleTxWordP14CommandContext+0x60>
		sprintf(usb_tx_buffer, "%u\r\n", USB_CC_BUSY);
 80010cc:	2201      	movs	r2, #1
 80010ce:	492c      	ldr	r1, [pc, #176]	@ (8001180 <_Z12handleTxWordP14CommandContext+0x108>)
 80010d0:	482c      	ldr	r0, [pc, #176]	@ (8001184 <_Z12handleTxWordP14CommandContext+0x10c>)
 80010d2:	f00b fae7 	bl	800c6a4 <siprintf>
		return;
 80010d6:	e050      	b.n	800117a <_Z12handleTxWordP14CommandContext+0x102>
	}

	// parameter passed; check each char for validity of only 1 or 0 binary characters
	for(unsigned int i = 0; i < strlen(ctx->remaining); i++) {
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	e018      	b.n	8001110 <_Z12handleTxWordP14CommandContext+0x98>
		if (ctx->remaining[i] != '1' && ctx->remaining[i] != '0') {
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4413      	add	r3, r2
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b31      	cmp	r3, #49	@ 0x31
 80010ea:	d00e      	beq.n	800110a <_Z12handleTxWordP14CommandContext+0x92>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b30      	cmp	r3, #48	@ 0x30
 80010f8:	d007      	beq.n	800110a <_Z12handleTxWordP14CommandContext+0x92>
			// invalid character
			sprintf(usb_tx_buffer, "%u %s\r\n", USB_CC_BAD_VALUE, ctx->remaining);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010fe:	2220      	movs	r2, #32
 8001100:	4922      	ldr	r1, [pc, #136]	@ (800118c <_Z12handleTxWordP14CommandContext+0x114>)
 8001102:	4820      	ldr	r0, [pc, #128]	@ (8001184 <_Z12handleTxWordP14CommandContext+0x10c>)
 8001104:	f00b face 	bl	800c6a4 <siprintf>
			return;
 8001108:	e037      	b.n	800117a <_Z12handleTxWordP14CommandContext+0x102>
	for(unsigned int i = 0; i < strlen(ctx->remaining); i++) {
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3301      	adds	r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f823 	bl	8000160 <strlen>
 800111a:	4602      	mov	r2, r0
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4293      	cmp	r3, r2
 8001120:	d3dd      	bcc.n	80010de <_Z12handleTxWordP14CommandContext+0x66>
		}
	}

	// find the next available index and insert data there
	for (unsigned int i = 0; i < TX_BUFFER_LEN; i++) {
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	e025      	b.n	8001174 <_Z12handleTxWordP14CommandContext+0xfc>
		if (tx.buffer[i][0] == 0) {
 8001128:	4a17      	ldr	r2, [pc, #92]	@ (8001188 <_Z12handleTxWordP14CommandContext+0x110>)
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	019b      	lsls	r3, r3, #6
 800112e:	4413      	add	r3, r2
 8001130:	3311      	adds	r3, #17
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d11a      	bne.n	800116e <_Z12handleTxWordP14CommandContext+0xf6>
			// nothing is queued yet, and data is valid, so push it to the txData buffer
			// add leading '0' as the TX start bit
			sprintf(tx.buffer[i], "%s%s", tx.ignore_sync_bit ? "" : (tx.invert_logic ? "1" : "0"), ctx->remaining);
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	019b      	lsls	r3, r3, #6
 800113c:	3310      	adds	r3, #16
 800113e:	4a12      	ldr	r2, [pc, #72]	@ (8001188 <_Z12handleTxWordP14CommandContext+0x110>)
 8001140:	4413      	add	r3, r2
 8001142:	1c58      	adds	r0, r3, #1
 8001144:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <_Z12handleTxWordP14CommandContext+0x110>)
 8001146:	785b      	ldrb	r3, [r3, #1]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <_Z12handleTxWordP14CommandContext+0xd8>
 800114c:	4a10      	ldr	r2, [pc, #64]	@ (8001190 <_Z12handleTxWordP14CommandContext+0x118>)
 800114e:	e006      	b.n	800115e <_Z12handleTxWordP14CommandContext+0xe6>
 8001150:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <_Z12handleTxWordP14CommandContext+0x110>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <_Z12handleTxWordP14CommandContext+0xe4>
 8001158:	4a0e      	ldr	r2, [pc, #56]	@ (8001194 <_Z12handleTxWordP14CommandContext+0x11c>)
 800115a:	e000      	b.n	800115e <_Z12handleTxWordP14CommandContext+0xe6>
 800115c:	4a0e      	ldr	r2, [pc, #56]	@ (8001198 <_Z12handleTxWordP14CommandContext+0x120>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001162:	490e      	ldr	r1, [pc, #56]	@ (800119c <_Z12handleTxWordP14CommandContext+0x124>)
 8001164:	f00b fa9e 	bl	800c6a4 <siprintf>
			bufferOk();
 8001168:	f000 f860 	bl	800122c <_Z8bufferOkv>
			return;
 800116c:	e005      	b.n	800117a <_Z12handleTxWordP14CommandContext+0x102>
	for (unsigned int i = 0; i < TX_BUFFER_LEN; i++) {
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	3301      	adds	r3, #1
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	2b04      	cmp	r3, #4
 8001178:	d9d6      	bls.n	8001128 <_Z12handleTxWordP14CommandContext+0xb0>
		}
	}
}
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	0800d9ac 	.word	0x0800d9ac
 8001184:	200001fc 	.word	0x200001fc
 8001188:	20001d0c 	.word	0x20001d0c
 800118c:	0800d9a4 	.word	0x0800d9a4
 8001190:	0800d9d4 	.word	0x0800d9d4
 8001194:	0800d9d8 	.word	0x0800d9d8
 8001198:	0800d9dc 	.word	0x0800d9dc
 800119c:	0800d9e0 	.word	0x0800d9e0

080011a0 <_Z19bufferValueResponseP14CommandContextl>:

/*
 * Response for getting generic values
 */
void bufferValueResponse(CommandContext* ctx, long responseValue) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	char* idx = usb_tx_buffer;
 80011aa:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <_Z19bufferValueResponseP14CommandContextl+0x7c>)
 80011ac:	60fb      	str	r3, [r7, #12]
	sprintf(usb_tx_buffer, "%u ", USB_CC_OK);
 80011ae:	2200      	movs	r2, #0
 80011b0:	491b      	ldr	r1, [pc, #108]	@ (8001220 <_Z19bufferValueResponseP14CommandContextl+0x80>)
 80011b2:	481a      	ldr	r0, [pc, #104]	@ (800121c <_Z19bufferValueResponseP14CommandContextl+0x7c>)
 80011b4:	f00b fa76 	bl	800c6a4 <siprintf>
	idx += strlen(usb_tx_buffer);
 80011b8:	4818      	ldr	r0, [pc, #96]	@ (800121c <_Z19bufferValueResponseP14CommandContextl+0x7c>)
 80011ba:	f7fe ffd1 	bl	8000160 <strlen>
 80011be:	4602      	mov	r2, r0
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4413      	add	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
	for (uint8_t argi = 1; argi < ctx->argc; argi++) {
 80011c6:	2301      	movs	r3, #1
 80011c8:	72fb      	strb	r3, [r7, #11]
 80011ca:	e019      	b.n	8001200 <_Z19bufferValueResponseP14CommandContextl+0x60>
		sprintf(idx, "%s ", ctx->argv[argi]);
 80011cc:	7afb      	ldrb	r3, [r7, #11]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	461a      	mov	r2, r3
 80011d8:	4912      	ldr	r1, [pc, #72]	@ (8001224 <_Z19bufferValueResponseP14CommandContextl+0x84>)
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	f00b fa62 	bl	800c6a4 <siprintf>
		idx += strlen(ctx->argv[argi]) + 1;
 80011e0:	7afb      	ldrb	r3, [r7, #11]
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7fe ffb8 	bl	8000160 <strlen>
 80011f0:	4603      	mov	r3, r0
 80011f2:	3301      	adds	r3, #1
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	4413      	add	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
	for (uint8_t argi = 1; argi < ctx->argc; argi++) {
 80011fa:	7afb      	ldrb	r3, [r7, #11]
 80011fc:	3301      	adds	r3, #1
 80011fe:	72fb      	strb	r3, [r7, #11]
 8001200:	7afa      	ldrb	r2, [r7, #11]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	dbe0      	blt.n	80011cc <_Z19bufferValueResponseP14CommandContextl+0x2c>
	}
	sprintf(idx, "%" PRId32 "\r\n", responseValue);
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	4906      	ldr	r1, [pc, #24]	@ (8001228 <_Z19bufferValueResponseP14CommandContextl+0x88>)
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f00b fa48 	bl	800c6a4 <siprintf>
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200001fc 	.word	0x200001fc
 8001220:	0800d9e8 	.word	0x0800d9e8
 8001224:	0800d9ec 	.word	0x0800d9ec
 8001228:	0800d9f0 	.word	0x0800d9f0

0800122c <_Z8bufferOkv>:

/*
 * Response for an "OK" to the USB host
 */
void bufferOk() {
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	sprintf(usb_tx_buffer, "%u OK\r\n", USB_CC_OK);
 8001230:	2200      	movs	r2, #0
 8001232:	4903      	ldr	r1, [pc, #12]	@ (8001240 <_Z8bufferOkv+0x14>)
 8001234:	4803      	ldr	r0, [pc, #12]	@ (8001244 <_Z8bufferOkv+0x18>)
 8001236:	f00b fa35 	bl	800c6a4 <siprintf>
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	0800d9f8 	.word	0x0800d9f8
 8001244:	200001fc 	.word	0x200001fc

08001248 <_Z10USER_setupv>:



// =================== SYS PARAMS =======================

int USER_setup(void) {
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	txInit(&tx); // initialize Tx function
 800124c:	480f      	ldr	r0, [pc, #60]	@ (800128c <_Z10USER_setupv+0x44>)
 800124e:	f001 f9bb 	bl	80025c8 <_Z6txInitP11Transmitter>
	rxInit(&rx); // initialize Rx function
 8001252:	480f      	ldr	r0, [pc, #60]	@ (8001290 <_Z10USER_setupv+0x48>)
 8001254:	f000 fd32 	bl	8001cbc <_Z6rxInitP8Receiver>

	// flash on-board LED to indicate system active
	HAL_GPIO_WritePin(USB_ACT_GPIO_Port, USB_ACT_Pin, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800125e:	480d      	ldr	r0, [pc, #52]	@ (8001294 <_Z10USER_setupv+0x4c>)
 8001260:	f002 fb29 	bl	80038b6 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001264:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001268:	f001 fdf2 	bl	8002e50 <HAL_Delay>
	HAL_GPIO_WritePin(USB_ACT_GPIO_Port, USB_ACT_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001272:	4808      	ldr	r0, [pc, #32]	@ (8001294 <_Z10USER_setupv+0x4c>)
 8001274:	f002 fb1f 	bl	80038b6 <HAL_GPIO_WritePin>

	if (rx.mode > 0) {
 8001278:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <_Z10USER_setupv+0x48>)
 800127a:	789b      	ldrb	r3, [r3, #2]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <_Z10USER_setupv+0x3c>
		enableRx(); // enable radio receiver
 8001280:	f000 fd46 	bl	8001d10 <_Z8enableRxv>
	}
	return 0;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20001d0c 	.word	0x20001d0c
 8001290:	20000ef8 	.word	0x20000ef8
 8001294:	40011000 	.word	0x40011000

08001298 <_ZN8RxPacketC1Ev>:
	char word[RX_MAX_BITS+1];
	uint32_t long_us = 0;
	uint32_t short_us = 0;
	uint32_t period_us = 0;
	bool logic = false;
} RxPacket;
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	645a      	str	r2, [r3, #68]	@ 0x44
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	649a      	str	r2, [r3, #72]	@ 0x48
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <_Z9USER_loopv>:
 * User-defined loop structure. There are 3 loop return conditions:
 * return 0: loop should continue
 * return >0: loop should terminate, no error handling; program will execute USER_shutdown
 * return <0: loop should terminate, errors to report; program will execute USER_Error
 */
int USER_loop(void) {
 80012cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ce:	b0a1      	sub	sp, #132	@ 0x84
 80012d0:	af06      	add	r7, sp, #24
	// process any potential USB data received
	processUSB();
 80012d2:	f7ff fb25 	bl	8000920 <_Z10processUSBv>

	// process updates to current / next transmission
	processTx(&tx, &data);
 80012d6:	49a8      	ldr	r1, [pc, #672]	@ (8001578 <_Z9USER_loopv+0x2ac>)
 80012d8:	48a8      	ldr	r0, [pc, #672]	@ (800157c <_Z9USER_loopv+0x2b0>)
 80012da:	f001 fa33 	bl	8002744 <_Z9processTxP11TransmitterP8TxPacket>

	// handle system feedback due to transmit status values
	if (((status >> 8) & 0xFF) > TX_BUFFER_EMPTY) {
 80012de:	4ba8      	ldr	r3, [pc, #672]	@ (8001580 <_Z9USER_loopv+0x2b4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 437e 	and.w	r3, r3, #65024	@ 0xfe00
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d03d      	beq.n	8001366 <_Z9USER_loopv+0x9a>
		memset(usb_tx_buffer, 0, sizeof(usb_tx_buffer));
 80012ea:	f44f 6282 	mov.w	r2, #1040	@ 0x410
 80012ee:	2100      	movs	r1, #0
 80012f0:	48a4      	ldr	r0, [pc, #656]	@ (8001584 <_Z9USER_loopv+0x2b8>)
 80012f2:	f00b fa56 	bl	800c7a2 <memset>
		// buffer outputs to usb host on tx buffer prep fail or tx complete flags
		if ((status >> 8) & TX_PREP_FAILED) {
 80012f6:	4ba2      	ldr	r3, [pc, #648]	@ (8001580 <_Z9USER_loopv+0x2b4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d009      	beq.n	8001316 <_Z9USER_loopv+0x4a>
			sprintf(usb_tx_buffer, "%" PRIu32 " %s\r\n", status & (TX_PREP_FAILED << 8), tx.buffer[0]);
 8001302:	4b9f      	ldr	r3, [pc, #636]	@ (8001580 <_Z9USER_loopv+0x2b4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 7200 	and.w	r2, r3, #512	@ 0x200
 800130a:	4b9f      	ldr	r3, [pc, #636]	@ (8001588 <_Z9USER_loopv+0x2bc>)
 800130c:	499f      	ldr	r1, [pc, #636]	@ (800158c <_Z9USER_loopv+0x2c0>)
 800130e:	489d      	ldr	r0, [pc, #628]	@ (8001584 <_Z9USER_loopv+0x2b8>)
 8001310:	f00b f9c8 	bl	800c6a4 <siprintf>
 8001314:	e00e      	b.n	8001334 <_Z9USER_loopv+0x68>
		} else if ((status >> 8) & TX_COMPLETE) {
 8001316:	4b9a      	ldr	r3, [pc, #616]	@ (8001580 <_Z9USER_loopv+0x2b4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800131e:	2b00      	cmp	r3, #0
 8001320:	d008      	beq.n	8001334 <_Z9USER_loopv+0x68>
			sprintf(usb_tx_buffer, "%" PRIu32 " %s\r\n", status & (TX_COMPLETE << 8), tx.buffer[0]);
 8001322:	4b97      	ldr	r3, [pc, #604]	@ (8001580 <_Z9USER_loopv+0x2b4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800132a:	4b97      	ldr	r3, [pc, #604]	@ (8001588 <_Z9USER_loopv+0x2bc>)
 800132c:	4997      	ldr	r1, [pc, #604]	@ (800158c <_Z9USER_loopv+0x2c0>)
 800132e:	4895      	ldr	r0, [pc, #596]	@ (8001584 <_Z9USER_loopv+0x2b8>)
 8001330:	f00b f9b8 	bl	800c6a4 <siprintf>
		}

		// tx buffer retains tx data until either a fail to buffer or a transmission complete
		// Once either of those conditions are met, shift the buffer over.
		if ((status >> 8) & (TX_PREP_FAILED | TX_COMPLETE)) {
 8001334:	4b92      	ldr	r3, [pc, #584]	@ (8001580 <_Z9USER_loopv+0x2b4>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800133c:	2b00      	cmp	r3, #0
 800133e:	d010      	beq.n	8001362 <_Z9USER_loopv+0x96>
			// shift the tx_buffer to the left
			memmove(tx.buffer, tx.buffer[1], (TX_BUFFER_LEN - 1) * TX_MAX_BITS);
 8001340:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001344:	4992      	ldr	r1, [pc, #584]	@ (8001590 <_Z9USER_loopv+0x2c4>)
 8001346:	4890      	ldr	r0, [pc, #576]	@ (8001588 <_Z9USER_loopv+0x2bc>)
 8001348:	f00b fa11 	bl	800c76e <memmove>
			memset(tx.buffer[TX_BUFFER_LEN - 1], 0, TX_MAX_BITS);
 800134c:	2240      	movs	r2, #64	@ 0x40
 800134e:	2100      	movs	r1, #0
 8001350:	4890      	ldr	r0, [pc, #576]	@ (8001594 <_Z9USER_loopv+0x2c8>)
 8001352:	f00b fa26 	bl	800c7a2 <memset>
			status &= ~((TX_PREP_FAILED | TX_COMPLETE) << 8); // clear the flags
 8001356:	4b8a      	ldr	r3, [pc, #552]	@ (8001580 <_Z9USER_loopv+0x2b4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800135e:	4a88      	ldr	r2, [pc, #544]	@ (8001580 <_Z9USER_loopv+0x2b4>)
 8001360:	6013      	str	r3, [r2, #0]
		}
		pushUSB();
 8001362:	f7ff fb2b 	bl	80009bc <_Z7pushUSBv>
	}

	// process RF received buffer content
	checkRxBuffers();
 8001366:	f000 fe8b 	bl	8002080 <_Z14checkRxBuffersv>

	// TODO: check for matching received words, and calculate average of observed timings

	// check if the receiver status is non-zero
	if ((status >> 16) & 0xFF) {
 800136a:	4b85      	ldr	r3, [pc, #532]	@ (8001580 <_Z9USER_loopv+0x2b4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 80cc 	beq.w	8001510 <_Z9USER_loopv+0x244>
		memset(usb_tx_buffer, 0, sizeof(usb_tx_buffer));
 8001378:	f44f 6282 	mov.w	r2, #1040	@ 0x410
 800137c:	2100      	movs	r1, #0
 800137e:	4881      	ldr	r0, [pc, #516]	@ (8001584 <_Z9USER_loopv+0x2b8>)
 8001380:	f00b fa0f 	bl	800c7a2 <memset>
		// data received, so transmit to USB host
		if ((status >> 16) & RX_WORD_AVAILABLE) {
 8001384:	4b7e      	ldr	r3, [pc, #504]	@ (8001580 <_Z9USER_loopv+0x2b4>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 80bd 	beq.w	800150c <_Z9USER_loopv+0x240>

			// statistically calculate the timings based on average of match timings
			RxPacket stat_packet;
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ff7e 	bl	8001298 <_ZN8RxPacketC1Ev>
			memset(stat_packet.word, 0, sizeof(stat_packet.word)); // clear to zero
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	3301      	adds	r3, #1
 80013a2:	2241      	movs	r2, #65	@ 0x41
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f00b f9fb 	bl	800c7a2 <memset>
			memcpy(stat_packet.word, rx.correl.last_match->word, strlen(rx.correl.last_match->word)); // copy match string
 80013ac:	4b7a      	ldr	r3, [pc, #488]	@ (8001598 <_Z9USER_loopv+0x2cc>)
 80013ae:	f8d3 3e08 	ldr.w	r3, [r3, #3592]	@ 0xe08
 80013b2:	1c5c      	adds	r4, r3, #1
 80013b4:	4b78      	ldr	r3, [pc, #480]	@ (8001598 <_Z9USER_loopv+0x2cc>)
 80013b6:	f8d3 3e08 	ldr.w	r3, [r3, #3592]	@ 0xe08
 80013ba:	3301      	adds	r3, #1
 80013bc:	4618      	mov	r0, r3
 80013be:	f7fe fecf 	bl	8000160 <strlen>
 80013c2:	4602      	mov	r2, r0
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	3301      	adds	r3, #1
 80013ca:	4621      	mov	r1, r4
 80013cc:	4618      	mov	r0, r3
 80013ce:	f00b fac0 	bl	800c952 <memcpy>

			uint8_t matches = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			for (uint8_t i = 0; i < rx.correl.index; i++) {
 80013d8:	2300      	movs	r3, #0
 80013da:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80013de:	e061      	b.n	80014a4 <_Z9USER_loopv+0x1d8>
				// ignore non-matches
				if (strcmp(stat_packet.word, rx.correl.received[i].word) != 0) {
 80013e0:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80013e4:	2254      	movs	r2, #84	@ 0x54
 80013e6:	fb02 f303 	mul.w	r3, r2, r3
 80013ea:	f603 2318 	addw	r3, r3, #2584	@ 0xa18
 80013ee:	4a6a      	ldr	r2, [pc, #424]	@ (8001598 <_Z9USER_loopv+0x2cc>)
 80013f0:	4413      	add	r3, r2
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	3301      	adds	r3, #1
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7fe fea5 	bl	800014c <strcmp>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d147      	bne.n	8001498 <_Z9USER_loopv+0x1cc>
					continue;
				}

				stat_packet.long_us = (stat_packet.long_us * matches + rx.correl.received[i].long_us) / (matches + 1);
 8001408:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800140a:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800140e:	fb03 f202 	mul.w	r2, r3, r2
 8001412:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001416:	4960      	ldr	r1, [pc, #384]	@ (8001598 <_Z9USER_loopv+0x2cc>)
 8001418:	2054      	movs	r0, #84	@ 0x54
 800141a:	fb00 f303 	mul.w	r3, r0, r3
 800141e:	440b      	add	r3, r1
 8001420:	f603 235c 	addw	r3, r3, #2652	@ 0xa5c
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4413      	add	r3, r2
 8001428:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800142c:	3201      	adds	r2, #1
 800142e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001432:	653b      	str	r3, [r7, #80]	@ 0x50
				stat_packet.short_us = (stat_packet.short_us * matches + rx.correl.received[i].short_us) / (matches + 1);
 8001434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001436:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800143a:	fb03 f202 	mul.w	r2, r3, r2
 800143e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001442:	4955      	ldr	r1, [pc, #340]	@ (8001598 <_Z9USER_loopv+0x2cc>)
 8001444:	2054      	movs	r0, #84	@ 0x54
 8001446:	fb00 f303 	mul.w	r3, r0, r3
 800144a:	440b      	add	r3, r1
 800144c:	f503 6326 	add.w	r3, r3, #2656	@ 0xa60
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4413      	add	r3, r2
 8001454:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8001458:	3201      	adds	r2, #1
 800145a:	fbb3 f3f2 	udiv	r3, r3, r2
 800145e:	657b      	str	r3, [r7, #84]	@ 0x54
				stat_packet.period_us = (stat_packet.period_us * matches + rx.correl.received[i].period_us) / (matches + 1);
 8001460:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001462:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8001466:	fb03 f202 	mul.w	r2, r3, r2
 800146a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800146e:	494a      	ldr	r1, [pc, #296]	@ (8001598 <_Z9USER_loopv+0x2cc>)
 8001470:	2054      	movs	r0, #84	@ 0x54
 8001472:	fb00 f303 	mul.w	r3, r0, r3
 8001476:	440b      	add	r3, r1
 8001478:	f603 2364 	addw	r3, r3, #2660	@ 0xa64
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4413      	add	r3, r2
 8001480:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8001484:	3201      	adds	r2, #1
 8001486:	fbb3 f3f2 	udiv	r3, r3, r2
 800148a:	65bb      	str	r3, [r7, #88]	@ 0x58

				// increment match counter for average calcs
				matches++;
 800148c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001490:	3301      	adds	r3, #1
 8001492:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001496:	e000      	b.n	800149a <_Z9USER_loopv+0x1ce>
					continue;
 8001498:	bf00      	nop
			for (uint8_t i = 0; i < rx.correl.index; i++) {
 800149a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800149e:	3301      	adds	r3, #1
 80014a0:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80014a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001598 <_Z9USER_loopv+0x2cc>)
 80014a6:	f893 3a10 	ldrb.w	r3, [r3, #2576]	@ 0xa10
 80014aa:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d396      	bcc.n	80013e0 <_Z9USER_loopv+0x114>
			}
			sprintf(usb_tx_buffer, "%" PRIu32 " word:%s len:%" PRIu16 " long_us:%" PRIu32 " short_us:%" PRIu32 " period_us:%" PRIu32 " logic:%u ignoresync:%u\r\n",
 80014b2:	4b33      	ldr	r3, [pc, #204]	@ (8001580 <_Z9USER_loopv+0x2b4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3480 	and.w	r4, r3, #65536	@ 0x10000
					status & (RX_WORD_AVAILABLE << 16), stat_packet.word, rx.correl.last_match->len,
 80014ba:	4b37      	ldr	r3, [pc, #220]	@ (8001598 <_Z9USER_loopv+0x2cc>)
 80014bc:	f8d3 3e08 	ldr.w	r3, [r3, #3592]	@ 0xe08
 80014c0:	781b      	ldrb	r3, [r3, #0]
			sprintf(usb_tx_buffer, "%" PRIu32 " word:%s len:%" PRIu16 " long_us:%" PRIu32 " short_us:%" PRIu32 " period_us:%" PRIu32 " logic:%u ignoresync:%u\r\n",
 80014c2:	461d      	mov	r5, r3
 80014c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80014c6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80014c8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
					stat_packet.long_us, stat_packet.short_us, stat_packet.period_us,
					(unsigned int) rx.correl.last_match->logic, (unsigned int) rx.ignore_sync_bit);
 80014ca:	4833      	ldr	r0, [pc, #204]	@ (8001598 <_Z9USER_loopv+0x2cc>)
 80014cc:	f8d0 0e08 	ldr.w	r0, [r0, #3592]	@ 0xe08
 80014d0:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
			sprintf(usb_tx_buffer, "%" PRIu32 " word:%s len:%" PRIu16 " long_us:%" PRIu32 " short_us:%" PRIu32 " period_us:%" PRIu32 " logic:%u ignoresync:%u\r\n",
 80014d4:	4606      	mov	r6, r0
					(unsigned int) rx.correl.last_match->logic, (unsigned int) rx.ignore_sync_bit);
 80014d6:	4830      	ldr	r0, [pc, #192]	@ (8001598 <_Z9USER_loopv+0x2cc>)
 80014d8:	7840      	ldrb	r0, [r0, #1]
			sprintf(usb_tx_buffer, "%" PRIu32 " word:%s len:%" PRIu16 " long_us:%" PRIu32 " short_us:%" PRIu32 " period_us:%" PRIu32 " logic:%u ignoresync:%u\r\n",
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	f107 000c 	add.w	r0, r7, #12
 80014e0:	3001      	adds	r0, #1
 80014e2:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80014e6:	f8cd c014 	str.w	ip, [sp, #20]
 80014ea:	9604      	str	r6, [sp, #16]
 80014ec:	9103      	str	r1, [sp, #12]
 80014ee:	9202      	str	r2, [sp, #8]
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	9500      	str	r5, [sp, #0]
 80014f4:	4603      	mov	r3, r0
 80014f6:	4622      	mov	r2, r4
 80014f8:	4928      	ldr	r1, [pc, #160]	@ (800159c <_Z9USER_loopv+0x2d0>)
 80014fa:	4822      	ldr	r0, [pc, #136]	@ (8001584 <_Z9USER_loopv+0x2b8>)
 80014fc:	f00b f8d2 	bl	800c6a4 <siprintf>
			status &= ~(RX_WORD_AVAILABLE << 16);
 8001500:	4b1f      	ldr	r3, [pc, #124]	@ (8001580 <_Z9USER_loopv+0x2b4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001508:	4a1d      	ldr	r2, [pc, #116]	@ (8001580 <_Z9USER_loopv+0x2b4>)
 800150a:	6013      	str	r3, [r2, #0]
		}
		pushUSB();
 800150c:	f7ff fa56 	bl	80009bc <_Z7pushUSBv>
	}

	// check when last USB activity was, and turn off activity LED after timeout
	uint32_t delta = (HAL_GetTick() >= last_USB_time) ? HAL_GetTick() - last_USB_time : HAL_GetTick() + (UINT32_MAX - last_USB_time);
 8001510:	f001 fc94 	bl	8002e3c <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	4b22      	ldr	r3, [pc, #136]	@ (80015a0 <_Z9USER_loopv+0x2d4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d306      	bcc.n	800152c <_Z9USER_loopv+0x260>
 800151e:	f001 fc8d 	bl	8002e3c <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	4b1e      	ldr	r3, [pc, #120]	@ (80015a0 <_Z9USER_loopv+0x2d4>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	e006      	b.n	800153a <_Z9USER_loopv+0x26e>
 800152c:	f001 fc86 	bl	8002e3c <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	4b1b      	ldr	r3, [pc, #108]	@ (80015a0 <_Z9USER_loopv+0x2d4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	3b01      	subs	r3, #1
 800153a:	663b      	str	r3, [r7, #96]	@ 0x60
	if (delta > timeout_ms && HAL_GPIO_ReadPin(USB_ACT_GPIO_Port, USB_ACT_Pin) == GPIO_PIN_SET) {
 800153c:	4b19      	ldr	r3, [pc, #100]	@ (80015a4 <_Z9USER_loopv+0x2d8>)
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001544:	4293      	cmp	r3, r2
 8001546:	d909      	bls.n	800155c <_Z9USER_loopv+0x290>
 8001548:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800154c:	4816      	ldr	r0, [pc, #88]	@ (80015a8 <_Z9USER_loopv+0x2dc>)
 800154e:	f002 f99b 	bl	8003888 <HAL_GPIO_ReadPin>
 8001552:	4603      	mov	r3, r0
 8001554:	2b01      	cmp	r3, #1
 8001556:	d101      	bne.n	800155c <_Z9USER_loopv+0x290>
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <_Z9USER_loopv+0x292>
 800155c:	2300      	movs	r3, #0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d005      	beq.n	800156e <_Z9USER_loopv+0x2a2>
		HAL_GPIO_WritePin(USB_ACT_GPIO_Port, USB_ACT_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001568:	480f      	ldr	r0, [pc, #60]	@ (80015a8 <_Z9USER_loopv+0x2dc>)
 800156a:	f002 f9a4 	bl	80038b6 <HAL_GPIO_WritePin>
	}

	return 0;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	376c      	adds	r7, #108	@ 0x6c
 8001574:	46bd      	mov	sp, r7
 8001576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001578:	20001e60 	.word	0x20001e60
 800157c:	20001d0c 	.word	0x20001d0c
 8001580:	20000610 	.word	0x20000610
 8001584:	200001fc 	.word	0x200001fc
 8001588:	20001d1d 	.word	0x20001d1d
 800158c:	0800da00 	.word	0x0800da00
 8001590:	20001d5d 	.word	0x20001d5d
 8001594:	20001e1d 	.word	0x20001e1d
 8001598:	20000ef8 	.word	0x20000ef8
 800159c:	0800da0c 	.word	0x0800da0c
 80015a0:	2000060c 	.word	0x2000060c
 80015a4:	20000000 	.word	0x20000000
 80015a8:	40011000 	.word	0x40011000

080015ac <_Z10USER_errorv>:

void USER_error(void) {
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
	// blink LED based on error code 1's and 0's
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <_Z13USER_shutdownv>:

void USER_shutdown(void) {
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ca:	f001 fbdf 	bl	8002d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ce:	f000 f82d 	bl	800162c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d2:	f000 fa31 	bl	8001a38 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80015d6:	f000 fa11 	bl	80019fc <_ZL11MX_DMA_Initv>
  MX_TIM1_Init();
 80015da:	f000 f891 	bl	8001700 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 80015de:	f000 f94d 	bl	800187c <_ZL12MX_TIM2_Initv>
  MX_USB_DEVICE_Init();
 80015e2:	f00a f8e1 	bl	800b7a8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  int setup = USER_setup();
 80015e6:	f7ff fe2f 	bl	8001248 <_Z10USER_setupv>
 80015ea:	6078      	str	r0, [r7, #4]
  if(setup < 0) {
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	da10      	bge.n	8001614 <main+0x50>
    USER_error();
 80015f2:	f7ff ffdb 	bl	80015ac <_Z10USER_errorv>
    return setup;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	e014      	b.n	8001624 <main+0x60>
  /* USER CODE BEGIN WHILE */
  while (1 && setup == 0) {
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
	int loop = USER_loop();
 80015fa:	f7ff fe67 	bl	80012cc <_Z9USER_loopv>
 80015fe:	6038      	str	r0, [r7, #0]
	if (loop > 0) {
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	dc0a      	bgt.n	800161c <main+0x58>
	  break;
	}
	else if (loop < 0) {
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	da03      	bge.n	8001614 <main+0x50>
	  USER_error();
 800160c:	f7ff ffce 	bl	80015ac <_Z10USER_errorv>
	  return loop;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	e007      	b.n	8001624 <main+0x60>
  while (1 && setup == 0) {
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0ef      	beq.n	80015fa <main+0x36>
 800161a:	e000      	b.n	800161e <main+0x5a>
	  break;
 800161c:	bf00      	nop
	}
  }
  USER_shutdown();
 800161e:	f7ff ffcb 	bl	80015b8 <_Z13USER_shutdownv>
  /* USER CODE END 3 */
}
 8001622:	2300      	movs	r3, #0
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b094      	sub	sp, #80	@ 0x50
 8001630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001632:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001636:	2228      	movs	r2, #40	@ 0x28
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f00b f8b1 	bl	800c7a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800165c:	2301      	movs	r3, #1
 800165e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001660:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001664:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800166a:	2301      	movs	r3, #1
 800166c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166e:	2302      	movs	r3, #2
 8001670:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001672:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001676:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001678:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800167c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001682:	4618      	mov	r0, r3
 8001684:	f003 fe90 	bl	80053a8 <HAL_RCC_OscConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	bf14      	ite	ne
 800168e:	2301      	movne	r3, #1
 8001690:	2300      	moveq	r3, #0
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001698:	f000 fa54 	bl	8001b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800169c:	230f      	movs	r3, #15
 800169e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a0:	2302      	movs	r3, #2
 80016a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016ac:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	2102      	movs	r1, #2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f004 f8f7 	bl	80058ac <HAL_RCC_ClockConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	bf14      	ite	ne
 80016c4:	2301      	movne	r3, #1
 80016c6:	2300      	moveq	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80016ce:	f000 fa39 	bl	8001b44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80016d2:	2310      	movs	r3, #16
 80016d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	4618      	mov	r0, r3
 80016de:	f004 fa41 	bl	8005b64 <HAL_RCCEx_PeriphCLKConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bf14      	ite	ne
 80016e8:	2301      	movne	r3, #1
 80016ea:	2300      	moveq	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 80016f2:	f000 fa27 	bl	8001b44 <Error_Handler>
  }
}
 80016f6:	bf00      	nop
 80016f8:	3750      	adds	r7, #80	@ 0x50
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b096      	sub	sp, #88	@ 0x58
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001706:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001714:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800171e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]
 800172e:	615a      	str	r2, [r3, #20]
 8001730:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	2220      	movs	r2, #32
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f00b f832 	bl	800c7a2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800173e:	4b4d      	ldr	r3, [pc, #308]	@ (8001874 <_ZL12MX_TIM1_Initv+0x174>)
 8001740:	4a4d      	ldr	r2, [pc, #308]	@ (8001878 <_ZL12MX_TIM1_Initv+0x178>)
 8001742:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001744:	4b4b      	ldr	r3, [pc, #300]	@ (8001874 <_ZL12MX_TIM1_Initv+0x174>)
 8001746:	2247      	movs	r2, #71	@ 0x47
 8001748:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174a:	4b4a      	ldr	r3, [pc, #296]	@ (8001874 <_ZL12MX_TIM1_Initv+0x174>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001750:	4b48      	ldr	r3, [pc, #288]	@ (8001874 <_ZL12MX_TIM1_Initv+0x174>)
 8001752:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001756:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001758:	4b46      	ldr	r3, [pc, #280]	@ (8001874 <_ZL12MX_TIM1_Initv+0x174>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800175e:	4b45      	ldr	r3, [pc, #276]	@ (8001874 <_ZL12MX_TIM1_Initv+0x174>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001764:	4b43      	ldr	r3, [pc, #268]	@ (8001874 <_ZL12MX_TIM1_Initv+0x174>)
 8001766:	2280      	movs	r2, #128	@ 0x80
 8001768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800176a:	4842      	ldr	r0, [pc, #264]	@ (8001874 <_ZL12MX_TIM1_Initv+0x174>)
 800176c:	f004 fab0 	bl	8005cd0 <HAL_TIM_Base_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	bf14      	ite	ne
 8001776:	2301      	movne	r3, #1
 8001778:	2300      	moveq	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 8001780:	f000 f9e0 	bl	8001b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001784:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001788:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800178a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800178e:	4619      	mov	r1, r3
 8001790:	4838      	ldr	r0, [pc, #224]	@ (8001874 <_ZL12MX_TIM1_Initv+0x174>)
 8001792:	f005 f9b1 	bl	8006af8 <HAL_TIM_ConfigClockSource>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	bf14      	ite	ne
 800179c:	2301      	movne	r3, #1
 800179e:	2300      	moveq	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 80017a6:	f000 f9cd 	bl	8001b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017aa:	4832      	ldr	r0, [pc, #200]	@ (8001874 <_ZL12MX_TIM1_Initv+0x174>)
 80017ac:	f004 fb32 	bl	8005e14 <HAL_TIM_PWM_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	bf14      	ite	ne
 80017b6:	2301      	movne	r3, #1
 80017b8:	2300      	moveq	r3, #0
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 80017c0:	f000 f9c0 	bl	8001b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c4:	2300      	movs	r3, #0
 80017c6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017cc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017d0:	4619      	mov	r1, r3
 80017d2:	4828      	ldr	r0, [pc, #160]	@ (8001874 <_ZL12MX_TIM1_Initv+0x174>)
 80017d4:	f006 f824 	bl	8007820 <HAL_TIMEx_MasterConfigSynchronization>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	bf14      	ite	ne
 80017de:	2301      	movne	r3, #1
 80017e0:	2300      	moveq	r3, #0
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 80017e8:	f000 f9ac 	bl	8001b44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ec:	2360      	movs	r3, #96	@ 0x60
 80017ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017f8:	2300      	movs	r3, #0
 80017fa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001804:	2300      	movs	r3, #0
 8001806:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001808:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800180c:	2200      	movs	r2, #0
 800180e:	4619      	mov	r1, r3
 8001810:	4818      	ldr	r0, [pc, #96]	@ (8001874 <_ZL12MX_TIM1_Initv+0x174>)
 8001812:	f005 f8af 	bl	8006974 <HAL_TIM_PWM_ConfigChannel>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	bf14      	ite	ne
 800181c:	2301      	movne	r3, #1
 800181e:	2300      	moveq	r3, #0
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <_ZL12MX_TIM1_Initv+0x12a>
  {
    Error_Handler();
 8001826:	f000 f98d 	bl	8001b44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800183e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001842:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	4619      	mov	r1, r3
 800184c:	4809      	ldr	r0, [pc, #36]	@ (8001874 <_ZL12MX_TIM1_Initv+0x174>)
 800184e:	f006 f845 	bl	80078dc <HAL_TIMEx_ConfigBreakDeadTime>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	bf14      	ite	ne
 8001858:	2301      	movne	r3, #1
 800185a:	2300      	moveq	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <_ZL12MX_TIM1_Initv+0x166>
  {
    Error_Handler();
 8001862:	f000 f96f 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001866:	4803      	ldr	r0, [pc, #12]	@ (8001874 <_ZL12MX_TIM1_Initv+0x174>)
 8001868:	f001 f91e 	bl	8002aa8 <HAL_TIM_MspPostInit>

}
 800186c:	bf00      	nop
 800186e:	3758      	adds	r7, #88	@ 0x58
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000614 	.word	0x20000614
 8001878:	40012c00 	.word	0x40012c00

0800187c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b090      	sub	sp, #64	@ 0x40
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001882:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018a0:	f107 030c 	add.w	r3, r7, #12
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018b6:	4b50      	ldr	r3, [pc, #320]	@ (80019f8 <_ZL12MX_TIM2_Initv+0x17c>)
 80018b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80018be:	4b4e      	ldr	r3, [pc, #312]	@ (80019f8 <_ZL12MX_TIM2_Initv+0x17c>)
 80018c0:	2247      	movs	r2, #71	@ 0x47
 80018c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c4:	4b4c      	ldr	r3, [pc, #304]	@ (80019f8 <_ZL12MX_TIM2_Initv+0x17c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80018ca:	4b4b      	ldr	r3, [pc, #300]	@ (80019f8 <_ZL12MX_TIM2_Initv+0x17c>)
 80018cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d2:	4b49      	ldr	r3, [pc, #292]	@ (80019f8 <_ZL12MX_TIM2_Initv+0x17c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d8:	4b47      	ldr	r3, [pc, #284]	@ (80019f8 <_ZL12MX_TIM2_Initv+0x17c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018de:	4846      	ldr	r0, [pc, #280]	@ (80019f8 <_ZL12MX_TIM2_Initv+0x17c>)
 80018e0:	f004 f9f6 	bl	8005cd0 <HAL_TIM_Base_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf14      	ite	ne
 80018ea:	2301      	movne	r3, #1
 80018ec:	2300      	moveq	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <_ZL12MX_TIM2_Initv+0x7c>
  {
    Error_Handler();
 80018f4:	f000 f926 	bl	8001b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018fc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001902:	4619      	mov	r1, r3
 8001904:	483c      	ldr	r0, [pc, #240]	@ (80019f8 <_ZL12MX_TIM2_Initv+0x17c>)
 8001906:	f005 f8f7 	bl	8006af8 <HAL_TIM_ConfigClockSource>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	bf14      	ite	ne
 8001910:	2301      	movne	r3, #1
 8001912:	2300      	moveq	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <_ZL12MX_TIM2_Initv+0xa2>
  {
    Error_Handler();
 800191a:	f000 f913 	bl	8001b44 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800191e:	4836      	ldr	r0, [pc, #216]	@ (80019f8 <_ZL12MX_TIM2_Initv+0x17c>)
 8001920:	f004 fd38 	bl	8006394 <HAL_TIM_IC_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	bf14      	ite	ne
 800192a:	2301      	movne	r3, #1
 800192c:	2300      	moveq	r3, #0
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 8001934:	f000 f906 	bl	8001b44 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001938:	2304      	movs	r3, #4
 800193a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800193c:	2350      	movs	r3, #80	@ 0x50
 800193e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001944:	2300      	movs	r3, #0
 8001946:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800194c:	f107 031c 	add.w	r3, r7, #28
 8001950:	4619      	mov	r1, r3
 8001952:	4829      	ldr	r0, [pc, #164]	@ (80019f8 <_ZL12MX_TIM2_Initv+0x17c>)
 8001954:	f005 f997 	bl	8006c86 <HAL_TIM_SlaveConfigSynchro>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	bf14      	ite	ne
 800195e:	2301      	movne	r3, #1
 8001960:	2300      	moveq	r3, #0
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <_ZL12MX_TIM2_Initv+0xf0>
  {
    Error_Handler();
 8001968:	f000 f8ec 	bl	8001b44 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001970:	2301      	movs	r3, #1
 8001972:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800197c:	f107 030c 	add.w	r3, r7, #12
 8001980:	2200      	movs	r2, #0
 8001982:	4619      	mov	r1, r3
 8001984:	481c      	ldr	r0, [pc, #112]	@ (80019f8 <_ZL12MX_TIM2_Initv+0x17c>)
 8001986:	f004 ff59 	bl	800683c <HAL_TIM_IC_ConfigChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	bf14      	ite	ne
 8001990:	2301      	movne	r3, #1
 8001992:	2300      	moveq	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <_ZL12MX_TIM2_Initv+0x122>
  {
    Error_Handler();
 800199a:	f000 f8d3 	bl	8001b44 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800199e:	2302      	movs	r3, #2
 80019a0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80019a2:	2302      	movs	r3, #2
 80019a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	2204      	movs	r2, #4
 80019ac:	4619      	mov	r1, r3
 80019ae:	4812      	ldr	r0, [pc, #72]	@ (80019f8 <_ZL12MX_TIM2_Initv+0x17c>)
 80019b0:	f004 ff44 	bl	800683c <HAL_TIM_IC_ConfigChannel>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	bf14      	ite	ne
 80019ba:	2301      	movne	r3, #1
 80019bc:	2300      	moveq	r3, #0
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <_ZL12MX_TIM2_Initv+0x14c>
  {
    Error_Handler();
 80019c4:	f000 f8be 	bl	8001b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c8:	2300      	movs	r3, #0
 80019ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	4619      	mov	r1, r3
 80019d4:	4808      	ldr	r0, [pc, #32]	@ (80019f8 <_ZL12MX_TIM2_Initv+0x17c>)
 80019d6:	f005 ff23 	bl	8007820 <HAL_TIMEx_MasterConfigSynchronization>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	bf14      	ite	ne
 80019e0:	2301      	movne	r3, #1
 80019e2:	2300      	moveq	r3, #0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <_ZL12MX_TIM2_Initv+0x172>
  {
    Error_Handler();
 80019ea:	f000 f8ab 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019ee:	bf00      	nop
 80019f0:	3740      	adds	r7, #64	@ 0x40
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2000065c 	.word	0x2000065c

080019fc <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a02:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <_ZL11MX_DMA_Initv+0x38>)
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	4a0b      	ldr	r2, [pc, #44]	@ (8001a34 <_ZL11MX_DMA_Initv+0x38>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6153      	str	r3, [r2, #20]
 8001a0e:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <_ZL11MX_DMA_Initv+0x38>)
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	200c      	movs	r0, #12
 8001a20:	f001 fb11 	bl	8003046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a24:	200c      	movs	r0, #12
 8001a26:	f001 fb2a 	bl	800307e <HAL_NVIC_EnableIRQ>

}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000

08001a38 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3e:	f107 0310 	add.w	r3, r7, #16
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4c:	4b39      	ldr	r3, [pc, #228]	@ (8001b34 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a38      	ldr	r2, [pc, #224]	@ (8001b34 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a52:	f043 0310 	orr.w	r3, r3, #16
 8001a56:	6193      	str	r3, [r2, #24]
 8001a58:	4b36      	ldr	r3, [pc, #216]	@ (8001b34 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f003 0310 	and.w	r3, r3, #16
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a64:	4b33      	ldr	r3, [pc, #204]	@ (8001b34 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	4a32      	ldr	r2, [pc, #200]	@ (8001b34 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a6a:	f043 0320 	orr.w	r3, r3, #32
 8001a6e:	6193      	str	r3, [r2, #24]
 8001a70:	4b30      	ldr	r3, [pc, #192]	@ (8001b34 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0320 	and.w	r3, r3, #32
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b34 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	4a2c      	ldr	r2, [pc, #176]	@ (8001b34 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a82:	f043 0304 	orr.w	r3, r3, #4
 8001a86:	6193      	str	r3, [r2, #24]
 8001a88:	4b2a      	ldr	r3, [pc, #168]	@ (8001b34 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a94:	4b27      	ldr	r3, [pc, #156]	@ (8001b34 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	4a26      	ldr	r2, [pc, #152]	@ (8001b34 <_ZL12MX_GPIO_Initv+0xfc>)
 8001a9a:	f043 0308 	orr.w	r3, r3, #8
 8001a9e:	6193      	str	r3, [r2, #24]
 8001aa0:	4b24      	ldr	r3, [pc, #144]	@ (8001b34 <_ZL12MX_GPIO_Initv+0xfc>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	603b      	str	r3, [r7, #0]
 8001aaa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_ACT_GPIO_Port, USB_ACT_Pin, GPIO_PIN_RESET);
 8001aac:	2200      	movs	r2, #0
 8001aae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ab2:	4821      	ldr	r0, [pc, #132]	@ (8001b38 <_ZL12MX_GPIO_Initv+0x100>)
 8001ab4:	f001 feff 	bl	80038b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RX_EN_Pin|TX_ACT_Pin, GPIO_PIN_RESET);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	21c0      	movs	r1, #192	@ 0xc0
 8001abc:	481f      	ldr	r0, [pc, #124]	@ (8001b3c <_ZL12MX_GPIO_Initv+0x104>)
 8001abe:	f001 fefa 	bl	80038b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USB_ACT_Pin */
  GPIO_InitStruct.Pin = USB_ACT_Pin;
 8001ac2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ac6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_ACT_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	f107 0310 	add.w	r3, r7, #16
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4817      	ldr	r0, [pc, #92]	@ (8001b38 <_ZL12MX_GPIO_Initv+0x100>)
 8001adc:	f001 fd50 	bl	8003580 <HAL_GPIO_Init>

  /*Configure GPIO pins : RX_EN_Pin TX_ACT_Pin */
  GPIO_InitStruct.Pin = RX_EN_Pin|TX_ACT_Pin;
 8001ae0:	23c0      	movs	r3, #192	@ 0xc0
 8001ae2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2302      	movs	r3, #2
 8001aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	4619      	mov	r1, r3
 8001af6:	4811      	ldr	r0, [pc, #68]	@ (8001b3c <_ZL12MX_GPIO_Initv+0x104>)
 8001af8:	f001 fd42 	bl	8003580 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /*Configure GPIO pin : USB D+ to trigger re-enumerated by pre-connected host */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001afc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b02:	2301      	movs	r3, #1
 8001b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0e:	f107 0310 	add.w	r3, r7, #16
 8001b12:	4619      	mov	r1, r3
 8001b14:	480a      	ldr	r0, [pc, #40]	@ (8001b40 <_ZL12MX_GPIO_Initv+0x108>)
 8001b16:	f001 fd33 	bl	8003580 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b20:	4807      	ldr	r0, [pc, #28]	@ (8001b40 <_ZL12MX_GPIO_Initv+0x108>)
 8001b22:	f001 fec8 	bl	80038b6 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001b26:	2005      	movs	r0, #5
 8001b28:	f001 f992 	bl	8002e50 <HAL_Delay>

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b2c:	bf00      	nop
 8001b2e:	3720      	adds	r7, #32
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40011000 	.word	0x40011000
 8001b3c:	40010c00 	.word	0x40010c00
 8001b40:	40010800 	.word	0x40010800

08001b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b48:	b672      	cpsid	i
}
 8001b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <Error_Handler+0x8>

08001b50 <_Z4modePmt>:
}

/*
 * Find the mode of an array of unsigned integers
 */
uint32_t mode(uint32_t arr[], uint16_t size) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	807b      	strh	r3, [r7, #2]
	int max_count = 0, i, j;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
	uint32_t max_value = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	613b      	str	r3, [r7, #16]

	// sort the array
	qsort(arr, size, sizeof(arr[0]), compare);
 8001b64:	8879      	ldrh	r1, [r7, #2]
 8001b66:	4b20      	ldr	r3, [pc, #128]	@ (8001be8 <_Z4modePmt+0x98>)
 8001b68:	2204      	movs	r2, #4
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f00a fb8d 	bl	800c28a <qsort>

	//Iterate through sorted array to count occurrences of values
	for (i = 0; i < (int) size; i++) {
 8001b70:	2300      	movs	r3, #0
 8001b72:	61bb      	str	r3, [r7, #24]
 8001b74:	e02f      	b.n	8001bd6 <_Z4modePmt+0x86>
		int cnt = 1;
 8001b76:	2301      	movs	r3, #1
 8001b78:	60fb      	str	r3, [r7, #12]

		// count occurrences of current element
		for (j = i + 1; j < (int) size; j++) {
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	e011      	b.n	8001ba6 <_Z4modePmt+0x56>
			if (arr[j] == arr[i]) {
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	440b      	add	r3, r1
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d10a      	bne.n	8001bb0 <_Z4modePmt+0x60>
				cnt++;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
		for (j = i + 1; j < (int) size; j++) {
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	887b      	ldrh	r3, [r7, #2]
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	dbe9      	blt.n	8001b82 <_Z4modePmt+0x32>
 8001bae:	e000      	b.n	8001bb2 <_Z4modePmt+0x62>
			} else {
				break;
 8001bb0:	bf00      	nop
			}
		}

		// Update max count and value if current element's count is greater
		if (cnt > max_count) {
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	dd07      	ble.n	8001bca <_Z4modePmt+0x7a>
			max_count = cnt;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	61fb      	str	r3, [r7, #28]
			max_value = arr[i];
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	613b      	str	r3, [r7, #16]
		}

		// move to next distinct element
		i = j - 1;
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < (int) size; i++) {
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	61bb      	str	r3, [r7, #24]
 8001bd6:	887b      	ldrh	r3, [r7, #2]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	dbcb      	blt.n	8001b76 <_Z4modePmt+0x26>
	}

	return max_value;
 8001bde:	693b      	ldr	r3, [r7, #16]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	08001bed 	.word	0x08001bed

08001bec <_Z7comparePKvS0_>:

/*
 * Comparator function for qsort
 */
int compare(const void* a, const void* b) {
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
	return (*(int*)a - *(int*)b);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	1ad3      	subs	r3, r2, r3
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
	...

08001c0c <_ZN14RxCorrelBufferC1Ev>:
	RxPacket* last_match = 0;
	uint32_t timeout_us = 100000; // microseconds after which the correl buffer gets cleared
	uint8_t match_thresh = 3; // min number of repeated messages to be considered valid.
	uint8_t min_word_len = 8; // min chars for a code to be valid
	uint8_t max_word_len = RX_MAX_BITS;
} RxCorrelBuffer;
 8001c0c:	b5b0      	push	{r4, r5, r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3308      	adds	r3, #8
 8001c24:	240b      	movs	r4, #11
 8001c26:	461d      	mov	r5, r3
 8001c28:	e004      	b.n	8001c34 <_ZN14RxCorrelBufferC1Ev+0x28>
 8001c2a:	4628      	mov	r0, r5
 8001c2c:	f7ff fb34 	bl	8001298 <_ZN8RxPacketC1Ev>
 8001c30:	3c01      	subs	r4, #1
 8001c32:	3554      	adds	r5, #84	@ 0x54
 8001c34:	2c00      	cmp	r4, #0
 8001c36:	daf8      	bge.n	8001c2a <_ZN14RxCorrelBufferC1Ev+0x1e>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a0a      	ldr	r2, [pc, #40]	@ (8001c6c <_ZN14RxCorrelBufferC1Ev+0x60>)
 8001c44:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	f883 2400 	strb.w	r2, [r3, #1024]	@ 0x400
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2208      	movs	r2, #8
 8001c54:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2240      	movs	r2, #64	@ 0x40
 8001c5c:	f883 2402 	strb.w	r2, [r3, #1026]	@ 0x402
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bdb0      	pop	{r4, r5, r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	000186a0 	.word	0x000186a0

08001c70 <_ZN8ReceiverC1Ev>:
	uint32_t bit_max_period = 5000; // set max bit period, in microseconds
	uint32_t measured_periods[RX_BUFFER_SAMPLES]; // us, per timer prescaler
	uint32_t measured_widths[RX_BUFFER_SAMPLES]; // us, per timer prescaler
	// correlation buffer struct (for word repetition detect)
	RxCorrelBuffer correl;
} Receiver;
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	705a      	strb	r2, [r3, #1]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2202      	movs	r2, #2
 8001c88:	709a      	strb	r2, [r3, #2]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	809a      	strh	r2, [r3, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	80da      	strh	r2, [r3, #6]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	811a      	strh	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ca2:	60da      	str	r2, [r3, #12]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f503 6321 	add.w	r3, r3, #2576	@ 0xa10
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ffae 	bl	8001c0c <_ZN14RxCorrelBufferC1Ev>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <_Z6rxInitP8Receiver>:
Receiver rx;

/*
 * Initialize timers and parameters needed for OOK Rx operations
 */
void rxInit(Receiver* settings) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	// set up Input capture monitoring of Receiver
	overflow_count = 0;
 8001cc4:	4b08      	ldr	r3, [pc, #32]	@ (8001ce8 <_Z6rxInitP8Receiver+0x2c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	801a      	strh	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(&htim2);
 8001cca:	4808      	ldr	r0, [pc, #32]	@ (8001cec <_Z6rxInitP8Receiver+0x30>)
 8001ccc:	f004 f850 	bl	8005d70 <HAL_TIM_Base_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // rising edge channel
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4806      	ldr	r0, [pc, #24]	@ (8001cec <_Z6rxInitP8Receiver+0x30>)
 8001cd4:	f004 fbb6 	bl	8006444 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2); // falling edge channel
 8001cd8:	2104      	movs	r1, #4
 8001cda:	4804      	ldr	r0, [pc, #16]	@ (8001cec <_Z6rxInitP8Receiver+0x30>)
 8001cdc:	f004 fbb2 	bl	8006444 <HAL_TIM_IC_Start_IT>
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	200006e8 	.word	0x200006e8
 8001cec:	2000065c 	.word	0x2000065c

08001cf0 <_Z11isRxEnabledv>:

bool isRxEnabled() {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(RX_EN_GPIO_Port, RX_EN_Pin) == (RX_RADIO_EN_POLARITY ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001cf4:	2140      	movs	r1, #64	@ 0x40
 8001cf6:	4805      	ldr	r0, [pc, #20]	@ (8001d0c <_Z11isRxEnabledv+0x1c>)
 8001cf8:	f001 fdc6 	bl	8003888 <HAL_GPIO_ReadPin>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	bf0c      	ite	eq
 8001d02:	2301      	moveq	r3, #1
 8001d04:	2300      	movne	r3, #0
 8001d06:	b2db      	uxtb	r3, r3
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40010c00 	.word	0x40010c00

08001d10 <_Z8enableRxv>:

/*
 * Enable receiver radio
 */
void enableRx() {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RX_EN_GPIO_Port, RX_EN_Pin, RX_RADIO_EN_POLARITY ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001d14:	2201      	movs	r2, #1
 8001d16:	2140      	movs	r1, #64	@ 0x40
 8001d18:	4802      	ldr	r0, [pc, #8]	@ (8001d24 <_Z8enableRxv+0x14>)
 8001d1a:	f001 fdcc 	bl	80038b6 <HAL_GPIO_WritePin>
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40010c00 	.word	0x40010c00

08001d28 <_Z9disableRxv>:

/*
 * Disable receiver radio
 */
void disableRx() {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RX_EN_GPIO_Port, RX_EN_Pin, RX_RADIO_EN_POLARITY ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2140      	movs	r1, #64	@ 0x40
 8001d30:	4802      	ldr	r0, [pc, #8]	@ (8001d3c <_Z9disableRxv+0x14>)
 8001d32:	f001 fdc0 	bl	80038b6 <HAL_GPIO_WritePin>
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40010c00 	.word	0x40010c00

08001d40 <_Z13clearRxPacketP8RxPacket>:
////////////////////////////////////////////////////////////////////////

/*
 * Clear a receiver buffer to its zero state
 */
void clearRxPacket(RxPacket* buf) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	memset(buf->word, 0, sizeof(buf->word));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	2241      	movs	r2, #65	@ 0x41
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f00a fd26 	bl	800c7a2 <memset>
	buf->len = 0;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
	buf->long_us = 0;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	645a      	str	r2, [r3, #68]	@ 0x44
	buf->short_us = 0;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	649a      	str	r2, [r3, #72]	@ 0x48
	buf->period_us = 0;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	64da      	str	r2, [r3, #76]	@ 0x4c
	buf->logic = false;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <_Z12receivedWordP14RxCorrelBufferP8RxPacket>:

/*
 * Callback to fire when a word is ready. Data is in buffer, length of
 * word is 'count'
 */
void receivedWord(RxCorrelBuffer* correl, RxPacket* data) {
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b089      	sub	sp, #36	@ 0x24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
	// ignore the word if it's outside the bounds of min and max word lengths
	if (data->len < correl->min_word_len || data->len > correl->max_word_len + (rx.ignore_sync_bit ? 0 : 1)) return;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	781a      	ldrb	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3401 	ldrb.w	r3, [r3, #1025]	@ 0x401
 8001d94:	429a      	cmp	r2, r3
 8001d96:	f0c0 8162 	bcc.w	800205e <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0x2de>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3402 	ldrb.w	r3, [r3, #1026]	@ 0x402
 8001da6:	4619      	mov	r1, r3
 8001da8:	4baf      	ldr	r3, [pc, #700]	@ (8002068 <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0x2e8>)
 8001daa:	785b      	ldrb	r3, [r3, #1]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0x34>
 8001db0:	2300      	movs	r3, #0
 8001db2:	e000      	b.n	8001db6 <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0x36>
 8001db4:	2301      	movs	r3, #1
 8001db6:	440b      	add	r3, r1
 8001db8:	429a      	cmp	r2, r3
 8001dba:	f300 8150 	bgt.w	800205e <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0x2de>
	data->long_us = mode(measLong, data->len);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	48a9      	ldr	r0, [pc, #676]	@ (800206c <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0x2ec>)
 8001dc6:	f7ff fec3 	bl	8001b50 <_Z4modePmt>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	645a      	str	r2, [r3, #68]	@ 0x44
	data->short_us = mode(measShort, data->len);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	48a6      	ldr	r0, [pc, #664]	@ (8002070 <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0x2f0>)
 8001dd8:	f7ff feba 	bl	8001b50 <_Z4modePmt>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	649a      	str	r2, [r3, #72]	@ 0x48
	data->period_us = mode(measPeriod, data->len);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	4619      	mov	r1, r3
 8001de8:	48a2      	ldr	r0, [pc, #648]	@ (8002074 <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0x2f4>)
 8001dea:	f7ff feb1 	bl	8001b50 <_Z4modePmt>
 8001dee:	4602      	mov	r2, r0
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	64da      	str	r2, [r3, #76]	@ 0x4c

	// if the correlation cache has timed out, clear it before adding
	uint32_t delta = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61fb      	str	r3, [r7, #28]
	if (HAL_GetTick() < correl->last_word_time_ms)
 8001df8:	f001 f820 	bl	8002e3c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	bf34      	ite	cc
 8001e06:	2301      	movcc	r3, #1
 8001e08:	2300      	movcs	r3, #0
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d008      	beq.n	8001e22 <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0xa2>
		delta = (UINT32_MAX - correl->last_word_time_ms) + HAL_GetTick();
 8001e10:	f001 f814 	bl	8002e3c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	61fb      	str	r3, [r7, #28]
 8001e20:	e006      	b.n	8001e30 <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0xb0>
	else
		delta = HAL_GetTick() - correl->last_word_time_ms;
 8001e22:	f001 f80b 	bl	8002e3c <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	61fb      	str	r3, [r7, #28]

	if (delta * 1000 >= correl->timeout_us) {
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e36:	fb03 f202 	mul.w	r2, r3, r2
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d31b      	bcc.n	8001e7c <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0xfc>
		for (uint8_t i = 0; i <= correl->index; i++) {
 8001e44:	2300      	movs	r3, #0
 8001e46:	76fb      	strb	r3, [r7, #27]
 8001e48:	e00c      	b.n	8001e64 <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0xe4>
			clearRxPacket(&correl->received[i]);
 8001e4a:	7efb      	ldrb	r3, [r7, #27]
 8001e4c:	2254      	movs	r2, #84	@ 0x54
 8001e4e:	fb02 f303 	mul.w	r3, r2, r3
 8001e52:	3308      	adds	r3, #8
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	4413      	add	r3, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff71 	bl	8001d40 <_Z13clearRxPacketP8RxPacket>
		for (uint8_t i = 0; i <= correl->index; i++) {
 8001e5e:	7efb      	ldrb	r3, [r7, #27]
 8001e60:	3301      	adds	r3, #1
 8001e62:	76fb      	strb	r3, [r7, #27]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	7efa      	ldrb	r2, [r7, #27]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d9ed      	bls.n	8001e4a <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0xca>
		}
		correl->last_match = 0;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
		correl->index = 0;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
	}

	// inject packet to correlation buffer and log time
	correl->received[correl->index].len = data->len;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	7819      	ldrb	r1, [r3, #0]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	2354      	movs	r3, #84	@ 0x54
 8001e8a:	fb00 f303 	mul.w	r3, r0, r3
 8001e8e:	4413      	add	r3, r2
 8001e90:	3308      	adds	r3, #8
 8001e92:	460a      	mov	r2, r1
 8001e94:	701a      	strb	r2, [r3, #0]
	correl->received[correl->index].long_us = data->long_us;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	2354      	movs	r3, #84	@ 0x54
 8001ea4:	fb00 f303 	mul.w	r3, r0, r3
 8001ea8:	440b      	add	r3, r1
 8001eaa:	334c      	adds	r3, #76	@ 0x4c
 8001eac:	601a      	str	r2, [r3, #0]
	correl->received[correl->index].short_us = data->short_us;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	2354      	movs	r3, #84	@ 0x54
 8001ebc:	fb00 f303 	mul.w	r3, r0, r3
 8001ec0:	440b      	add	r3, r1
 8001ec2:	3350      	adds	r3, #80	@ 0x50
 8001ec4:	601a      	str	r2, [r3, #0]
	correl->received[correl->index].period_us = data->period_us;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	2354      	movs	r3, #84	@ 0x54
 8001ed4:	fb00 f303 	mul.w	r3, r0, r3
 8001ed8:	440b      	add	r3, r1
 8001eda:	3354      	adds	r3, #84	@ 0x54
 8001edc:	601a      	str	r2, [r3, #0]
	correl->received[correl->index].logic = data->logic;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	f893 1050 	ldrb.w	r1, [r3, #80]	@ 0x50
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	2354      	movs	r3, #84	@ 0x54
 8001eee:	fb00 f303 	mul.w	r3, r0, r3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3358      	adds	r3, #88	@ 0x58
 8001ef6:	460a      	mov	r2, r1
 8001ef8:	701a      	strb	r2, [r3, #0]
	memcpy(correl->received[correl->index].word, data->word, sizeof(data->word));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	2354      	movs	r3, #84	@ 0x54
 8001f02:	fb02 f303 	mul.w	r3, r2, r3
 8001f06:	3308      	adds	r3, #8
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	1c58      	adds	r0, r3, #1
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	3301      	adds	r3, #1
 8001f12:	2241      	movs	r2, #65	@ 0x41
 8001f14:	4619      	mov	r1, r3
 8001f16:	f00a fd1c 	bl	800c952 <memcpy>

	correl->index = (correl->index + 1) % RX_CORREL_WORDS;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	4b55      	ldr	r3, [pc, #340]	@ (8002078 <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0x2f8>)
 8001f22:	fb83 1302 	smull	r1, r3, r3, r2
 8001f26:	1059      	asrs	r1, r3, #1
 8001f28:	17d3      	asrs	r3, r2, #31
 8001f2a:	1ac9      	subs	r1, r1, r3
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	440b      	add	r3, r1
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	1ad1      	subs	r1, r2, r3
 8001f36:	b2ca      	uxtb	r2, r1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	701a      	strb	r2, [r3, #0]
	correl->last_word_time_ms = HAL_GetTick();
 8001f3c:	f000 ff7e 	bl	8002e3c <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	605a      	str	r2, [r3, #4]

	RxPacket* this_match = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
	// run correlation; call to user feedback function if correlation
	// is above the defined threshold
	for (int i = 0; i < (int) correl->index - (int) correl->match_thresh; i++) {
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	e068      	b.n	8002022 <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0x2a2>
		uint8_t matches = 1;
 8001f50:	2301      	movs	r3, #1
 8001f52:	73fb      	strb	r3, [r7, #15]
		// skip any matching of the last sent word
		if (strcmp(correl->last_match->word, correl->received[i].word) == 0)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 8001f5a:	1c58      	adds	r0, r3, #1
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	2254      	movs	r2, #84	@ 0x54
 8001f60:	fb02 f303 	mul.w	r3, r2, r3
 8001f64:	3308      	adds	r3, #8
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f7fe f8ed 	bl	800014c <strcmp>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d050      	beq.n	800201a <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0x29a>
			continue;

		for (int j = i + 1; j < correl->index; j++) {
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	e037      	b.n	8001ff0 <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0x270>
			// skip this j if string lengths mismatch
			if (strlen(correl->received[i].word) != strlen(correl->received[j].word))
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	2254      	movs	r2, #84	@ 0x54
 8001f84:	fb02 f303 	mul.w	r3, r2, r3
 8001f88:	3308      	adds	r3, #8
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3301      	adds	r3, #1
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe f8e5 	bl	8000160 <strlen>
 8001f96:	4604      	mov	r4, r0
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2254      	movs	r2, #84	@ 0x54
 8001f9c:	fb02 f303 	mul.w	r3, r2, r3
 8001fa0:	3308      	adds	r3, #8
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe f8d9 	bl	8000160 <strlen>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	429c      	cmp	r4, r3
 8001fb2:	d119      	bne.n	8001fe8 <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0x268>
				continue;

			// check if the strings match
			if (strcmp(correl->received[i].word, correl->received[j].word) == 0)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	2254      	movs	r2, #84	@ 0x54
 8001fb8:	fb02 f303 	mul.w	r3, r2, r3
 8001fbc:	3308      	adds	r3, #8
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	1c58      	adds	r0, r3, #1
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2254      	movs	r2, #84	@ 0x54
 8001fc8:	fb02 f303 	mul.w	r3, r2, r3
 8001fcc:	3308      	adds	r3, #8
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f7fe f8b9 	bl	800014c <strcmp>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d104      	bne.n	8001fea <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0x26a>
				matches++;
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]
 8001fe6:	e000      	b.n	8001fea <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0x26a>
				continue;
 8001fe8:	bf00      	nop
		for (int j = i + 1; j < correl->index; j++) {
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	3301      	adds	r3, #1
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	dbc1      	blt.n	8001f80 <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0x200>
		}

		// check if match count is greater than the threshold
		if (matches >= correl->match_thresh) {
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 3400 	ldrb.w	r3, [r3, #1024]	@ 0x400
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	429a      	cmp	r2, r3
 8002006:	d309      	bcc.n	800201c <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0x29c>
			this_match = &correl->received[i];
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	2254      	movs	r2, #84	@ 0x54
 800200c:	fb02 f303 	mul.w	r3, r2, r3
 8002010:	3308      	adds	r3, #8
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	617b      	str	r3, [r7, #20]
			break;
 8002018:	e00d      	b.n	8002036 <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0x2b6>
			continue;
 800201a:	bf00      	nop
	for (int i = 0; i < (int) correl->index - (int) correl->match_thresh; i++) {
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	3301      	adds	r3, #1
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3400 	ldrb.w	r3, [r3, #1024]	@ 0x400
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	429a      	cmp	r2, r3
 8002034:	db8c      	blt.n	8001f50 <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0x1d0>
		}
	}

	if (this_match && correl->last_match != this_match) {
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d011      	beq.n	8002060 <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0x2e0>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	429a      	cmp	r2, r3
 8002046:	d00b      	beq.n	8002060 <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0x2e0>
		// match threshold met; make sure it hasn't already been sent
		status |= (RX_WORD_AVAILABLE << 16);
 8002048:	4b0c      	ldr	r3, [pc, #48]	@ (800207c <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0x2fc>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002050:	4a0a      	ldr	r2, [pc, #40]	@ (800207c <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0x2fc>)
 8002052:	6013      	str	r3, [r2, #0]
		correl->last_match = this_match;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
 800205c:	e000      	b.n	8002060 <_Z12receivedWordP14RxCorrelBufferP8RxPacket+0x2e0>
	if (data->len < correl->min_word_len || data->len > correl->max_word_len + (rx.ignore_sync_bit ? 0 : 1)) return;
 800205e:	bf00      	nop
	}
}
 8002060:	3724      	adds	r7, #36	@ 0x24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd90      	pop	{r4, r7, pc}
 8002066:	bf00      	nop
 8002068:	20000ef8 	.word	0x20000ef8
 800206c:	20000bec 	.word	0x20000bec
 8002070:	20000cf0 	.word	0x20000cf0
 8002074:	20000df4 	.word	0x20000df4
 8002078:	2aaaaaab 	.word	0x2aaaaaab
 800207c:	20000610 	.word	0x20000610

08002080 <_Z14checkRxBuffersv>:

/*
 * Check if there's a sentence ready to be processed
 */
void checkRxBuffers() {
 8002080:	b590      	push	{r4, r7, lr}
 8002082:	b09b      	sub	sp, #108	@ 0x6c
 8002084:	af00      	add	r7, sp, #0
	// FIXME: overflow entry logic with overflow_count enabled
	// check for end of a word via timeout operation; only act if there's no period info
	if (((overflow_count << 16) + TIM2->CNT) >= rx.bit_max_period && rx.tgt_idx ^ rx.stor_idx) {
 8002086:	4b9d      	ldr	r3, [pc, #628]	@ (80022fc <_Z14checkRxBuffersv+0x27c>)
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	041a      	lsls	r2, r3, #16
 800208c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002092:	441a      	add	r2, r3
 8002094:	4b9a      	ldr	r3, [pc, #616]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	429a      	cmp	r2, r3
 800209a:	d307      	bcc.n	80020ac <_Z14checkRxBuffersv+0x2c>
 800209c:	4b98      	ldr	r3, [pc, #608]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 800209e:	891a      	ldrh	r2, [r3, #8]
 80020a0:	4b97      	ldr	r3, [pc, #604]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 80020a2:	889b      	ldrh	r3, [r3, #4]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <_Z14checkRxBuffersv+0x2c>
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <_Z14checkRxBuffersv+0x2e>
 80020ac:	2300      	movs	r3, #0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d034      	beq.n	800211c <_Z14checkRxBuffersv+0x9c>
		// if there's been a counter overflow
		// mark the end of the sample and increment the storage idx
		if (rx.measured_widths[rx.stor_idx]) {
 80020b2:	4b93      	ldr	r3, [pc, #588]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 80020b4:	889b      	ldrh	r3, [r3, #4]
 80020b6:	4a92      	ldr	r2, [pc, #584]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 80020b8:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80020bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d027      	beq.n	8002114 <_Z14checkRxBuffersv+0x94>
			rx.measured_periods[rx.stor_idx] = (overflow_count << 16) + TIM2->CNT;
 80020c4:	4b8d      	ldr	r3, [pc, #564]	@ (80022fc <_Z14checkRxBuffersv+0x27c>)
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	041a      	lsls	r2, r3, #16
 80020ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80020ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d0:	498b      	ldr	r1, [pc, #556]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 80020d2:	8889      	ldrh	r1, [r1, #4]
 80020d4:	4608      	mov	r0, r1
 80020d6:	441a      	add	r2, r3
 80020d8:	4989      	ldr	r1, [pc, #548]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 80020da:	1d03      	adds	r3, r0, #4
 80020dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			overflow_count = 0;
 80020e0:	4b86      	ldr	r3, [pc, #536]	@ (80022fc <_Z14checkRxBuffersv+0x27c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	801a      	strh	r2, [r3, #0]
			rx.stor_idx++;
 80020e6:	4b86      	ldr	r3, [pc, #536]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 80020e8:	889b      	ldrh	r3, [r3, #4]
 80020ea:	3301      	adds	r3, #1
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	4b84      	ldr	r3, [pc, #528]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 80020f0:	809a      	strh	r2, [r3, #4]
			rx.stor_idx %= RX_BUFFER_SAMPLES;
 80020f2:	4b83      	ldr	r3, [pc, #524]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 80020f4:	889b      	ldrh	r3, [r3, #4]
 80020f6:	4619      	mov	r1, r3
 80020f8:	4b82      	ldr	r3, [pc, #520]	@ (8002304 <_Z14checkRxBuffersv+0x284>)
 80020fa:	fb83 2301 	smull	r2, r3, r3, r1
 80020fe:	11da      	asrs	r2, r3, #7
 8002100:	17cb      	asrs	r3, r1, #31
 8002102:	1ad2      	subs	r2, r2, r3
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	019b      	lsls	r3, r3, #6
 800210c:	1aca      	subs	r2, r1, r3
 800210e:	b292      	uxth	r2, r2
 8002110:	4b7b      	ldr	r3, [pc, #492]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 8002112:	809a      	strh	r2, [r3, #4]
		}

		rx.tgt_idx = rx.stor_idx;
 8002114:	4b7a      	ldr	r3, [pc, #488]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 8002116:	889a      	ldrh	r2, [r3, #4]
 8002118:	4b79      	ldr	r3, [pc, #484]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 800211a:	811a      	strh	r2, [r3, #8]
	}

	if(rx.proc_idx == rx.tgt_idx)
 800211c:	4b78      	ldr	r3, [pc, #480]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 800211e:	88da      	ldrh	r2, [r3, #6]
 8002120:	4b77      	ldr	r3, [pc, #476]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 8002122:	891b      	ldrh	r3, [r3, #8]
 8002124:	429a      	cmp	r2, r3
 8002126:	f000 816c 	beq.w	8002402 <_Z14checkRxBuffersv+0x382>
		// sample to process is equal to target index; return
		return;

	// get a count of how many samples were in last chunk; copy data for sorting in buffers
	uint16_t sample_ct = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	memset(measPeriodSorted, 0, sizeof(measPeriodSorted));
 8002130:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8002134:	2100      	movs	r1, #0
 8002136:	4874      	ldr	r0, [pc, #464]	@ (8002308 <_Z14checkRxBuffersv+0x288>)
 8002138:	f00a fb33 	bl	800c7a2 <memset>
	if(rx.tgt_idx < rx.proc_idx) {
 800213c:	4b70      	ldr	r3, [pc, #448]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 800213e:	891a      	ldrh	r2, [r3, #8]
 8002140:	4b6f      	ldr	r3, [pc, #444]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 8002142:	88db      	ldrh	r3, [r3, #6]
 8002144:	429a      	cmp	r2, r3
 8002146:	d227      	bcs.n	8002198 <_Z14checkRxBuffersv+0x118>
		// rollover occurred
		sample_ct = (RX_BUFFER_SAMPLES - rx.proc_idx) + rx.tgt_idx;
 8002148:	4b6d      	ldr	r3, [pc, #436]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 800214a:	891a      	ldrh	r2, [r3, #8]
 800214c:	4b6c      	ldr	r3, [pc, #432]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 800214e:	88db      	ldrh	r3, [r3, #6]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	b29b      	uxth	r3, r3
 8002154:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002158:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		// copy data to buffers for sorting and processing
		memcpy(measPeriodSorted, &rx.measured_periods[rx.proc_idx], (RX_BUFFER_SAMPLES - rx.proc_idx) * sizeof(rx.measured_periods[0]));
 800215c:	4b68      	ldr	r3, [pc, #416]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 800215e:	88db      	ldrh	r3, [r3, #6]
 8002160:	3304      	adds	r3, #4
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4a66      	ldr	r2, [pc, #408]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 8002166:	4413      	add	r3, r2
 8002168:	4a65      	ldr	r2, [pc, #404]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 800216a:	88d2      	ldrh	r2, [r2, #6]
 800216c:	f5c2 72a0 	rsb	r2, r2, #320	@ 0x140
 8002170:	0092      	lsls	r2, r2, #2
 8002172:	4619      	mov	r1, r3
 8002174:	4864      	ldr	r0, [pc, #400]	@ (8002308 <_Z14checkRxBuffersv+0x288>)
 8002176:	f00a fbec 	bl	800c952 <memcpy>
		memcpy(measPeriodSorted + (RX_BUFFER_SAMPLES - rx.proc_idx), rx.measured_periods, (rx.tgt_idx) * sizeof(rx.measured_periods[0]));
 800217a:	4b61      	ldr	r3, [pc, #388]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 800217c:	88db      	ldrh	r3, [r3, #6]
 800217e:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4a60      	ldr	r2, [pc, #384]	@ (8002308 <_Z14checkRxBuffersv+0x288>)
 8002186:	4413      	add	r3, r2
 8002188:	4a5d      	ldr	r2, [pc, #372]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 800218a:	8912      	ldrh	r2, [r2, #8]
 800218c:	0092      	lsls	r2, r2, #2
 800218e:	495f      	ldr	r1, [pc, #380]	@ (800230c <_Z14checkRxBuffersv+0x28c>)
 8002190:	4618      	mov	r0, r3
 8002192:	f00a fbde 	bl	800c952 <memcpy>
 8002196:	e013      	b.n	80021c0 <_Z14checkRxBuffersv+0x140>
	} else {
		// get simple difference (zero case already handled)
		sample_ct = rx.tgt_idx - rx.proc_idx;
 8002198:	4b59      	ldr	r3, [pc, #356]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 800219a:	891a      	ldrh	r2, [r3, #8]
 800219c:	4b58      	ldr	r3, [pc, #352]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 800219e:	88db      	ldrh	r3, [r3, #6]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		// copy data to buffers for sorting and processing
		memcpy(measPeriodSorted, &rx.measured_periods[rx.proc_idx], sample_ct * sizeof(rx.measured_periods[0]));
 80021a6:	4b56      	ldr	r3, [pc, #344]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 80021a8:	88db      	ldrh	r3, [r3, #6]
 80021aa:	3304      	adds	r3, #4
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4a54      	ldr	r2, [pc, #336]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 80021b0:	1899      	adds	r1, r3, r2
 80021b2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	461a      	mov	r2, r3
 80021ba:	4853      	ldr	r0, [pc, #332]	@ (8002308 <_Z14checkRxBuffersv+0x288>)
 80021bc:	f00a fbc9 	bl	800c952 <memcpy>
	}

	// get the period for the bit rate based on the mode of periods
	uint32_t period_mode = mode(measPeriodSorted, sample_ct);
 80021c0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80021c4:	4619      	mov	r1, r3
 80021c6:	4850      	ldr	r0, [pc, #320]	@ (8002308 <_Z14checkRxBuffersv+0x288>)
 80021c8:	f7ff fcc2 	bl	8001b50 <_Z4modePmt>
 80021cc:	6638      	str	r0, [r7, #96]	@ 0x60

	// define a buffer to store temporary received word data
	RxPacket packet;
 80021ce:	463b      	mov	r3, r7
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff f861 	bl	8001298 <_ZN8RxPacketC1Ev>
	memset(packet.word, 0, sizeof(packet.word));
 80021d6:	463b      	mov	r3, r7
 80021d8:	3301      	adds	r3, #1
 80021da:	2241      	movs	r2, #65	@ 0x41
 80021dc:	2100      	movs	r1, #0
 80021de:	4618      	mov	r0, r3
 80021e0:	f00a fadf 	bl	800c7a2 <memset>
	packet.logic = rx.invert_logic;
 80021e4:	4b46      	ldr	r3, [pc, #280]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

	// clear measurement buffers for short, long, and period values
	memset(measLong, 0, sizeof(measLong));
 80021ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80021f0:	2100      	movs	r1, #0
 80021f2:	4847      	ldr	r0, [pc, #284]	@ (8002310 <_Z14checkRxBuffersv+0x290>)
 80021f4:	f00a fad5 	bl	800c7a2 <memset>
	memset(measShort, 0, sizeof(measShort));
 80021f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80021fc:	2100      	movs	r1, #0
 80021fe:	4845      	ldr	r0, [pc, #276]	@ (8002314 <_Z14checkRxBuffersv+0x294>)
 8002200:	f00a facf 	bl	800c7a2 <memset>
	memset(measPeriod, 0, sizeof(measPeriod));
 8002204:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002208:	2100      	movs	r1, #0
 800220a:	4843      	ldr	r0, [pc, #268]	@ (8002318 <_Z14checkRxBuffersv+0x298>)
 800220c:	f00a fac9 	bl	800c7a2 <memset>

	// note word start index
	uint16_t word_start_idx = rx.proc_idx;
 8002210:	4b3b      	ldr	r3, [pc, #236]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 8002212:	88db      	ldrh	r3, [r3, #6]
 8002214:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

	// loop through samples to build word; since
	while(rx.proc_idx != rx.tgt_idx) {
 8002218:	e0eb      	b.n	80023f2 <_Z14checkRxBuffersv+0x372>
		// period measured is approximately equal to the mode of periods
		// now check duty cycle to determine whether it's a '1' or '0'
		uint32_t this_period = (rx.measured_periods[rx.proc_idx]);
 800221a:	4b39      	ldr	r3, [pc, #228]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 800221c:	88db      	ldrh	r3, [r3, #6]
 800221e:	4a38      	ldr	r2, [pc, #224]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 8002220:	3304      	adds	r3, #4
 8002222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002226:	65fb      	str	r3, [r7, #92]	@ 0x5c
		uint32_t this_width = (rx.measured_widths[rx.proc_idx]);
 8002228:	4b35      	ldr	r3, [pc, #212]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 800222a:	88db      	ldrh	r3, [r3, #6]
 800222c:	4a34      	ldr	r2, [pc, #208]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 800222e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8002232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002236:	65bb      	str	r3, [r7, #88]	@ 0x58
		uint16_t duty_pct = (uint16_t) ((float) (this_width * 100) / (float) period_mode);
 8002238:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800223a:	2264      	movs	r2, #100	@ 0x64
 800223c:	fb02 f303 	mul.w	r3, r2, r3
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe f84b 	bl	80002dc <__aeabi_ui2f>
 8002246:	4604      	mov	r4, r0
 8002248:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800224a:	f7fe f847 	bl	80002dc <__aeabi_ui2f>
 800224e:	4603      	mov	r3, r0
 8002250:	4619      	mov	r1, r3
 8002252:	4620      	mov	r0, r4
 8002254:	f7fe f94e 	bl	80004f4 <__aeabi_fdiv>
 8002258:	4603      	mov	r3, r0
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe fa5c 	bl	8000718 <__aeabi_f2uiz>
 8002260:	4603      	mov	r3, r0
 8002262:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

		// because the received word for OOK can have a sync bit
		//   at the start, optionally ignore the first bit of the received string
		if ((rx.ignore_sync_bit && rx.proc_idx ^ word_start_idx) || !rx.ignore_sync_bit) {
 8002266:	4b26      	ldr	r3, [pc, #152]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 8002268:	785b      	ldrb	r3, [r3, #1]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <_Z14checkRxBuffersv+0x1fa>
 800226e:	4b24      	ldr	r3, [pc, #144]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 8002270:	88db      	ldrh	r3, [r3, #6]
 8002272:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 8002276:	429a      	cmp	r2, r3
 8002278:	d106      	bne.n	8002288 <_Z14checkRxBuffersv+0x208>
 800227a:	4b21      	ldr	r3, [pc, #132]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 800227c:	785b      	ldrb	r3, [r3, #1]
 800227e:	f083 0301 	eor.w	r3, r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d068      	beq.n	800235a <_Z14checkRxBuffersv+0x2da>
			measPeriod[packet.len] = (this_period > rx.correl.timeout_us) ? period_mode : this_period;
 8002288:	4b1d      	ldr	r3, [pc, #116]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 800228a:	f8d3 3e0c 	ldr.w	r3, [r3, #3596]	@ 0xe0c
 800228e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002290:	429a      	cmp	r2, r3
 8002292:	d901      	bls.n	8002298 <_Z14checkRxBuffersv+0x218>
 8002294:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002296:	e000      	b.n	800229a <_Z14checkRxBuffersv+0x21a>
 8002298:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800229a:	783a      	ldrb	r2, [r7, #0]
 800229c:	4611      	mov	r1, r2
 800229e:	4a1e      	ldr	r2, [pc, #120]	@ (8002318 <_Z14checkRxBuffersv+0x298>)
 80022a0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			if (duty_pct < 50) {
 80022a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80022a8:	2b31      	cmp	r3, #49	@ 0x31
 80022aa:	d821      	bhi.n	80022f0 <_Z14checkRxBuffersv+0x270>
				packet.word[packet.len] = rx.invert_logic ? '0' : '1';
 80022ac:	4b14      	ldr	r3, [pc, #80]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <_Z14checkRxBuffersv+0x238>
 80022b4:	2230      	movs	r2, #48	@ 0x30
 80022b6:	e000      	b.n	80022ba <_Z14checkRxBuffersv+0x23a>
 80022b8:	2231      	movs	r2, #49	@ 0x31
 80022ba:	783b      	ldrb	r3, [r7, #0]
 80022bc:	3368      	adds	r3, #104	@ 0x68
 80022be:	443b      	add	r3, r7
 80022c0:	f803 2c67 	strb.w	r2, [r3, #-103]
				measShort[packet.len] = this_width;
 80022c4:	783b      	ldrb	r3, [r7, #0]
 80022c6:	4619      	mov	r1, r3
 80022c8:	4a12      	ldr	r2, [pc, #72]	@ (8002314 <_Z14checkRxBuffersv+0x294>)
 80022ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022cc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				measLong[packet.len] = measPeriod[packet.len] - measShort[packet.len];
 80022d0:	783b      	ldrb	r3, [r7, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <_Z14checkRxBuffersv+0x298>)
 80022d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80022da:	783b      	ldrb	r3, [r7, #0]
 80022dc:	4619      	mov	r1, r3
 80022de:	4b0d      	ldr	r3, [pc, #52]	@ (8002314 <_Z14checkRxBuffersv+0x294>)
 80022e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80022e4:	7839      	ldrb	r1, [r7, #0]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	4a09      	ldr	r2, [pc, #36]	@ (8002310 <_Z14checkRxBuffersv+0x290>)
 80022ea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80022ee:	e030      	b.n	8002352 <_Z14checkRxBuffersv+0x2d2>
			} else {
				packet.word[packet.len] = rx.invert_logic ? '1' : '0';
 80022f0:	4b03      	ldr	r3, [pc, #12]	@ (8002300 <_Z14checkRxBuffersv+0x280>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d011      	beq.n	800231c <_Z14checkRxBuffersv+0x29c>
 80022f8:	2231      	movs	r2, #49	@ 0x31
 80022fa:	e010      	b.n	800231e <_Z14checkRxBuffersv+0x29e>
 80022fc:	200006e8 	.word	0x200006e8
 8002300:	20000ef8 	.word	0x20000ef8
 8002304:	66666667 	.word	0x66666667
 8002308:	200006ec 	.word	0x200006ec
 800230c:	20000f08 	.word	0x20000f08
 8002310:	20000bec 	.word	0x20000bec
 8002314:	20000cf0 	.word	0x20000cf0
 8002318:	20000df4 	.word	0x20000df4
 800231c:	2230      	movs	r2, #48	@ 0x30
 800231e:	783b      	ldrb	r3, [r7, #0]
 8002320:	3368      	adds	r3, #104	@ 0x68
 8002322:	443b      	add	r3, r7
 8002324:	f803 2c67 	strb.w	r2, [r3, #-103]
				measLong[packet.len] = this_width;
 8002328:	783b      	ldrb	r3, [r7, #0]
 800232a:	4619      	mov	r1, r3
 800232c:	4a37      	ldr	r2, [pc, #220]	@ (800240c <_Z14checkRxBuffersv+0x38c>)
 800232e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002330:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				measShort[packet.len] = measPeriod[packet.len] - measLong[packet.len];
 8002334:	783b      	ldrb	r3, [r7, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	4b35      	ldr	r3, [pc, #212]	@ (8002410 <_Z14checkRxBuffersv+0x390>)
 800233a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800233e:	783b      	ldrb	r3, [r7, #0]
 8002340:	4619      	mov	r1, r3
 8002342:	4b32      	ldr	r3, [pc, #200]	@ (800240c <_Z14checkRxBuffersv+0x38c>)
 8002344:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002348:	7839      	ldrb	r1, [r7, #0]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	4a31      	ldr	r2, [pc, #196]	@ (8002414 <_Z14checkRxBuffersv+0x394>)
 800234e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			}
			packet.len++;
 8002352:	783b      	ldrb	r3, [r7, #0]
 8002354:	3301      	adds	r3, #1
 8002356:	b2db      	uxtb	r3, r3
 8002358:	703b      	strb	r3, [r7, #0]
		}

		// increment sample to look at next, and clear this sample
		rx.measured_periods[rx.proc_idx] = 0;
 800235a:	4b2f      	ldr	r3, [pc, #188]	@ (8002418 <_Z14checkRxBuffersv+0x398>)
 800235c:	88db      	ldrh	r3, [r3, #6]
 800235e:	4a2e      	ldr	r2, [pc, #184]	@ (8002418 <_Z14checkRxBuffersv+0x398>)
 8002360:	3304      	adds	r3, #4
 8002362:	2100      	movs	r1, #0
 8002364:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		rx.measured_widths[rx.proc_idx] = 0;
 8002368:	4b2b      	ldr	r3, [pc, #172]	@ (8002418 <_Z14checkRxBuffersv+0x398>)
 800236a:	88db      	ldrh	r3, [r3, #6]
 800236c:	4a2a      	ldr	r2, [pc, #168]	@ (8002418 <_Z14checkRxBuffersv+0x398>)
 800236e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8002372:	2100      	movs	r1, #0
 8002374:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		rx.proc_idx++;
 8002378:	4b27      	ldr	r3, [pc, #156]	@ (8002418 <_Z14checkRxBuffersv+0x398>)
 800237a:	88db      	ldrh	r3, [r3, #6]
 800237c:	3301      	adds	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	4b25      	ldr	r3, [pc, #148]	@ (8002418 <_Z14checkRxBuffersv+0x398>)
 8002382:	80da      	strh	r2, [r3, #6]
		rx.proc_idx %= RX_BUFFER_SAMPLES;
 8002384:	4b24      	ldr	r3, [pc, #144]	@ (8002418 <_Z14checkRxBuffersv+0x398>)
 8002386:	88db      	ldrh	r3, [r3, #6]
 8002388:	4619      	mov	r1, r3
 800238a:	4b24      	ldr	r3, [pc, #144]	@ (800241c <_Z14checkRxBuffersv+0x39c>)
 800238c:	fb83 2301 	smull	r2, r3, r3, r1
 8002390:	11da      	asrs	r2, r3, #7
 8002392:	17cb      	asrs	r3, r1, #31
 8002394:	1ad2      	subs	r2, r2, r3
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	019b      	lsls	r3, r3, #6
 800239e:	1aca      	subs	r2, r1, r3
 80023a0:	b292      	uxth	r2, r2
 80023a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002418 <_Z14checkRxBuffersv+0x398>)
 80023a4:	80da      	strh	r2, [r3, #6]

		// handle processing the word to the correlation logic
		if (this_period > period_mode * period_lim && packet.len > 0) {
 80023a6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80023a8:	f7fd ff98 	bl	80002dc <__aeabi_ui2f>
 80023ac:	4604      	mov	r4, r0
 80023ae:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80023b0:	f7fd ff94 	bl	80002dc <__aeabi_ui2f>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002420 <_Z14checkRxBuffersv+0x3a0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4619      	mov	r1, r3
 80023bc:	4610      	mov	r0, r2
 80023be:	f7fd ffe5 	bl	800038c <__aeabi_fmul>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4619      	mov	r1, r3
 80023c6:	4620      	mov	r0, r4
 80023c8:	f7fe f99c 	bl	8000704 <__aeabi_fcmpgt>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00f      	beq.n	80023f2 <_Z14checkRxBuffersv+0x372>
 80023d2:	783b      	ldrb	r3, [r7, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00c      	beq.n	80023f2 <_Z14checkRxBuffersv+0x372>
			// Entry conditions:
			// - the period observed is significantly larger than the mode period (i.e. inter-word delay)
			// - packet data is longer than 0 bits

			receivedWord(&rx.correl, &packet);
 80023d8:	463b      	mov	r3, r7
 80023da:	4619      	mov	r1, r3
 80023dc:	4811      	ldr	r0, [pc, #68]	@ (8002424 <_Z14checkRxBuffersv+0x3a4>)
 80023de:	f7ff fccf 	bl	8001d80 <_Z12receivedWordP14RxCorrelBufferP8RxPacket>
			clearRxPacket(&packet);
 80023e2:	463b      	mov	r3, r7
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fcab 	bl	8001d40 <_Z13clearRxPacketP8RxPacket>
			word_start_idx = rx.proc_idx;
 80023ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <_Z14checkRxBuffersv+0x398>)
 80023ec:	88db      	ldrh	r3, [r3, #6]
 80023ee:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	while(rx.proc_idx != rx.tgt_idx) {
 80023f2:	4b09      	ldr	r3, [pc, #36]	@ (8002418 <_Z14checkRxBuffersv+0x398>)
 80023f4:	88da      	ldrh	r2, [r3, #6]
 80023f6:	4b08      	ldr	r3, [pc, #32]	@ (8002418 <_Z14checkRxBuffersv+0x398>)
 80023f8:	891b      	ldrh	r3, [r3, #8]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	f47f af0d 	bne.w	800221a <_Z14checkRxBuffersv+0x19a>
 8002400:	e000      	b.n	8002404 <_Z14checkRxBuffersv+0x384>
		return;
 8002402:	bf00      	nop
		}
	}
}
 8002404:	376c      	adds	r7, #108	@ 0x6c
 8002406:	46bd      	mov	sp, r7
 8002408:	bd90      	pop	{r4, r7, pc}
 800240a:	bf00      	nop
 800240c:	20000bec 	.word	0x20000bec
 8002410:	20000df4 	.word	0x20000df4
 8002414:	20000cf0 	.word	0x20000cf0
 8002418:	20000ef8 	.word	0x20000ef8
 800241c:	66666667 	.word	0x66666667
 8002420:	20000004 	.word	0x20000004
 8002424:	20001908 	.word	0x20001908

08002428 <HAL_TIM_IC_CaptureCallback>:
// ==================== HAL ISR Callback ==========================

/*
 * Input capture callback for measuring PWM values of input signal
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) { // if interrupt is rising edge
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	7f1b      	ldrb	r3, [r3, #28]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d137      	bne.n	80024a8 <HAL_TIM_IC_CaptureCallback+0x80>
		// get period between last 2 rising edges
		uint16_t delta = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) + 1; // correct for 0-based counting
 8002438:	2100      	movs	r1, #0
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f004 fc66 	bl	8006d0c <HAL_TIM_ReadCapturedValue>
 8002440:	4603      	mov	r3, r0
 8002442:	b29b      	uxth	r3, r3
 8002444:	3301      	adds	r3, #1
 8002446:	81bb      	strh	r3, [r7, #12]

		// store period to buffer
		rx.measured_periods[rx.stor_idx] = delta + (overflow_count << 16);
 8002448:	89ba      	ldrh	r2, [r7, #12]
 800244a:	4b27      	ldr	r3, [pc, #156]	@ (80024e8 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	041b      	lsls	r3, r3, #16
 8002450:	441a      	add	r2, r3
 8002452:	4b26      	ldr	r3, [pc, #152]	@ (80024ec <HAL_TIM_IC_CaptureCallback+0xc4>)
 8002454:	889b      	ldrh	r3, [r3, #4]
 8002456:	4611      	mov	r1, r2
 8002458:	4a24      	ldr	r2, [pc, #144]	@ (80024ec <HAL_TIM_IC_CaptureCallback+0xc4>)
 800245a:	3304      	adds	r3, #4
 800245c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		overflow_count = 0;
 8002460:	4b21      	ldr	r3, [pc, #132]	@ (80024e8 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002462:	2200      	movs	r2, #0
 8002464:	801a      	strh	r2, [r3, #0]

		if(rx.measured_widths[rx.stor_idx]) {
 8002466:	4b21      	ldr	r3, [pc, #132]	@ (80024ec <HAL_TIM_IC_CaptureCallback+0xc4>)
 8002468:	889b      	ldrh	r3, [r3, #4]
 800246a:	4a20      	ldr	r2, [pc, #128]	@ (80024ec <HAL_TIM_IC_CaptureCallback+0xc4>)
 800246c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8002470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d033      	beq.n	80024e0 <HAL_TIM_IC_CaptureCallback+0xb8>
			// increment the current sample mod sample count
			rx.stor_idx++;
 8002478:	4b1c      	ldr	r3, [pc, #112]	@ (80024ec <HAL_TIM_IC_CaptureCallback+0xc4>)
 800247a:	889b      	ldrh	r3, [r3, #4]
 800247c:	3301      	adds	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	4b1a      	ldr	r3, [pc, #104]	@ (80024ec <HAL_TIM_IC_CaptureCallback+0xc4>)
 8002482:	809a      	strh	r2, [r3, #4]
			rx.stor_idx %= RX_BUFFER_SAMPLES;
 8002484:	4b19      	ldr	r3, [pc, #100]	@ (80024ec <HAL_TIM_IC_CaptureCallback+0xc4>)
 8002486:	889b      	ldrh	r3, [r3, #4]
 8002488:	4619      	mov	r1, r3
 800248a:	4b19      	ldr	r3, [pc, #100]	@ (80024f0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800248c:	fb83 2301 	smull	r2, r3, r3, r1
 8002490:	11da      	asrs	r2, r3, #7
 8002492:	17cb      	asrs	r3, r1, #31
 8002494:	1ad2      	subs	r2, r2, r3
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	019b      	lsls	r3, r3, #6
 800249e:	1aca      	subs	r2, r1, r3
 80024a0:	b292      	uxth	r2, r2
 80024a2:	4b12      	ldr	r3, [pc, #72]	@ (80024ec <HAL_TIM_IC_CaptureCallback+0xc4>)
 80024a4:	809a      	strh	r2, [r3, #4]

		// save the measurement
		rx.measured_widths[rx.stor_idx] = delta + (overflow_count << 16);
		overflow_count = 0;
	}
}
 80024a6:	e01b      	b.n	80024e0 <HAL_TIM_IC_CaptureCallback+0xb8>
	} else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) { // if interrupt is falling edge (duty cycle info)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	7f1b      	ldrb	r3, [r3, #28]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d117      	bne.n	80024e0 <HAL_TIM_IC_CaptureCallback+0xb8>
		uint16_t delta = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) + 1; // correct for 0-based counting
 80024b0:	2104      	movs	r1, #4
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f004 fc2a 	bl	8006d0c <HAL_TIM_ReadCapturedValue>
 80024b8:	4603      	mov	r3, r0
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	3301      	adds	r3, #1
 80024be:	81fb      	strh	r3, [r7, #14]
		rx.measured_widths[rx.stor_idx] = delta + (overflow_count << 16);
 80024c0:	89fa      	ldrh	r2, [r7, #14]
 80024c2:	4b09      	ldr	r3, [pc, #36]	@ (80024e8 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	041b      	lsls	r3, r3, #16
 80024c8:	441a      	add	r2, r3
 80024ca:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <HAL_TIM_IC_CaptureCallback+0xc4>)
 80024cc:	889b      	ldrh	r3, [r3, #4]
 80024ce:	4611      	mov	r1, r2
 80024d0:	4a06      	ldr	r2, [pc, #24]	@ (80024ec <HAL_TIM_IC_CaptureCallback+0xc4>)
 80024d2:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80024d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		overflow_count = 0;
 80024da:	4b03      	ldr	r3, [pc, #12]	@ (80024e8 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80024dc:	2200      	movs	r2, #0
 80024de:	801a      	strh	r2, [r3, #0]
}
 80024e0:	bf00      	nop
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	200006e8 	.word	0x200006e8
 80024ec:	20000ef8 	.word	0x20000ef8
 80024f0:	66666667 	.word	0x66666667

080024f4 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Timer Overflowed interrupt
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
	// discard the current sample if the timer period elapses
	// however this is also called on the rising edge (since it resets the timer)
	if (overflow_count < (rx.bit_max_period >> 16))
 80024fc:	4b09      	ldr	r3, [pc, #36]	@ (8002524 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	4b09      	ldr	r3, [pc, #36]	@ (8002528 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	0c1b      	lsrs	r3, r3, #16
 8002508:	429a      	cmp	r2, r3
 800250a:	d205      	bcs.n	8002518 <HAL_TIM_PeriodElapsedCallback+0x24>
		overflow_count++;
 800250c:	4b05      	ldr	r3, [pc, #20]	@ (8002524 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	4b03      	ldr	r3, [pc, #12]	@ (8002524 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002516:	801a      	strh	r2, [r3, #0]
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	200006e8 	.word	0x200006e8
 8002528:	20000ef8 	.word	0x20000ef8

0800252c <_Z41__static_initialization_and_destruction_0v>:
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
Receiver rx;
 8002530:	4802      	ldr	r0, [pc, #8]	@ (800253c <_Z41__static_initialization_and_destruction_0v+0x10>)
 8002532:	f7ff fb9d 	bl	8001c70 <_ZN8ReceiverC1Ev>
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000ef8 	.word	0x20000ef8

08002540 <_GLOBAL__sub_I_duty_tol>:
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
 8002544:	f7ff fff2 	bl	800252c <_Z41__static_initialization_and_destruction_0v>
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <_ZN11TransmitterC1Ev>:
	uint32_t burst_delay_us = 100000; // time between sending packets of different data
	// data transmission params
	uint8_t frame_repeat = 7; // by default, send once and repeat n times
	char buffer[TX_BUFFER_LEN][TX_MAX_BITS];

} Transmitter;
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	705a      	strb	r2, [r3, #1]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002566:	805a      	strh	r2, [r3, #2]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800256e:	809a      	strh	r2, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f641 12c8 	movw	r2, #6600	@ 0x19c8
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a05      	ldr	r2, [pc, #20]	@ (8002590 <_ZN11TransmitterC1Ev+0x44>)
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2207      	movs	r2, #7
 8002582:	741a      	strb	r2, [r3, #16]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	000186a0 	.word	0x000186a0

08002594 <_ZN8TxPacketC1Ev>:
} TxPacket;
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	701a      	strb	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	705a      	strb	r2, [r3, #1]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	709a      	strb	r2, [r3, #2]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	605a      	str	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4618      	mov	r0, r3
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <_Z6txInitP11Transmitter>:
TxPacket data;

/*
 * Initialize timers and parameters needed for OOK Tx operations
 */
void txInit(Transmitter* settings) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 80025d0:	4b07      	ldr	r3, [pc, #28]	@ (80025f0 <_Z6txInitP11Transmitter+0x28>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <_Z6txInitP11Transmitter+0x28>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025de:	60da      	str	r2, [r3, #12]

	// set up ARR register for Transmitter
	updateARR(settings); // set TIM1 ARR for TX generation frequency
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f807 	bl	80025f4 <_Z9updateARRP11Transmitter>
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000614 	.word	0x20000614

080025f4 <_Z9updateARRP11Transmitter>:

/*
 * Update the Tx timing buffer ARR for signal period, based on configured
 * long and short time values
 */
void updateARR(Transmitter* settings) {
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
	// ARR is 0-based, so correct for that by subtracting 1
	htim1.Instance->ARR = (uint32_t) (settings->t_long + settings->t_short) - 1;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	889b      	ldrh	r3, [r3, #4]
 8002600:	461a      	mov	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	885b      	ldrh	r3, [r3, #2]
 8002606:	4413      	add	r3, r2
 8002608:	461a      	mov	r2, r3
 800260a:	4b04      	ldr	r3, [pc, #16]	@ (800261c <_Z9updateARRP11Transmitter+0x28>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	3a01      	subs	r2, #1
 8002610:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr
 800261c:	20000614 	.word	0x20000614

08002620 <_Z12makeTxPacketP11TransmitterP8TxPacket>:

/*
 * Prepare a packet to transmit using the 0 index of settings->buffer
 */
void makeTxPacket(Transmitter* settings, TxPacket* packet) {
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
	if (settings->buffer[0][0] == 0){
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	7c5b      	ldrb	r3, [r3, #17]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d106      	bne.n	8002640 <_Z12makeTxPacketP11TransmitterP8TxPacket+0x20>
		status |= (TX_BUFFER_EMPTY << 8);
 8002632:	4b43      	ldr	r3, [pc, #268]	@ (8002740 <_Z12makeTxPacketP11TransmitterP8TxPacket+0x120>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800263a:	4a41      	ldr	r2, [pc, #260]	@ (8002740 <_Z12makeTxPacketP11TransmitterP8TxPacket+0x120>)
 800263c:	6013      	str	r3, [r2, #0]
		return;
 800263e:	e07c      	b.n	800273a <_Z12makeTxPacketP11TransmitterP8TxPacket+0x11a>
	} else {
		status &= ~(TX_BUFFER_EMPTY << 8);
 8002640:	4b3f      	ldr	r3, [pc, #252]	@ (8002740 <_Z12makeTxPacketP11TransmitterP8TxPacket+0x120>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002648:	4a3d      	ldr	r2, [pc, #244]	@ (8002740 <_Z12makeTxPacketP11TransmitterP8TxPacket+0x120>)
 800264a:	6013      	str	r3, [r2, #0]
	}

	// reset the packet to initial conditions
	packet->dma_len = 0;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2200      	movs	r2, #0
 8002650:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
	packet->frames_sent = 0;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2200      	movs	r2, #0
 8002658:	709a      	strb	r2, [r3, #2]
	memset(packet->dma_buffer, 0, sizeof(packet->dma_buffer));
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	3308      	adds	r3, #8
 800265e:	2282      	movs	r2, #130	@ 0x82
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f00a f89d 	bl	800c7a2 <memset>

	for (uint16_t i = 0; i < strlen(settings->buffer[0]); i++) {
 8002668:	2300      	movs	r3, #0
 800266a:	81fb      	strh	r3, [r7, #14]
 800266c:	e04e      	b.n	800270c <_Z12makeTxPacketP11TransmitterP8TxPacket+0xec>
		if (settings->buffer[0][i] == '1') {
 800266e:	89fb      	ldrh	r3, [r7, #14]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	4413      	add	r3, r2
 8002674:	7c5b      	ldrb	r3, [r3, #17]
 8002676:	2b31      	cmp	r3, #49	@ 0x31
 8002678:	d116      	bne.n	80026a8 <_Z12makeTxPacketP11TransmitterP8TxPacket+0x88>
			packet->dma_buffer[packet->dma_len++] =
				settings->invert_logic ? settings->t_long : settings->t_short;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <_Z12makeTxPacketP11TransmitterP8TxPacket+0x68>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	889b      	ldrh	r3, [r3, #4]
 8002686:	e001      	b.n	800268c <_Z12makeTxPacketP11TransmitterP8TxPacket+0x6c>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	885b      	ldrh	r3, [r3, #2]
			packet->dma_buffer[packet->dma_len++] =
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	f8b2 208a 	ldrh.w	r2, [r2, #138]	@ 0x8a
 8002692:	1c51      	adds	r1, r2, #1
 8002694:	b288      	uxth	r0, r1
 8002696:	6839      	ldr	r1, [r7, #0]
 8002698:	f8a1 008a 	strh.w	r0, [r1, #138]	@ 0x8a
 800269c:	4611      	mov	r1, r2
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	3104      	adds	r1, #4
 80026a2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 80026a6:	e02e      	b.n	8002706 <_Z12makeTxPacketP11TransmitterP8TxPacket+0xe6>
		} else if (settings->buffer[0][i] == '0') {
 80026a8:	89fb      	ldrh	r3, [r7, #14]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	4413      	add	r3, r2
 80026ae:	7c5b      	ldrb	r3, [r3, #17]
 80026b0:	2b30      	cmp	r3, #48	@ 0x30
 80026b2:	d116      	bne.n	80026e2 <_Z12makeTxPacketP11TransmitterP8TxPacket+0xc2>
			packet->dma_buffer[packet->dma_len++] =
				settings->invert_logic ? settings->t_short : settings->t_long;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <_Z12makeTxPacketP11TransmitterP8TxPacket+0xa2>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	885b      	ldrh	r3, [r3, #2]
 80026c0:	e001      	b.n	80026c6 <_Z12makeTxPacketP11TransmitterP8TxPacket+0xa6>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	889b      	ldrh	r3, [r3, #4]
			packet->dma_buffer[packet->dma_len++] =
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	f8b2 208a 	ldrh.w	r2, [r2, #138]	@ 0x8a
 80026cc:	1c51      	adds	r1, r2, #1
 80026ce:	b288      	uxth	r0, r1
 80026d0:	6839      	ldr	r1, [r7, #0]
 80026d2:	f8a1 008a 	strh.w	r0, [r1, #138]	@ 0x8a
 80026d6:	4611      	mov	r1, r2
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	3104      	adds	r1, #4
 80026dc:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 80026e0:	e011      	b.n	8002706 <_Z12makeTxPacketP11TransmitterP8TxPacket+0xe6>
		} else {
			packet->dma_len = 0;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
			memset(packet->dma_buffer, 0, sizeof(packet->dma_buffer));
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	3308      	adds	r3, #8
 80026ee:	2282      	movs	r2, #130	@ 0x82
 80026f0:	2100      	movs	r1, #0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f00a f855 	bl	800c7a2 <memset>

			status |= (TX_PREP_FAILED << 8);
 80026f8:	4b11      	ldr	r3, [pc, #68]	@ (8002740 <_Z12makeTxPacketP11TransmitterP8TxPacket+0x120>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002700:	4a0f      	ldr	r2, [pc, #60]	@ (8002740 <_Z12makeTxPacketP11TransmitterP8TxPacket+0x120>)
 8002702:	6013      	str	r3, [r2, #0]
			return;
 8002704:	e019      	b.n	800273a <_Z12makeTxPacketP11TransmitterP8TxPacket+0x11a>
	for (uint16_t i = 0; i < strlen(settings->buffer[0]); i++) {
 8002706:	89fb      	ldrh	r3, [r7, #14]
 8002708:	3301      	adds	r3, #1
 800270a:	81fb      	strh	r3, [r7, #14]
 800270c:	89fc      	ldrh	r4, [r7, #14]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3311      	adds	r3, #17
 8002712:	4618      	mov	r0, r3
 8002714:	f7fd fd24 	bl	8000160 <strlen>
 8002718:	4603      	mov	r3, r0
 800271a:	429c      	cmp	r4, r3
 800271c:	d3a7      	bcc.n	800266e <_Z12makeTxPacketP11TransmitterP8TxPacket+0x4e>
		}
	}

	// add final bit to account for "stop" condition
	packet->dma_buffer[packet->dma_len++] = 0;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	b291      	uxth	r1, r2
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	f8a2 108a 	strh.w	r1, [r2, #138]	@ 0x8a
 800272e:	461a      	mov	r2, r3
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	3204      	adds	r2, #4
 8002734:	2100      	movs	r1, #0
 8002736:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	bd90      	pop	{r4, r7, pc}
 8002740:	20000610 	.word	0x20000610

08002744 <_Z9processTxP11TransmitterP8TxPacket>:

/*
 * Handle the transmission dispatch process based on frames and burst completion for a packet.
 */
void processTx(Transmitter* settings, TxPacket* packet) {
 8002744:	b590      	push	{r4, r7, lr}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
	uint32_t now;
	if (packet->burst_complete) {
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	785b      	ldrb	r3, [r3, #1]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d03e      	beq.n	80027d4 <_Z9processTxP11TransmitterP8TxPacket+0x90>
		// any prior transmission has completed
		now = HAL_GetTick();
 8002756:	f000 fb71 	bl	8002e3c <HAL_GetTick>
 800275a:	60f8      	str	r0, [r7, #12]
		if (now < packet->last_frame_time_ms || (now - packet->last_frame_time_ms) * 1000 > settings->burst_delay_us) { // inter-burst delay elapsed
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	429a      	cmp	r2, r3
 8002764:	d30c      	bcc.n	8002780 <_Z9processTxP11TransmitterP8TxPacket+0x3c>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002772:	fb03 f202 	mul.w	r2, r3, r2
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	429a      	cmp	r2, r3
 800277c:	f240 8096 	bls.w	80028ac <_Z9processTxP11TransmitterP8TxPacket+0x168>
			// next burst needs to be queued
			makeTxPacket(settings, packet);
 8002780:	6839      	ldr	r1, [r7, #0]
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff ff4c 	bl	8002620 <_Z12makeTxPacketP11TransmitterP8TxPacket>

			// check if there's a no-data or failed prep flag
			if ((status >> 8) & (TX_BUFFER_EMPTY | TX_PREP_FAILED)) {
 8002788:	4b4b      	ldr	r3, [pc, #300]	@ (80028b8 <_Z9processTxP11TransmitterP8TxPacket+0x174>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002790:	2b00      	cmp	r3, #0
 8002792:	f040 808d 	bne.w	80028b0 <_Z9processTxP11TransmitterP8TxPacket+0x16c>
				return;
			}

			// start the burst transmission
			packet->burst_complete = false;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2200      	movs	r2, #0
 800279a:	705a      	strb	r2, [r3, #1]
			status &= (TX_COMPLETE << 8); // set status flag as tx incomplete
 800279c:	4b46      	ldr	r3, [pc, #280]	@ (80028b8 <_Z9processTxP11TransmitterP8TxPacket+0x174>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a4:	4a44      	ldr	r2, [pc, #272]	@ (80028b8 <_Z9processTxP11TransmitterP8TxPacket+0x174>)
 80027a6:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TX_ACT_GPIO_Port, TX_ACT_Pin, GPIO_PIN_SET);
 80027a8:	2201      	movs	r2, #1
 80027aa:	2180      	movs	r1, #128	@ 0x80
 80027ac:	4843      	ldr	r0, [pc, #268]	@ (80028bc <_Z9processTxP11TransmitterP8TxPacket+0x178>)
 80027ae:	f001 f882 	bl	80038b6 <HAL_GPIO_WritePin>

			// disable receive radio before transmission starts
			if (rx.mode == 2 && isRxEnabled()) {
 80027b2:	4b43      	ldr	r3, [pc, #268]	@ (80028c0 <_Z9processTxP11TransmitterP8TxPacket+0x17c>)
 80027b4:	789b      	ldrb	r3, [r3, #2]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d106      	bne.n	80027c8 <_Z9processTxP11TransmitterP8TxPacket+0x84>
 80027ba:	f7ff fa99 	bl	8001cf0 <_Z11isRxEnabledv>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <_Z9processTxP11TransmitterP8TxPacket+0x84>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <_Z9processTxP11TransmitterP8TxPacket+0x86>
 80027c8:	2300      	movs	r3, #0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <_Z9processTxP11TransmitterP8TxPacket+0x8e>
				disableRx();
 80027ce:	f7ff faab 	bl	8001d28 <_Z9disableRxv>
			if (rx.mode == 2 && isRxEnabled()) {
 80027d2:	bf00      	nop
			// inter-burst timeout hasn't happened, so return;
			return;
		}
	}

	if (packet->frame_complete) {
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d06a      	beq.n	80028b2 <_Z9processTxP11TransmitterP8TxPacket+0x16e>
		// a frame transmission is complete within a burst
		now = HAL_GetTick();
 80027dc:	f000 fb2e 	bl	8002e3c <HAL_GetTick>
 80027e0:	60f8      	str	r0, [r7, #12]
		if (now < packet->last_frame_time_ms) {
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d204      	bcs.n	80027f6 <_Z9processTxP11TransmitterP8TxPacket+0xb2>
			// tick counter has rolled over. Adjust
			packet->last_frame_time_ms = UINT32_MAX - packet->last_frame_time_ms;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	43da      	mvns	r2, r3
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	605a      	str	r2, [r3, #4]
		}

		if (packet->frames_sent > settings->frame_repeat) {
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	789a      	ldrb	r2, [r3, #2]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	7c1b      	ldrb	r3, [r3, #16]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d921      	bls.n	8002846 <_Z9processTxP11TransmitterP8TxPacket+0x102>
			// the number of frames sent equals the desired burst amount
			packet->burst_complete = true;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2201      	movs	r2, #1
 8002806:	705a      	strb	r2, [r3, #1]
			status |= (TX_COMPLETE << 8); // indicate transmission complete
 8002808:	4b2b      	ldr	r3, [pc, #172]	@ (80028b8 <_Z9processTxP11TransmitterP8TxPacket+0x174>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002810:	4a29      	ldr	r2, [pc, #164]	@ (80028b8 <_Z9processTxP11TransmitterP8TxPacket+0x174>)
 8002812:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TX_ACT_GPIO_Port, TX_ACT_Pin, GPIO_PIN_RESET);
 8002814:	2200      	movs	r2, #0
 8002816:	2180      	movs	r1, #128	@ 0x80
 8002818:	4828      	ldr	r0, [pc, #160]	@ (80028bc <_Z9processTxP11TransmitterP8TxPacket+0x178>)
 800281a:	f001 f84c 	bl	80038b6 <HAL_GPIO_WritePin>

			// re-enable the receive radio if rx mode is
			if (rx.mode == 2 && !isRxEnabled()) {
 800281e:	4b28      	ldr	r3, [pc, #160]	@ (80028c0 <_Z9processTxP11TransmitterP8TxPacket+0x17c>)
 8002820:	789b      	ldrb	r3, [r3, #2]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d109      	bne.n	800283a <_Z9processTxP11TransmitterP8TxPacket+0xf6>
 8002826:	f7ff fa63 	bl	8001cf0 <_Z11isRxEnabledv>
 800282a:	4603      	mov	r3, r0
 800282c:	f083 0301 	eor.w	r3, r3, #1
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <_Z9processTxP11TransmitterP8TxPacket+0xf6>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <_Z9processTxP11TransmitterP8TxPacket+0xf8>
 800283a:	2300      	movs	r3, #0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d038      	beq.n	80028b2 <_Z9processTxP11TransmitterP8TxPacket+0x16e>
				// enable radio if it's currently disabled
				enableRx();
 8002840:	f7ff fa66 	bl	8001d10 <_Z8enableRxv>
 8002844:	e035      	b.n	80028b2 <_Z9processTxP11TransmitterP8TxPacket+0x16e>
			}
		} else if (now < packet->last_frame_time_ms || now - packet->last_frame_time_ms >= (settings->frame_delay_us / (float) 1000)) {
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	429a      	cmp	r2, r3
 800284e:	d319      	bcc.n	8002884 <_Z9processTxP11TransmitterP8TxPacket+0x140>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	4618      	mov	r0, r3
 800285a:	f7fd fd3f 	bl	80002dc <__aeabi_ui2f>
 800285e:	4604      	mov	r4, r0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	4618      	mov	r0, r3
 8002866:	f7fd fd39 	bl	80002dc <__aeabi_ui2f>
 800286a:	4603      	mov	r3, r0
 800286c:	4915      	ldr	r1, [pc, #84]	@ (80028c4 <_Z9processTxP11TransmitterP8TxPacket+0x180>)
 800286e:	4618      	mov	r0, r3
 8002870:	f7fd fe40 	bl	80004f4 <__aeabi_fdiv>
 8002874:	4603      	mov	r3, r0
 8002876:	4619      	mov	r1, r3
 8002878:	4620      	mov	r0, r4
 800287a:	f7fd ff39 	bl	80006f0 <__aeabi_fcmpge>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d016      	beq.n	80028b2 <_Z9processTxP11TransmitterP8TxPacket+0x16e>
			// an adequate delay has elapsed between frames, trigger the next transmission
			// (tick, even after adjustment for rollover is earlier than last time or delta elapsed)

			// set frame complete false, increment number of frames sent, and trigger transmit
			packet->frame_complete = false;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	2200      	movs	r2, #0
 8002888:	701a      	strb	r2, [r3, #0]
			packet->frames_sent++;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	789b      	ldrb	r3, [r3, #2]
 800288e:	3301      	adds	r3, #1
 8002890:	b2da      	uxtb	r2, r3
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	709a      	strb	r2, [r3, #2]

			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *) packet->dma_buffer, packet->dma_len);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	f103 0208 	add.w	r2, r3, #8
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 80028a2:	2100      	movs	r1, #0
 80028a4:	4808      	ldr	r0, [pc, #32]	@ (80028c8 <_Z9processTxP11TransmitterP8TxPacket+0x184>)
 80028a6:	f003 fb0d 	bl	8005ec4 <HAL_TIM_PWM_Start_DMA>
 80028aa:	e002      	b.n	80028b2 <_Z9processTxP11TransmitterP8TxPacket+0x16e>
			return;
 80028ac:	bf00      	nop
 80028ae:	e000      	b.n	80028b2 <_Z9processTxP11TransmitterP8TxPacket+0x16e>
				return;
 80028b0:	bf00      	nop
		}
	}
}
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd90      	pop	{r4, r7, pc}
 80028b8:	20000610 	.word	0x20000610
 80028bc:	40010c00 	.word	0x40010c00
 80028c0:	20000ef8 	.word	0x20000ef8
 80028c4:	447a0000 	.word	0x447a0000
 80028c8:	20000614 	.word	0x20000614

080028cc <HAL_TIM_PWM_PulseFinishedCallback>:
/*
 * Interrupt callback to execute when transmit data is complete
 *  - i.e. last data has been sent to register - so data needs to be n+1, where
 *  	   final data is a null value; null value will be first pulse sent.
 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1) {
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002908 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d10f      	bne.n	80028fe <HAL_TIM_PWM_PulseFinishedCallback+0x32>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	7f1b      	ldrb	r3, [r3, #28]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d10b      	bne.n	80028fe <HAL_TIM_PWM_PulseFinishedCallback+0x32>
			HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80028e6:	2100      	movs	r1, #0
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f003 fc8d 	bl	8006208 <HAL_TIM_PWM_Stop_DMA>
			data.frame_complete = true;
 80028ee:	4b07      	ldr	r3, [pc, #28]	@ (800290c <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	701a      	strb	r2, [r3, #0]
			data.last_frame_time_ms = HAL_GetTick();
 80028f4:	f000 faa2 	bl	8002e3c <HAL_GetTick>
 80028f8:	4603      	mov	r3, r0
 80028fa:	4a04      	ldr	r2, [pc, #16]	@ (800290c <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 80028fc:	6053      	str	r3, [r2, #4]
		}
	}
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40012c00 	.word	0x40012c00
 800290c:	20001e60 	.word	0x20001e60

08002910 <_Z41__static_initialization_and_destruction_0v>:
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
Transmitter tx;
 8002914:	4803      	ldr	r0, [pc, #12]	@ (8002924 <_Z41__static_initialization_and_destruction_0v+0x14>)
 8002916:	f7ff fe19 	bl	800254c <_ZN11TransmitterC1Ev>
TxPacket data;
 800291a:	4803      	ldr	r0, [pc, #12]	@ (8002928 <_Z41__static_initialization_and_destruction_0v+0x18>)
 800291c:	f7ff fe3a 	bl	8002594 <_ZN8TxPacketC1Ev>
}
 8002920:	bf00      	nop
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20001d0c 	.word	0x20001d0c
 8002928:	20001e60 	.word	0x20001e60

0800292c <_GLOBAL__sub_I_tx>:
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
 8002930:	f7ff ffee 	bl	8002910 <_Z41__static_initialization_and_destruction_0v>
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800293e:	4b15      	ldr	r3, [pc, #84]	@ (8002994 <HAL_MspInit+0x5c>)
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	4a14      	ldr	r2, [pc, #80]	@ (8002994 <HAL_MspInit+0x5c>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6193      	str	r3, [r2, #24]
 800294a:	4b12      	ldr	r3, [pc, #72]	@ (8002994 <HAL_MspInit+0x5c>)
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002956:	4b0f      	ldr	r3, [pc, #60]	@ (8002994 <HAL_MspInit+0x5c>)
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	4a0e      	ldr	r2, [pc, #56]	@ (8002994 <HAL_MspInit+0x5c>)
 800295c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002960:	61d3      	str	r3, [r2, #28]
 8002962:	4b0c      	ldr	r3, [pc, #48]	@ (8002994 <HAL_MspInit+0x5c>)
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800296a:	607b      	str	r3, [r7, #4]
 800296c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800296e:	4b0a      	ldr	r3, [pc, #40]	@ (8002998 <HAL_MspInit+0x60>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	4a04      	ldr	r2, [pc, #16]	@ (8002998 <HAL_MspInit+0x60>)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800298a:	bf00      	nop
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr
 8002994:	40021000 	.word	0x40021000
 8002998:	40010000 	.word	0x40010000

0800299c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08a      	sub	sp, #40	@ 0x28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	f107 0318 	add.w	r3, r7, #24
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a37      	ldr	r2, [pc, #220]	@ (8002a94 <HAL_TIM_Base_MspInit+0xf8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d135      	bne.n	8002a28 <HAL_TIM_Base_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029bc:	4b36      	ldr	r3, [pc, #216]	@ (8002a98 <HAL_TIM_Base_MspInit+0xfc>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	4a35      	ldr	r2, [pc, #212]	@ (8002a98 <HAL_TIM_Base_MspInit+0xfc>)
 80029c2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029c6:	6193      	str	r3, [r2, #24]
 80029c8:	4b33      	ldr	r3, [pc, #204]	@ (8002a98 <HAL_TIM_Base_MspInit+0xfc>)
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80029d4:	4b31      	ldr	r3, [pc, #196]	@ (8002a9c <HAL_TIM_Base_MspInit+0x100>)
 80029d6:	4a32      	ldr	r2, [pc, #200]	@ (8002aa0 <HAL_TIM_Base_MspInit+0x104>)
 80029d8:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029da:	4b30      	ldr	r3, [pc, #192]	@ (8002a9c <HAL_TIM_Base_MspInit+0x100>)
 80029dc:	2210      	movs	r2, #16
 80029de:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80029e0:	4b2e      	ldr	r3, [pc, #184]	@ (8002a9c <HAL_TIM_Base_MspInit+0x100>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80029e6:	4b2d      	ldr	r3, [pc, #180]	@ (8002a9c <HAL_TIM_Base_MspInit+0x100>)
 80029e8:	2280      	movs	r2, #128	@ 0x80
 80029ea:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029ec:	4b2b      	ldr	r3, [pc, #172]	@ (8002a9c <HAL_TIM_Base_MspInit+0x100>)
 80029ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029f2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029f4:	4b29      	ldr	r3, [pc, #164]	@ (8002a9c <HAL_TIM_Base_MspInit+0x100>)
 80029f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029fa:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80029fc:	4b27      	ldr	r3, [pc, #156]	@ (8002a9c <HAL_TIM_Base_MspInit+0x100>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002a02:	4b26      	ldr	r3, [pc, #152]	@ (8002a9c <HAL_TIM_Base_MspInit+0x100>)
 8002a04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a08:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002a0a:	4824      	ldr	r0, [pc, #144]	@ (8002a9c <HAL_TIM_Base_MspInit+0x100>)
 8002a0c:	f000 fb52 	bl	80030b4 <HAL_DMA_Init>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_TIM_Base_MspInit+0x7e>
    {
      Error_Handler();
 8002a16:	f7ff f895 	bl	8001b44 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8002a9c <HAL_TIM_Base_MspInit+0x100>)
 8002a1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a20:	4a1e      	ldr	r2, [pc, #120]	@ (8002a9c <HAL_TIM_Base_MspInit+0x100>)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6253      	str	r3, [r2, #36]	@ 0x24
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a26:	e030      	b.n	8002a8a <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a30:	d12b      	bne.n	8002a8a <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a32:	4b19      	ldr	r3, [pc, #100]	@ (8002a98 <HAL_TIM_Base_MspInit+0xfc>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	4a18      	ldr	r2, [pc, #96]	@ (8002a98 <HAL_TIM_Base_MspInit+0xfc>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	61d3      	str	r3, [r2, #28]
 8002a3e:	4b16      	ldr	r3, [pc, #88]	@ (8002a98 <HAL_TIM_Base_MspInit+0xfc>)
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4a:	4b13      	ldr	r3, [pc, #76]	@ (8002a98 <HAL_TIM_Base_MspInit+0xfc>)
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	4a12      	ldr	r2, [pc, #72]	@ (8002a98 <HAL_TIM_Base_MspInit+0xfc>)
 8002a50:	f043 0304 	orr.w	r3, r3, #4
 8002a54:	6193      	str	r3, [r2, #24]
 8002a56:	4b10      	ldr	r3, [pc, #64]	@ (8002a98 <HAL_TIM_Base_MspInit+0xfc>)
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a62:	2301      	movs	r3, #1
 8002a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6e:	f107 0318 	add.w	r3, r7, #24
 8002a72:	4619      	mov	r1, r3
 8002a74:	480b      	ldr	r0, [pc, #44]	@ (8002aa4 <HAL_TIM_Base_MspInit+0x108>)
 8002a76:	f000 fd83 	bl	8003580 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	201c      	movs	r0, #28
 8002a80:	f000 fae1 	bl	8003046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a84:	201c      	movs	r0, #28
 8002a86:	f000 fafa 	bl	800307e <HAL_NVIC_EnableIRQ>
}
 8002a8a:	bf00      	nop
 8002a8c:	3728      	adds	r7, #40	@ 0x28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40012c00 	.word	0x40012c00
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	200006a4 	.word	0x200006a4
 8002aa0:	4002001c 	.word	0x4002001c
 8002aa4:	40010800 	.word	0x40010800

08002aa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab0:	f107 0310 	add.w	r3, r7, #16
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a10      	ldr	r2, [pc, #64]	@ (8002b04 <HAL_TIM_MspPostInit+0x5c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d118      	bne.n	8002afa <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8002b08 <HAL_TIM_MspPostInit+0x60>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	4a0e      	ldr	r2, [pc, #56]	@ (8002b08 <HAL_TIM_MspPostInit+0x60>)
 8002ace:	f043 0304 	orr.w	r3, r3, #4
 8002ad2:	6193      	str	r3, [r2, #24]
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b08 <HAL_TIM_MspPostInit+0x60>)
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ae0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ae4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aea:	2302      	movs	r3, #2
 8002aec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aee:	f107 0310 	add.w	r3, r7, #16
 8002af2:	4619      	mov	r1, r3
 8002af4:	4805      	ldr	r0, [pc, #20]	@ (8002b0c <HAL_TIM_MspPostInit+0x64>)
 8002af6:	f000 fd43 	bl	8003580 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002afa:	bf00      	nop
 8002afc:	3720      	adds	r7, #32
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40012c00 	.word	0x40012c00
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40010800 	.word	0x40010800

08002b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b14:	bf00      	nop
 8002b16:	e7fd      	b.n	8002b14 <NMI_Handler+0x4>

08002b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4802      	ldr	r0, [pc, #8]	@ (8002b28 <HardFault_Handler+0x10>)
 8002b20:	f003 fb72 	bl	8006208 <HAL_TIM_PWM_Stop_DMA>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b24:	bf00      	nop
 8002b26:	e7fd      	b.n	8002b24 <HardFault_Handler+0xc>
 8002b28:	20000614 	.word	0x20000614

08002b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b30:	bf00      	nop
 8002b32:	e7fd      	b.n	8002b30 <MemManage_Handler+0x4>

08002b34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b38:	bf00      	nop
 8002b3a:	e7fd      	b.n	8002b38 <BusFault_Handler+0x4>

08002b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b40:	bf00      	nop
 8002b42:	e7fd      	b.n	8002b40 <UsageFault_Handler+0x4>

08002b44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr

08002b5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b6c:	f000 f954 	bl	8002e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b70:	bf00      	nop
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002b78:	4802      	ldr	r0, [pc, #8]	@ (8002b84 <DMA1_Channel2_IRQHandler+0x10>)
 8002b7a:	f000 fbcd 	bl	8003318 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	200006a4 	.word	0x200006a4

08002b88 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002b8c:	4802      	ldr	r0, [pc, #8]	@ (8002b98 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002b8e:	f000 ffc6 	bl	8003b1e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20002c3c 	.word	0x20002c3c

08002b9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ba0:	4802      	ldr	r0, [pc, #8]	@ (8002bac <TIM2_IRQHandler+0x10>)
 8002ba2:	f003 fd5b 	bl	800665c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	2000065c 	.word	0x2000065c

08002bb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return 1;
 8002bb4:	2301      	movs	r3, #1
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr

08002bbe <_kill>:

int _kill(int pid, int sig)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bc8:	f009 fe96 	bl	800c8f8 <__errno>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2216      	movs	r2, #22
 8002bd0:	601a      	str	r2, [r3, #0]
  return -1;
 8002bd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <_exit>:

void _exit (int status)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002be6:	f04f 31ff 	mov.w	r1, #4294967295
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff ffe7 	bl	8002bbe <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bf0:	bf00      	nop
 8002bf2:	e7fd      	b.n	8002bf0 <_exit+0x12>

08002bf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	e00a      	b.n	8002c1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c06:	f3af 8000 	nop.w
 8002c0a:	4601      	mov	r1, r0
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	60ba      	str	r2, [r7, #8]
 8002c12:	b2ca      	uxtb	r2, r1
 8002c14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	dbf0      	blt.n	8002c06 <_read+0x12>
  }

  return len;
 8002c24:	687b      	ldr	r3, [r7, #4]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b086      	sub	sp, #24
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	e009      	b.n	8002c54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	60ba      	str	r2, [r7, #8]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	3301      	adds	r3, #1
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	dbf1      	blt.n	8002c40 <_write+0x12>
  }
  return len;
 8002c5c:	687b      	ldr	r3, [r7, #4]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <_close>:

int _close(int file)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c8c:	605a      	str	r2, [r3, #4]
  return 0;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <_isatty>:

int _isatty(int file)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ca2:	2301      	movs	r3, #1
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr

08002cae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b085      	sub	sp, #20
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr
	...

08002cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cd0:	4a14      	ldr	r2, [pc, #80]	@ (8002d24 <_sbrk+0x5c>)
 8002cd2:	4b15      	ldr	r3, [pc, #84]	@ (8002d28 <_sbrk+0x60>)
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cdc:	4b13      	ldr	r3, [pc, #76]	@ (8002d2c <_sbrk+0x64>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ce4:	4b11      	ldr	r3, [pc, #68]	@ (8002d2c <_sbrk+0x64>)
 8002ce6:	4a12      	ldr	r2, [pc, #72]	@ (8002d30 <_sbrk+0x68>)
 8002ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cea:	4b10      	ldr	r3, [pc, #64]	@ (8002d2c <_sbrk+0x64>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d207      	bcs.n	8002d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cf8:	f009 fdfe 	bl	800c8f8 <__errno>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	220c      	movs	r2, #12
 8002d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d02:	f04f 33ff 	mov.w	r3, #4294967295
 8002d06:	e009      	b.n	8002d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d08:	4b08      	ldr	r3, [pc, #32]	@ (8002d2c <_sbrk+0x64>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d0e:	4b07      	ldr	r3, [pc, #28]	@ (8002d2c <_sbrk+0x64>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	4a05      	ldr	r2, [pc, #20]	@ (8002d2c <_sbrk+0x64>)
 8002d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20005000 	.word	0x20005000
 8002d28:	00000f00 	.word	0x00000f00
 8002d2c:	20001eec 	.word	0x20001eec
 8002d30:	20003280 	.word	0x20003280

08002d34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr

08002d40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d40:	f7ff fff8 	bl	8002d34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d44:	480b      	ldr	r0, [pc, #44]	@ (8002d74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002d46:	490c      	ldr	r1, [pc, #48]	@ (8002d78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002d48:	4a0c      	ldr	r2, [pc, #48]	@ (8002d7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d4c:	e002      	b.n	8002d54 <LoopCopyDataInit>

08002d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d52:	3304      	adds	r3, #4

08002d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d58:	d3f9      	bcc.n	8002d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d5a:	4a09      	ldr	r2, [pc, #36]	@ (8002d80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d5c:	4c09      	ldr	r4, [pc, #36]	@ (8002d84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d60:	e001      	b.n	8002d66 <LoopFillZerobss>

08002d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d64:	3204      	adds	r2, #4

08002d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d68:	d3fb      	bcc.n	8002d62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d6a:	f009 fdcb 	bl	800c904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d6e:	f7fe fc29 	bl	80015c4 <main>
  bx lr
 8002d72:	4770      	bx	lr
  ldr r0, =_sdata
 8002d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d78:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002d7c:	0800de2c 	.word	0x0800de2c
  ldr r2, =_sbss
 8002d80:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002d84:	20003280 	.word	0x20003280

08002d88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d88:	e7fe      	b.n	8002d88 <ADC1_2_IRQHandler>
	...

08002d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d90:	4b08      	ldr	r3, [pc, #32]	@ (8002db4 <HAL_Init+0x28>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a07      	ldr	r2, [pc, #28]	@ (8002db4 <HAL_Init+0x28>)
 8002d96:	f043 0310 	orr.w	r3, r3, #16
 8002d9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d9c:	2003      	movs	r0, #3
 8002d9e:	f000 f947 	bl	8003030 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002da2:	200f      	movs	r0, #15
 8002da4:	f000 f808 	bl	8002db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002da8:	f7ff fdc6 	bl	8002938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40022000 	.word	0x40022000

08002db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dc0:	4b12      	ldr	r3, [pc, #72]	@ (8002e0c <HAL_InitTick+0x54>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4b12      	ldr	r3, [pc, #72]	@ (8002e10 <HAL_InitTick+0x58>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f95f 	bl	800309a <HAL_SYSTICK_Config>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e00e      	b.n	8002e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b0f      	cmp	r3, #15
 8002dea:	d80a      	bhi.n	8002e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dec:	2200      	movs	r2, #0
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	f04f 30ff 	mov.w	r0, #4294967295
 8002df4:	f000 f927 	bl	8003046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002df8:	4a06      	ldr	r2, [pc, #24]	@ (8002e14 <HAL_InitTick+0x5c>)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	e000      	b.n	8002e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	20000008 	.word	0x20000008
 8002e10:	20000010 	.word	0x20000010
 8002e14:	2000000c 	.word	0x2000000c

08002e18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e1c:	4b05      	ldr	r3, [pc, #20]	@ (8002e34 <HAL_IncTick+0x1c>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	4b05      	ldr	r3, [pc, #20]	@ (8002e38 <HAL_IncTick+0x20>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4413      	add	r3, r2
 8002e28:	4a03      	ldr	r2, [pc, #12]	@ (8002e38 <HAL_IncTick+0x20>)
 8002e2a:	6013      	str	r3, [r2, #0]
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr
 8002e34:	20000010 	.word	0x20000010
 8002e38:	20001ef0 	.word	0x20001ef0

08002e3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e40:	4b02      	ldr	r3, [pc, #8]	@ (8002e4c <HAL_GetTick+0x10>)
 8002e42:	681b      	ldr	r3, [r3, #0]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr
 8002e4c:	20001ef0 	.word	0x20001ef0

08002e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e58:	f7ff fff0 	bl	8002e3c <HAL_GetTick>
 8002e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e68:	d005      	beq.n	8002e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e94 <HAL_Delay+0x44>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4413      	add	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e76:	bf00      	nop
 8002e78:	f7ff ffe0 	bl	8002e3c <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d8f7      	bhi.n	8002e78 <HAL_Delay+0x28>
  {
  }
}
 8002e88:	bf00      	nop
 8002e8a:	bf00      	nop
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20000010 	.word	0x20000010

08002e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8002edc <__NVIC_SetPriorityGrouping+0x44>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ec0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eca:	4a04      	ldr	r2, [pc, #16]	@ (8002edc <__NVIC_SetPriorityGrouping+0x44>)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	60d3      	str	r3, [r2, #12]
}
 8002ed0:	bf00      	nop
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ee4:	4b04      	ldr	r3, [pc, #16]	@ (8002ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	0a1b      	lsrs	r3, r3, #8
 8002eea:	f003 0307 	and.w	r3, r3, #7
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	e000ed00 	.word	0xe000ed00

08002efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	db0b      	blt.n	8002f26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	f003 021f 	and.w	r2, r3, #31
 8002f14:	4906      	ldr	r1, [pc, #24]	@ (8002f30 <__NVIC_EnableIRQ+0x34>)
 8002f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	2001      	movs	r0, #1
 8002f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr
 8002f30:	e000e100 	.word	0xe000e100

08002f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	6039      	str	r1, [r7, #0]
 8002f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	db0a      	blt.n	8002f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	490c      	ldr	r1, [pc, #48]	@ (8002f80 <__NVIC_SetPriority+0x4c>)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	0112      	lsls	r2, r2, #4
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	440b      	add	r3, r1
 8002f58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f5c:	e00a      	b.n	8002f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	4908      	ldr	r1, [pc, #32]	@ (8002f84 <__NVIC_SetPriority+0x50>)
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	3b04      	subs	r3, #4
 8002f6c:	0112      	lsls	r2, r2, #4
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	440b      	add	r3, r1
 8002f72:	761a      	strb	r2, [r3, #24]
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	e000e100 	.word	0xe000e100
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b089      	sub	sp, #36	@ 0x24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f1c3 0307 	rsb	r3, r3, #7
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	bf28      	it	cs
 8002fa6:	2304      	movcs	r3, #4
 8002fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3304      	adds	r3, #4
 8002fae:	2b06      	cmp	r3, #6
 8002fb0:	d902      	bls.n	8002fb8 <NVIC_EncodePriority+0x30>
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	3b03      	subs	r3, #3
 8002fb6:	e000      	b.n	8002fba <NVIC_EncodePriority+0x32>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43da      	mvns	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	401a      	ands	r2, r3
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fda:	43d9      	mvns	r1, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe0:	4313      	orrs	r3, r2
         );
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3724      	adds	r7, #36	@ 0x24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ffc:	d301      	bcc.n	8003002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ffe:	2301      	movs	r3, #1
 8003000:	e00f      	b.n	8003022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003002:	4a0a      	ldr	r2, [pc, #40]	@ (800302c <SysTick_Config+0x40>)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3b01      	subs	r3, #1
 8003008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800300a:	210f      	movs	r1, #15
 800300c:	f04f 30ff 	mov.w	r0, #4294967295
 8003010:	f7ff ff90 	bl	8002f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003014:	4b05      	ldr	r3, [pc, #20]	@ (800302c <SysTick_Config+0x40>)
 8003016:	2200      	movs	r2, #0
 8003018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800301a:	4b04      	ldr	r3, [pc, #16]	@ (800302c <SysTick_Config+0x40>)
 800301c:	2207      	movs	r2, #7
 800301e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	e000e010 	.word	0xe000e010

08003030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff ff2d 	bl	8002e98 <__NVIC_SetPriorityGrouping>
}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003046:	b580      	push	{r7, lr}
 8003048:	b086      	sub	sp, #24
 800304a:	af00      	add	r7, sp, #0
 800304c:	4603      	mov	r3, r0
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
 8003052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003058:	f7ff ff42 	bl	8002ee0 <__NVIC_GetPriorityGrouping>
 800305c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	68b9      	ldr	r1, [r7, #8]
 8003062:	6978      	ldr	r0, [r7, #20]
 8003064:	f7ff ff90 	bl	8002f88 <NVIC_EncodePriority>
 8003068:	4602      	mov	r2, r0
 800306a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306e:	4611      	mov	r1, r2
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff ff5f 	bl	8002f34 <__NVIC_SetPriority>
}
 8003076:	bf00      	nop
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	4603      	mov	r3, r0
 8003086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff ff35 	bl	8002efc <__NVIC_EnableIRQ>
}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff ffa2 	bl	8002fec <SysTick_Config>
 80030a8:	4603      	mov	r3, r0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e043      	b.n	8003152 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	4b22      	ldr	r3, [pc, #136]	@ (800315c <HAL_DMA_Init+0xa8>)
 80030d2:	4413      	add	r3, r2
 80030d4:	4a22      	ldr	r2, [pc, #136]	@ (8003160 <HAL_DMA_Init+0xac>)
 80030d6:	fba2 2303 	umull	r2, r3, r2, r3
 80030da:	091b      	lsrs	r3, r3, #4
 80030dc:	009a      	lsls	r2, r3, #2
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003164 <HAL_DMA_Init+0xb0>)
 80030e6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030fe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003102:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800310c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003118:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003124:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4313      	orrs	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr
 800315c:	bffdfff8 	.word	0xbffdfff8
 8003160:	cccccccd 	.word	0xcccccccd
 8003164:	40020000 	.word	0x40020000

08003168 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
 8003174:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <HAL_DMA_Start_IT+0x20>
 8003184:	2302      	movs	r3, #2
 8003186:	e04b      	b.n	8003220 <HAL_DMA_Start_IT+0xb8>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b01      	cmp	r3, #1
 800319a:	d13a      	bne.n	8003212 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0201 	bic.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 f9af 	bl	8003524 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d008      	beq.n	80031e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f042 020e 	orr.w	r2, r2, #14
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	e00f      	b.n	8003200 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0204 	bic.w	r2, r2, #4
 80031ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 020a 	orr.w	r2, r2, #10
 80031fe:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	e005      	b.n	800321e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800321a:	2302      	movs	r3, #2
 800321c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800321e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d005      	beq.n	800324c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2204      	movs	r2, #4
 8003244:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	73fb      	strb	r3, [r7, #15]
 800324a:	e051      	b.n	80032f0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 020e 	bic.w	r2, r2, #14
 800325a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0201 	bic.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a22      	ldr	r2, [pc, #136]	@ (80032fc <HAL_DMA_Abort_IT+0xd4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d029      	beq.n	80032ca <HAL_DMA_Abort_IT+0xa2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a21      	ldr	r2, [pc, #132]	@ (8003300 <HAL_DMA_Abort_IT+0xd8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d022      	beq.n	80032c6 <HAL_DMA_Abort_IT+0x9e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a1f      	ldr	r2, [pc, #124]	@ (8003304 <HAL_DMA_Abort_IT+0xdc>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d01a      	beq.n	80032c0 <HAL_DMA_Abort_IT+0x98>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1e      	ldr	r2, [pc, #120]	@ (8003308 <HAL_DMA_Abort_IT+0xe0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d012      	beq.n	80032ba <HAL_DMA_Abort_IT+0x92>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a1c      	ldr	r2, [pc, #112]	@ (800330c <HAL_DMA_Abort_IT+0xe4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d00a      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x8c>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003310 <HAL_DMA_Abort_IT+0xe8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d102      	bne.n	80032ae <HAL_DMA_Abort_IT+0x86>
 80032a8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80032ac:	e00e      	b.n	80032cc <HAL_DMA_Abort_IT+0xa4>
 80032ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032b2:	e00b      	b.n	80032cc <HAL_DMA_Abort_IT+0xa4>
 80032b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80032b8:	e008      	b.n	80032cc <HAL_DMA_Abort_IT+0xa4>
 80032ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032be:	e005      	b.n	80032cc <HAL_DMA_Abort_IT+0xa4>
 80032c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032c4:	e002      	b.n	80032cc <HAL_DMA_Abort_IT+0xa4>
 80032c6:	2310      	movs	r3, #16
 80032c8:	e000      	b.n	80032cc <HAL_DMA_Abort_IT+0xa4>
 80032ca:	2301      	movs	r3, #1
 80032cc:	4a11      	ldr	r2, [pc, #68]	@ (8003314 <HAL_DMA_Abort_IT+0xec>)
 80032ce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	4798      	blx	r3
    } 
  }
  return status;
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40020008 	.word	0x40020008
 8003300:	4002001c 	.word	0x4002001c
 8003304:	40020030 	.word	0x40020030
 8003308:	40020044 	.word	0x40020044
 800330c:	40020058 	.word	0x40020058
 8003310:	4002006c 	.word	0x4002006c
 8003314:	40020000 	.word	0x40020000

08003318 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003334:	2204      	movs	r2, #4
 8003336:	409a      	lsls	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4013      	ands	r3, r2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d04f      	beq.n	80033e0 <HAL_DMA_IRQHandler+0xc8>
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b00      	cmp	r3, #0
 8003348:	d04a      	beq.n	80033e0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0320 	and.w	r3, r3, #32
 8003354:	2b00      	cmp	r3, #0
 8003356:	d107      	bne.n	8003368 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0204 	bic.w	r2, r2, #4
 8003366:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a66      	ldr	r2, [pc, #408]	@ (8003508 <HAL_DMA_IRQHandler+0x1f0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d029      	beq.n	80033c6 <HAL_DMA_IRQHandler+0xae>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a65      	ldr	r2, [pc, #404]	@ (800350c <HAL_DMA_IRQHandler+0x1f4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d022      	beq.n	80033c2 <HAL_DMA_IRQHandler+0xaa>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a63      	ldr	r2, [pc, #396]	@ (8003510 <HAL_DMA_IRQHandler+0x1f8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d01a      	beq.n	80033bc <HAL_DMA_IRQHandler+0xa4>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a62      	ldr	r2, [pc, #392]	@ (8003514 <HAL_DMA_IRQHandler+0x1fc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d012      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x9e>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a60      	ldr	r2, [pc, #384]	@ (8003518 <HAL_DMA_IRQHandler+0x200>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00a      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x98>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a5f      	ldr	r2, [pc, #380]	@ (800351c <HAL_DMA_IRQHandler+0x204>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d102      	bne.n	80033aa <HAL_DMA_IRQHandler+0x92>
 80033a4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80033a8:	e00e      	b.n	80033c8 <HAL_DMA_IRQHandler+0xb0>
 80033aa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80033ae:	e00b      	b.n	80033c8 <HAL_DMA_IRQHandler+0xb0>
 80033b0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80033b4:	e008      	b.n	80033c8 <HAL_DMA_IRQHandler+0xb0>
 80033b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80033ba:	e005      	b.n	80033c8 <HAL_DMA_IRQHandler+0xb0>
 80033bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033c0:	e002      	b.n	80033c8 <HAL_DMA_IRQHandler+0xb0>
 80033c2:	2340      	movs	r3, #64	@ 0x40
 80033c4:	e000      	b.n	80033c8 <HAL_DMA_IRQHandler+0xb0>
 80033c6:	2304      	movs	r3, #4
 80033c8:	4a55      	ldr	r2, [pc, #340]	@ (8003520 <HAL_DMA_IRQHandler+0x208>)
 80033ca:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 8094 	beq.w	80034fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80033de:	e08e      	b.n	80034fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e4:	2202      	movs	r2, #2
 80033e6:	409a      	lsls	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d056      	beq.n	800349e <HAL_DMA_IRQHandler+0x186>
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d051      	beq.n	800349e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0320 	and.w	r3, r3, #32
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10b      	bne.n	8003420 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 020a 	bic.w	r2, r2, #10
 8003416:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a38      	ldr	r2, [pc, #224]	@ (8003508 <HAL_DMA_IRQHandler+0x1f0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d029      	beq.n	800347e <HAL_DMA_IRQHandler+0x166>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a37      	ldr	r2, [pc, #220]	@ (800350c <HAL_DMA_IRQHandler+0x1f4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d022      	beq.n	800347a <HAL_DMA_IRQHandler+0x162>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a35      	ldr	r2, [pc, #212]	@ (8003510 <HAL_DMA_IRQHandler+0x1f8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d01a      	beq.n	8003474 <HAL_DMA_IRQHandler+0x15c>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a34      	ldr	r2, [pc, #208]	@ (8003514 <HAL_DMA_IRQHandler+0x1fc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d012      	beq.n	800346e <HAL_DMA_IRQHandler+0x156>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a32      	ldr	r2, [pc, #200]	@ (8003518 <HAL_DMA_IRQHandler+0x200>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00a      	beq.n	8003468 <HAL_DMA_IRQHandler+0x150>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a31      	ldr	r2, [pc, #196]	@ (800351c <HAL_DMA_IRQHandler+0x204>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d102      	bne.n	8003462 <HAL_DMA_IRQHandler+0x14a>
 800345c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003460:	e00e      	b.n	8003480 <HAL_DMA_IRQHandler+0x168>
 8003462:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003466:	e00b      	b.n	8003480 <HAL_DMA_IRQHandler+0x168>
 8003468:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800346c:	e008      	b.n	8003480 <HAL_DMA_IRQHandler+0x168>
 800346e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003472:	e005      	b.n	8003480 <HAL_DMA_IRQHandler+0x168>
 8003474:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003478:	e002      	b.n	8003480 <HAL_DMA_IRQHandler+0x168>
 800347a:	2320      	movs	r3, #32
 800347c:	e000      	b.n	8003480 <HAL_DMA_IRQHandler+0x168>
 800347e:	2302      	movs	r3, #2
 8003480:	4a27      	ldr	r2, [pc, #156]	@ (8003520 <HAL_DMA_IRQHandler+0x208>)
 8003482:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003490:	2b00      	cmp	r3, #0
 8003492:	d034      	beq.n	80034fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800349c:	e02f      	b.n	80034fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a2:	2208      	movs	r2, #8
 80034a4:	409a      	lsls	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d028      	beq.n	8003500 <HAL_DMA_IRQHandler+0x1e8>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d023      	beq.n	8003500 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 020e 	bic.w	r2, r2, #14
 80034c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d0:	2101      	movs	r1, #1
 80034d2:	fa01 f202 	lsl.w	r2, r1, r2
 80034d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d004      	beq.n	8003500 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	4798      	blx	r3
    }
  }
  return;
 80034fe:	bf00      	nop
 8003500:	bf00      	nop
}
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40020008 	.word	0x40020008
 800350c:	4002001c 	.word	0x4002001c
 8003510:	40020030 	.word	0x40020030
 8003514:	40020044 	.word	0x40020044
 8003518:	40020058 	.word	0x40020058
 800351c:	4002006c 	.word	0x4002006c
 8003520:	40020000 	.word	0x40020000

08003524 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353a:	2101      	movs	r1, #1
 800353c:	fa01 f202 	lsl.w	r2, r1, r2
 8003540:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b10      	cmp	r3, #16
 8003550:	d108      	bne.n	8003564 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003562:	e007      	b.n	8003574 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	60da      	str	r2, [r3, #12]
}
 8003574:	bf00      	nop
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	bc80      	pop	{r7}
 800357c:	4770      	bx	lr
	...

08003580 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003580:	b480      	push	{r7}
 8003582:	b08b      	sub	sp, #44	@ 0x2c
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800358a:	2300      	movs	r3, #0
 800358c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800358e:	2300      	movs	r3, #0
 8003590:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003592:	e169      	b.n	8003868 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003594:	2201      	movs	r2, #1
 8003596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	f040 8158 	bne.w	8003862 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	4a9a      	ldr	r2, [pc, #616]	@ (8003820 <HAL_GPIO_Init+0x2a0>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d05e      	beq.n	800367a <HAL_GPIO_Init+0xfa>
 80035bc:	4a98      	ldr	r2, [pc, #608]	@ (8003820 <HAL_GPIO_Init+0x2a0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d875      	bhi.n	80036ae <HAL_GPIO_Init+0x12e>
 80035c2:	4a98      	ldr	r2, [pc, #608]	@ (8003824 <HAL_GPIO_Init+0x2a4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d058      	beq.n	800367a <HAL_GPIO_Init+0xfa>
 80035c8:	4a96      	ldr	r2, [pc, #600]	@ (8003824 <HAL_GPIO_Init+0x2a4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d86f      	bhi.n	80036ae <HAL_GPIO_Init+0x12e>
 80035ce:	4a96      	ldr	r2, [pc, #600]	@ (8003828 <HAL_GPIO_Init+0x2a8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d052      	beq.n	800367a <HAL_GPIO_Init+0xfa>
 80035d4:	4a94      	ldr	r2, [pc, #592]	@ (8003828 <HAL_GPIO_Init+0x2a8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d869      	bhi.n	80036ae <HAL_GPIO_Init+0x12e>
 80035da:	4a94      	ldr	r2, [pc, #592]	@ (800382c <HAL_GPIO_Init+0x2ac>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d04c      	beq.n	800367a <HAL_GPIO_Init+0xfa>
 80035e0:	4a92      	ldr	r2, [pc, #584]	@ (800382c <HAL_GPIO_Init+0x2ac>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d863      	bhi.n	80036ae <HAL_GPIO_Init+0x12e>
 80035e6:	4a92      	ldr	r2, [pc, #584]	@ (8003830 <HAL_GPIO_Init+0x2b0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d046      	beq.n	800367a <HAL_GPIO_Init+0xfa>
 80035ec:	4a90      	ldr	r2, [pc, #576]	@ (8003830 <HAL_GPIO_Init+0x2b0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d85d      	bhi.n	80036ae <HAL_GPIO_Init+0x12e>
 80035f2:	2b12      	cmp	r3, #18
 80035f4:	d82a      	bhi.n	800364c <HAL_GPIO_Init+0xcc>
 80035f6:	2b12      	cmp	r3, #18
 80035f8:	d859      	bhi.n	80036ae <HAL_GPIO_Init+0x12e>
 80035fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003600 <HAL_GPIO_Init+0x80>)
 80035fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003600:	0800367b 	.word	0x0800367b
 8003604:	08003655 	.word	0x08003655
 8003608:	08003667 	.word	0x08003667
 800360c:	080036a9 	.word	0x080036a9
 8003610:	080036af 	.word	0x080036af
 8003614:	080036af 	.word	0x080036af
 8003618:	080036af 	.word	0x080036af
 800361c:	080036af 	.word	0x080036af
 8003620:	080036af 	.word	0x080036af
 8003624:	080036af 	.word	0x080036af
 8003628:	080036af 	.word	0x080036af
 800362c:	080036af 	.word	0x080036af
 8003630:	080036af 	.word	0x080036af
 8003634:	080036af 	.word	0x080036af
 8003638:	080036af 	.word	0x080036af
 800363c:	080036af 	.word	0x080036af
 8003640:	080036af 	.word	0x080036af
 8003644:	0800365d 	.word	0x0800365d
 8003648:	08003671 	.word	0x08003671
 800364c:	4a79      	ldr	r2, [pc, #484]	@ (8003834 <HAL_GPIO_Init+0x2b4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d013      	beq.n	800367a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003652:	e02c      	b.n	80036ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	623b      	str	r3, [r7, #32]
          break;
 800365a:	e029      	b.n	80036b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	3304      	adds	r3, #4
 8003662:	623b      	str	r3, [r7, #32]
          break;
 8003664:	e024      	b.n	80036b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	3308      	adds	r3, #8
 800366c:	623b      	str	r3, [r7, #32]
          break;
 800366e:	e01f      	b.n	80036b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	330c      	adds	r3, #12
 8003676:	623b      	str	r3, [r7, #32]
          break;
 8003678:	e01a      	b.n	80036b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d102      	bne.n	8003688 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003682:	2304      	movs	r3, #4
 8003684:	623b      	str	r3, [r7, #32]
          break;
 8003686:	e013      	b.n	80036b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d105      	bne.n	800369c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003690:	2308      	movs	r3, #8
 8003692:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69fa      	ldr	r2, [r7, #28]
 8003698:	611a      	str	r2, [r3, #16]
          break;
 800369a:	e009      	b.n	80036b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800369c:	2308      	movs	r3, #8
 800369e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69fa      	ldr	r2, [r7, #28]
 80036a4:	615a      	str	r2, [r3, #20]
          break;
 80036a6:	e003      	b.n	80036b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80036a8:	2300      	movs	r3, #0
 80036aa:	623b      	str	r3, [r7, #32]
          break;
 80036ac:	e000      	b.n	80036b0 <HAL_GPIO_Init+0x130>
          break;
 80036ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2bff      	cmp	r3, #255	@ 0xff
 80036b4:	d801      	bhi.n	80036ba <HAL_GPIO_Init+0x13a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	e001      	b.n	80036be <HAL_GPIO_Init+0x13e>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3304      	adds	r3, #4
 80036be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2bff      	cmp	r3, #255	@ 0xff
 80036c4:	d802      	bhi.n	80036cc <HAL_GPIO_Init+0x14c>
 80036c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	e002      	b.n	80036d2 <HAL_GPIO_Init+0x152>
 80036cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ce:	3b08      	subs	r3, #8
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	210f      	movs	r1, #15
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	fa01 f303 	lsl.w	r3, r1, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	401a      	ands	r2, r3
 80036e4:	6a39      	ldr	r1, [r7, #32]
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ec:	431a      	orrs	r2, r3
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 80b1 	beq.w	8003862 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003700:	4b4d      	ldr	r3, [pc, #308]	@ (8003838 <HAL_GPIO_Init+0x2b8>)
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	4a4c      	ldr	r2, [pc, #304]	@ (8003838 <HAL_GPIO_Init+0x2b8>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	6193      	str	r3, [r2, #24]
 800370c:	4b4a      	ldr	r3, [pc, #296]	@ (8003838 <HAL_GPIO_Init+0x2b8>)
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003718:	4a48      	ldr	r2, [pc, #288]	@ (800383c <HAL_GPIO_Init+0x2bc>)
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	089b      	lsrs	r3, r3, #2
 800371e:	3302      	adds	r3, #2
 8003720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003724:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	220f      	movs	r2, #15
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43db      	mvns	r3, r3
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4013      	ands	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a40      	ldr	r2, [pc, #256]	@ (8003840 <HAL_GPIO_Init+0x2c0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d013      	beq.n	800376c <HAL_GPIO_Init+0x1ec>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a3f      	ldr	r2, [pc, #252]	@ (8003844 <HAL_GPIO_Init+0x2c4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d00d      	beq.n	8003768 <HAL_GPIO_Init+0x1e8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a3e      	ldr	r2, [pc, #248]	@ (8003848 <HAL_GPIO_Init+0x2c8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d007      	beq.n	8003764 <HAL_GPIO_Init+0x1e4>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a3d      	ldr	r2, [pc, #244]	@ (800384c <HAL_GPIO_Init+0x2cc>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d101      	bne.n	8003760 <HAL_GPIO_Init+0x1e0>
 800375c:	2303      	movs	r3, #3
 800375e:	e006      	b.n	800376e <HAL_GPIO_Init+0x1ee>
 8003760:	2304      	movs	r3, #4
 8003762:	e004      	b.n	800376e <HAL_GPIO_Init+0x1ee>
 8003764:	2302      	movs	r3, #2
 8003766:	e002      	b.n	800376e <HAL_GPIO_Init+0x1ee>
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <HAL_GPIO_Init+0x1ee>
 800376c:	2300      	movs	r3, #0
 800376e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003770:	f002 0203 	and.w	r2, r2, #3
 8003774:	0092      	lsls	r2, r2, #2
 8003776:	4093      	lsls	r3, r2
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800377e:	492f      	ldr	r1, [pc, #188]	@ (800383c <HAL_GPIO_Init+0x2bc>)
 8003780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003782:	089b      	lsrs	r3, r3, #2
 8003784:	3302      	adds	r3, #2
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d006      	beq.n	80037a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003798:	4b2d      	ldr	r3, [pc, #180]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	492c      	ldr	r1, [pc, #176]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	608b      	str	r3, [r1, #8]
 80037a4:	e006      	b.n	80037b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	4928      	ldr	r1, [pc, #160]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d006      	beq.n	80037ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037c0:	4b23      	ldr	r3, [pc, #140]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	4922      	ldr	r1, [pc, #136]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60cb      	str	r3, [r1, #12]
 80037cc:	e006      	b.n	80037dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037ce:	4b20      	ldr	r3, [pc, #128]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	43db      	mvns	r3, r3
 80037d6:	491e      	ldr	r1, [pc, #120]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037d8:	4013      	ands	r3, r2
 80037da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d006      	beq.n	80037f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80037e8:	4b19      	ldr	r3, [pc, #100]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	4918      	ldr	r1, [pc, #96]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	604b      	str	r3, [r1, #4]
 80037f4:	e006      	b.n	8003804 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037f6:	4b16      	ldr	r3, [pc, #88]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	43db      	mvns	r3, r3
 80037fe:	4914      	ldr	r1, [pc, #80]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 8003800:	4013      	ands	r3, r2
 8003802:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d021      	beq.n	8003854 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003810:	4b0f      	ldr	r3, [pc, #60]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	490e      	ldr	r1, [pc, #56]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	4313      	orrs	r3, r2
 800381a:	600b      	str	r3, [r1, #0]
 800381c:	e021      	b.n	8003862 <HAL_GPIO_Init+0x2e2>
 800381e:	bf00      	nop
 8003820:	10320000 	.word	0x10320000
 8003824:	10310000 	.word	0x10310000
 8003828:	10220000 	.word	0x10220000
 800382c:	10210000 	.word	0x10210000
 8003830:	10120000 	.word	0x10120000
 8003834:	10110000 	.word	0x10110000
 8003838:	40021000 	.word	0x40021000
 800383c:	40010000 	.word	0x40010000
 8003840:	40010800 	.word	0x40010800
 8003844:	40010c00 	.word	0x40010c00
 8003848:	40011000 	.word	0x40011000
 800384c:	40011400 	.word	0x40011400
 8003850:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003854:	4b0b      	ldr	r3, [pc, #44]	@ (8003884 <HAL_GPIO_Init+0x304>)
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	43db      	mvns	r3, r3
 800385c:	4909      	ldr	r1, [pc, #36]	@ (8003884 <HAL_GPIO_Init+0x304>)
 800385e:	4013      	ands	r3, r2
 8003860:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003864:	3301      	adds	r3, #1
 8003866:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386e:	fa22 f303 	lsr.w	r3, r2, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	f47f ae8e 	bne.w	8003594 <HAL_GPIO_Init+0x14>
  }
}
 8003878:	bf00      	nop
 800387a:	bf00      	nop
 800387c:	372c      	adds	r7, #44	@ 0x2c
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr
 8003884:	40010400 	.word	0x40010400

08003888 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	887b      	ldrh	r3, [r7, #2]
 800389a:	4013      	ands	r3, r2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038a0:	2301      	movs	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]
 80038a4:	e001      	b.n	80038aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038a6:	2300      	movs	r3, #0
 80038a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr

080038b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	460b      	mov	r3, r1
 80038c0:	807b      	strh	r3, [r7, #2]
 80038c2:	4613      	mov	r3, r2
 80038c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038c6:	787b      	ldrb	r3, [r7, #1]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038cc:	887a      	ldrh	r2, [r7, #2]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038d2:	e003      	b.n	80038dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038d4:	887b      	ldrh	r3, [r7, #2]
 80038d6:	041a      	lsls	r2, r3, #16
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	611a      	str	r2, [r3, #16]
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr

080038e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0e8      	b.n	8003aca <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d106      	bne.n	8003912 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f008 f951 	bl	800bbb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2203      	movs	r2, #3
 8003916:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f004 f85f 	bl	80079e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6818      	ldr	r0, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3304      	adds	r3, #4
 8003932:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003934:	f004 f835 	bl	80079a2 <USB_CoreInit>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d005      	beq.n	800394a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2202      	movs	r2, #2
 8003942:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e0bf      	b.n	8003aca <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2100      	movs	r1, #0
 8003950:	4618      	mov	r0, r3
 8003952:	f004 f863 	bl	8007a1c <USB_SetCurrentMode>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0b0      	b.n	8003aca <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003968:	2300      	movs	r3, #0
 800396a:	73fb      	strb	r3, [r7, #15]
 800396c:	e03e      	b.n	80039ec <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800396e:	7bfa      	ldrb	r2, [r7, #15]
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	440b      	add	r3, r1
 800397c:	3311      	adds	r3, #17
 800397e:	2201      	movs	r2, #1
 8003980:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003982:	7bfa      	ldrb	r2, [r7, #15]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	440b      	add	r3, r1
 8003990:	3310      	adds	r3, #16
 8003992:	7bfa      	ldrb	r2, [r7, #15]
 8003994:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003996:	7bfa      	ldrb	r2, [r7, #15]
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	440b      	add	r3, r1
 80039a4:	3313      	adds	r3, #19
 80039a6:	2200      	movs	r2, #0
 80039a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039aa:	7bfa      	ldrb	r2, [r7, #15]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	440b      	add	r3, r1
 80039b8:	3320      	adds	r3, #32
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039be:	7bfa      	ldrb	r2, [r7, #15]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	440b      	add	r3, r1
 80039cc:	3324      	adds	r3, #36	@ 0x24
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039d2:	7bfb      	ldrb	r3, [r7, #15]
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	440b      	add	r3, r1
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039e6:	7bfb      	ldrb	r3, [r7, #15]
 80039e8:	3301      	adds	r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	791b      	ldrb	r3, [r3, #4]
 80039f0:	7bfa      	ldrb	r2, [r7, #15]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d3bb      	bcc.n	800396e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039f6:	2300      	movs	r3, #0
 80039f8:	73fb      	strb	r3, [r7, #15]
 80039fa:	e044      	b.n	8003a86 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039fc:	7bfa      	ldrb	r2, [r7, #15]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	440b      	add	r3, r1
 8003a0a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003a0e:	2200      	movs	r2, #0
 8003a10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a12:	7bfa      	ldrb	r2, [r7, #15]
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	440b      	add	r3, r1
 8003a20:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a24:	7bfa      	ldrb	r2, [r7, #15]
 8003a26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a28:	7bfa      	ldrb	r2, [r7, #15]
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	440b      	add	r3, r1
 8003a36:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a3e:	7bfa      	ldrb	r2, [r7, #15]
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	4613      	mov	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	440b      	add	r3, r1
 8003a4c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a54:	7bfa      	ldrb	r2, [r7, #15]
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	440b      	add	r3, r1
 8003a62:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a6a:	7bfa      	ldrb	r2, [r7, #15]
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	440b      	add	r3, r1
 8003a78:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	3301      	adds	r3, #1
 8003a84:	73fb      	strb	r3, [r7, #15]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	791b      	ldrb	r3, [r3, #4]
 8003a8a:	7bfa      	ldrb	r2, [r7, #15]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d3b5      	bcc.n	80039fc <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6818      	ldr	r0, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a9a:	f003 ffcb 	bl	8007a34 <USB_DevInit>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e00c      	b.n	8003aca <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f006 fa4b 	bl	8009f5e <USB_DevDisconnect>

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_PCD_Start+0x16>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e016      	b.n	8003b16 <HAL_PCD_Start+0x44>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f003 ff61 	bl	80079bc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003afa:	2101      	movs	r1, #1
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f008 facc 	bl	800c09a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f006 fa1f 	bl	8009f4a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b088      	sub	sp, #32
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f006 fa21 	bl	8009f72 <USB_ReadInterrupts>
 8003b30:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fb1a 	bl	8004176 <PCD_EP_ISR_Handler>

    return;
 8003b42:	e119      	b.n	8003d78 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d013      	beq.n	8003b76 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b60:	b292      	uxth	r2, r2
 8003b62:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f008 f89f 	bl	800bcaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f905 	bl	8003d7e <HAL_PCD_SetAddress>

    return;
 8003b74:	e100      	b.n	8003d78 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00c      	beq.n	8003b9a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b92:	b292      	uxth	r2, r2
 8003b94:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003b98:	e0ee      	b.n	8003d78 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00c      	beq.n	8003bbe <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bb6:	b292      	uxth	r2, r2
 8003bb8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003bbc:	e0dc      	b.n	8003d78 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d027      	beq.n	8003c18 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0204 	bic.w	r2, r2, #4
 8003bda:	b292      	uxth	r2, r2
 8003bdc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0208 	bic.w	r2, r2, #8
 8003bf2:	b292      	uxth	r2, r2
 8003bf4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f008 f88f 	bl	800bd1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c10:	b292      	uxth	r2, r2
 8003c12:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003c16:	e0af      	b.n	8003d78 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 8083 	beq.w	8003d2a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003c24:	2300      	movs	r3, #0
 8003c26:	77fb      	strb	r3, [r7, #31]
 8003c28:	e010      	b.n	8003c4c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	7ffb      	ldrb	r3, [r7, #31]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	441a      	add	r2, r3
 8003c36:	7ffb      	ldrb	r3, [r7, #31]
 8003c38:	8812      	ldrh	r2, [r2, #0]
 8003c3a:	b292      	uxth	r2, r2
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	3320      	adds	r3, #32
 8003c40:	443b      	add	r3, r7
 8003c42:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003c46:	7ffb      	ldrb	r3, [r7, #31]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	77fb      	strb	r3, [r7, #31]
 8003c4c:	7ffb      	ldrb	r3, [r7, #31]
 8003c4e:	2b07      	cmp	r3, #7
 8003c50:	d9eb      	bls.n	8003c2a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0201 	orr.w	r2, r2, #1
 8003c64:	b292      	uxth	r2, r2
 8003c66:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0201 	bic.w	r2, r2, #1
 8003c7c:	b292      	uxth	r2, r2
 8003c7e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003c82:	bf00      	nop
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0f6      	beq.n	8003c84 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ca8:	b292      	uxth	r2, r2
 8003caa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003cae:	2300      	movs	r3, #0
 8003cb0:	77fb      	strb	r3, [r7, #31]
 8003cb2:	e00f      	b.n	8003cd4 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003cb4:	7ffb      	ldrb	r3, [r7, #31]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6812      	ldr	r2, [r2, #0]
 8003cba:	4611      	mov	r1, r2
 8003cbc:	7ffa      	ldrb	r2, [r7, #31]
 8003cbe:	0092      	lsls	r2, r2, #2
 8003cc0:	440a      	add	r2, r1
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	3320      	adds	r3, #32
 8003cc6:	443b      	add	r3, r7
 8003cc8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003ccc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003cce:	7ffb      	ldrb	r3, [r7, #31]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	77fb      	strb	r3, [r7, #31]
 8003cd4:	7ffb      	ldrb	r3, [r7, #31]
 8003cd6:	2b07      	cmp	r3, #7
 8003cd8:	d9ec      	bls.n	8003cb4 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 0208 	orr.w	r2, r2, #8
 8003cec:	b292      	uxth	r2, r2
 8003cee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d04:	b292      	uxth	r2, r2
 8003d06:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f042 0204 	orr.w	r2, r2, #4
 8003d1c:	b292      	uxth	r2, r2
 8003d1e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f007 ffe0 	bl	800bce8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003d28:	e026      	b.n	8003d78 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00f      	beq.n	8003d54 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003d46:	b292      	uxth	r2, r2
 8003d48:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f007 ff9e 	bl	800bc8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003d52:	e011      	b.n	8003d78 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00c      	beq.n	8003d78 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d70:	b292      	uxth	r2, r2
 8003d72:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003d76:	bf00      	nop
  }
}
 8003d78:	3720      	adds	r7, #32
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b082      	sub	sp, #8
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
 8003d86:	460b      	mov	r3, r1
 8003d88:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d101      	bne.n	8003d98 <HAL_PCD_SetAddress+0x1a>
 8003d94:	2302      	movs	r3, #2
 8003d96:	e012      	b.n	8003dbe <HAL_PCD_SetAddress+0x40>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	78fa      	ldrb	r2, [r7, #3]
 8003da4:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	78fa      	ldrb	r2, [r7, #3]
 8003dac:	4611      	mov	r1, r2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f006 f8b8 	bl	8009f24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b084      	sub	sp, #16
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
 8003dce:	4608      	mov	r0, r1
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	70fb      	strb	r3, [r7, #3]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	803b      	strh	r3, [r7, #0]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003de4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	da0e      	bge.n	8003e0a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	f003 0207 	and.w	r2, r3, #7
 8003df2:	4613      	mov	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	3310      	adds	r3, #16
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	4413      	add	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	705a      	strb	r2, [r3, #1]
 8003e08:	e00e      	b.n	8003e28 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e0a:	78fb      	ldrb	r3, [r7, #3]
 8003e0c:	f003 0207 	and.w	r2, r3, #7
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	4413      	add	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e34:	883a      	ldrh	r2, [r7, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	78ba      	ldrb	r2, [r7, #2]
 8003e3e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e40:	78bb      	ldrb	r3, [r7, #2]
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d102      	bne.n	8003e4c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_PCD_EP_Open+0x94>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e00e      	b.n	8003e78 <HAL_PCD_EP_Open+0xb2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68f9      	ldr	r1, [r7, #12]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f003 fe01 	bl	8007a70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003e76:	7afb      	ldrb	r3, [r7, #11]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	da0e      	bge.n	8003eb2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	f003 0207 	and.w	r2, r3, #7
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	3310      	adds	r3, #16
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2201      	movs	r2, #1
 8003eae:	705a      	strb	r2, [r3, #1]
 8003eb0:	e00e      	b.n	8003ed0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eb2:	78fb      	ldrb	r3, [r7, #3]
 8003eb4:	f003 0207 	and.w	r2, r3, #7
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <HAL_PCD_EP_Close+0x6a>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e00e      	b.n	8003f08 <HAL_PCD_EP_Close+0x88>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68f9      	ldr	r1, [r7, #12]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f004 f979 	bl	80081f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	607a      	str	r2, [r7, #4]
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f20:	7afb      	ldrb	r3, [r7, #11]
 8003f22:	f003 0207 	and.w	r2, r3, #7
 8003f26:	4613      	mov	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4413      	add	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2200      	movs	r2, #0
 8003f48:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f50:	7afb      	ldrb	r3, [r7, #11]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6979      	ldr	r1, [r7, #20]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f004 fb30 	bl	80085c8 <USB_EPStartXfer>

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f7e:	78fb      	ldrb	r3, [r7, #3]
 8003f80:	f003 0207 	and.w	r2, r3, #7
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	440b      	add	r3, r1
 8003f90:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003f94:	681b      	ldr	r3, [r3, #0]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bc80      	pop	{r7}
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	607a      	str	r2, [r7, #4]
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	460b      	mov	r3, r1
 8003fae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fb0:	7afb      	ldrb	r3, [r7, #11]
 8003fb2:	f003 0207 	and.w	r2, r3, #7
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	3310      	adds	r3, #16
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fec:	7afb      	ldrb	r3, [r7, #11]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6979      	ldr	r1, [r7, #20]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f004 fae2 	bl	80085c8 <USB_EPStartXfer>

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	460b      	mov	r3, r1
 8004018:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800401a:	78fb      	ldrb	r3, [r7, #3]
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	7912      	ldrb	r2, [r2, #4]
 8004024:	4293      	cmp	r3, r2
 8004026:	d901      	bls.n	800402c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e04c      	b.n	80040c6 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800402c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004030:	2b00      	cmp	r3, #0
 8004032:	da0e      	bge.n	8004052 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	f003 0207 	and.w	r2, r3, #7
 800403a:	4613      	mov	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	3310      	adds	r3, #16
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	4413      	add	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2201      	movs	r2, #1
 800404e:	705a      	strb	r2, [r3, #1]
 8004050:	e00c      	b.n	800406c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004052:	78fa      	ldrb	r2, [r7, #3]
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	4413      	add	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2201      	movs	r2, #1
 8004070:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004072:	78fb      	ldrb	r3, [r7, #3]
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	b2da      	uxtb	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_PCD_EP_SetStall+0x7e>
 8004088:	2302      	movs	r3, #2
 800408a:	e01c      	b.n	80040c6 <HAL_PCD_EP_SetStall+0xb8>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68f9      	ldr	r1, [r7, #12]
 800409a:	4618      	mov	r0, r3
 800409c:	f005 fe45 	bl	8009d2a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d108      	bne.n	80040bc <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80040b4:	4619      	mov	r1, r3
 80040b6:	4610      	mov	r0, r2
 80040b8:	f005 ff6a 	bl	8009f90 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b084      	sub	sp, #16
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	460b      	mov	r3, r1
 80040d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80040da:	78fb      	ldrb	r3, [r7, #3]
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	7912      	ldrb	r2, [r2, #4]
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d901      	bls.n	80040ec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e040      	b.n	800416e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	da0e      	bge.n	8004112 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	f003 0207 	and.w	r2, r3, #7
 80040fa:	4613      	mov	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	3310      	adds	r3, #16
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	4413      	add	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2201      	movs	r2, #1
 800410e:	705a      	strb	r2, [r3, #1]
 8004110:	e00e      	b.n	8004130 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004112:	78fb      	ldrb	r3, [r7, #3]
 8004114:	f003 0207 	and.w	r2, r3, #7
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	4413      	add	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004136:	78fb      	ldrb	r3, [r7, #3]
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	b2da      	uxtb	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004148:	2b01      	cmp	r3, #1
 800414a:	d101      	bne.n	8004150 <HAL_PCD_EP_ClrStall+0x82>
 800414c:	2302      	movs	r3, #2
 800414e:	e00e      	b.n	800416e <HAL_PCD_EP_ClrStall+0xa0>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68f9      	ldr	r1, [r7, #12]
 800415e:	4618      	mov	r0, r3
 8004160:	f005 fe33 	bl	8009dca <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b096      	sub	sp, #88	@ 0x58
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800417e:	e3bb      	b.n	80048f8 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004188:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800418c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004190:	b2db      	uxtb	r3, r3
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800419a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f040 8175 	bne.w	800448e <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80041a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80041a8:	f003 0310 	and.w	r3, r3, #16
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d14e      	bne.n	800424e <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80041bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041c0:	81fb      	strh	r3, [r7, #14]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	89fb      	ldrh	r3, [r7, #14]
 80041c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3310      	adds	r3, #16
 80041d8:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	461a      	mov	r2, r3
 80041e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	4413      	add	r3, r2
 80041ee:	3302      	adds	r3, #2
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6812      	ldr	r2, [r2, #0]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004204:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004208:	695a      	ldr	r2, [r3, #20]
 800420a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	441a      	add	r2, r3
 8004210:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004212:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004214:	2100      	movs	r1, #0
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f007 fd1f 	bl	800bc5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	7b5b      	ldrb	r3, [r3, #13]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 8368 	beq.w	80048f8 <PCD_EP_ISR_Handler+0x782>
 8004228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	2b00      	cmp	r3, #0
 800422e:	f040 8363 	bne.w	80048f8 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	7b5b      	ldrb	r3, [r3, #13]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800423c:	b2da      	uxtb	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	735a      	strb	r2, [r3, #13]
 800424c:	e354      	b.n	80048f8 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004254:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004260:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004264:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004268:	2b00      	cmp	r3, #0
 800426a:	d034      	beq.n	80042d6 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004274:	b29b      	uxth	r3, r3
 8004276:	461a      	mov	r2, r3
 8004278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	4413      	add	r3, r2
 8004280:	3306      	adds	r3, #6
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	4413      	add	r3, r2
 800428a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004296:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80042a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80042a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	f005 fec1 	bl	800a032 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80042bc:	4013      	ands	r3, r2
 80042be:	823b      	strh	r3, [r7, #16]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	8a3a      	ldrh	r2, [r7, #16]
 80042c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80042ca:	b292      	uxth	r2, r2
 80042cc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f007 fc96 	bl	800bc00 <HAL_PCD_SetupStageCallback>
 80042d4:	e310      	b.n	80048f8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80042d6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f280 830c 	bge.w	80048f8 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80042ec:	4013      	ands	r3, r2
 80042ee:	83fb      	strh	r3, [r7, #30]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	8bfa      	ldrh	r2, [r7, #30]
 80042f6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80042fa:	b292      	uxth	r2, r2
 80042fc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004306:	b29b      	uxth	r3, r3
 8004308:	461a      	mov	r2, r3
 800430a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	4413      	add	r3, r2
 8004312:	3306      	adds	r3, #6
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6812      	ldr	r2, [r2, #0]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004328:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800432a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d019      	beq.n	8004366 <PCD_EP_ISR_Handler+0x1f0>
 8004332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d015      	beq.n	8004366 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004340:	6959      	ldr	r1, [r3, #20]
 8004342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004344:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004348:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800434a:	b29b      	uxth	r3, r3
 800434c:	f005 fe71 	bl	800a032 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004352:	695a      	ldr	r2, [r3, #20]
 8004354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	441a      	add	r2, r3
 800435a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800435c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800435e:	2100      	movs	r1, #0
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f007 fc5f 	bl	800bc24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004370:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004374:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004378:	2b00      	cmp	r3, #0
 800437a:	f040 82bd 	bne.w	80048f8 <PCD_EP_ISR_Handler+0x782>
 800437e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004382:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004386:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800438a:	f000 82b5 	beq.w	80048f8 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800439c:	b29b      	uxth	r3, r3
 800439e:	461a      	mov	r2, r3
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	4413      	add	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	801a      	strh	r2, [r3, #0]
 80043be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80043c4:	d91d      	bls.n	8004402 <PCD_EP_ISR_Handler+0x28c>
 80043c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80043ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f003 031f 	and.w	r3, r3, #31
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d102      	bne.n	80043e0 <PCD_EP_ISR_Handler+0x26a>
 80043da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043dc:	3b01      	subs	r3, #1
 80043de:	647b      	str	r3, [r7, #68]	@ 0x44
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	029b      	lsls	r3, r3, #10
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	4313      	orrs	r3, r2
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	801a      	strh	r2, [r3, #0]
 8004400:	e026      	b.n	8004450 <PCD_EP_ISR_Handler+0x2da>
 8004402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <PCD_EP_ISR_Handler+0x2aa>
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	b29b      	uxth	r3, r3
 8004410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004418:	b29a      	uxth	r2, r3
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	801a      	strh	r2, [r3, #0]
 800441e:	e017      	b.n	8004450 <PCD_EP_ISR_Handler+0x2da>
 8004420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	085b      	lsrs	r3, r3, #1
 8004426:	647b      	str	r3, [r7, #68]	@ 0x44
 8004428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <PCD_EP_ISR_Handler+0x2c4>
 8004434:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004436:	3301      	adds	r3, #1
 8004438:	647b      	str	r3, [r7, #68]	@ 0x44
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	b29a      	uxth	r2, r3
 8004440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004442:	b29b      	uxth	r3, r3
 8004444:	029b      	lsls	r3, r3, #10
 8004446:	b29b      	uxth	r3, r3
 8004448:	4313      	orrs	r3, r2
 800444a:	b29a      	uxth	r2, r3
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	b29b      	uxth	r3, r3
 8004458:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800445c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004460:	827b      	strh	r3, [r7, #18]
 8004462:	8a7b      	ldrh	r3, [r7, #18]
 8004464:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004468:	827b      	strh	r3, [r7, #18]
 800446a:	8a7b      	ldrh	r3, [r7, #18]
 800446c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004470:	827b      	strh	r3, [r7, #18]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	8a7b      	ldrh	r3, [r7, #18]
 8004478:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800447c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004480:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004484:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004488:	b29b      	uxth	r3, r3
 800448a:	8013      	strh	r3, [r2, #0]
 800448c:	e234      	b.n	80048f8 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80044a2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f280 80fc 	bge.w	80046a4 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	461a      	mov	r2, r3
 80044b2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	b29a      	uxth	r2, r3
 80044be:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80044c2:	4013      	ands	r3, r2
 80044c4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80044da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80044de:	b292      	uxth	r2, r2
 80044e0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80044e2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80044e6:	4613      	mov	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	4413      	add	r3, r2
 80044f6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80044f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044fa:	7b1b      	ldrb	r3, [r3, #12]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d125      	bne.n	800454c <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004508:	b29b      	uxth	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	4413      	add	r3, r2
 8004514:	3306      	adds	r3, #6
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6812      	ldr	r2, [r2, #0]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004528:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800452c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 8092 	beq.w	800465a <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6818      	ldr	r0, [r3, #0]
 800453a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800453c:	6959      	ldr	r1, [r3, #20]
 800453e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004540:	88da      	ldrh	r2, [r3, #6]
 8004542:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004546:	f005 fd74 	bl	800a032 <USB_ReadPMA>
 800454a:	e086      	b.n	800465a <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800454c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800454e:	78db      	ldrb	r3, [r3, #3]
 8004550:	2b02      	cmp	r3, #2
 8004552:	d10a      	bne.n	800456a <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004554:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004558:	461a      	mov	r2, r3
 800455a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f9d9 	bl	8004914 <HAL_PCD_EP_DB_Receive>
 8004562:	4603      	mov	r3, r0
 8004564:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004568:	e077      	b.n	800465a <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	b29b      	uxth	r3, r3
 800457c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004584:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	461a      	mov	r2, r3
 800458e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	441a      	add	r2, r3
 8004596:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800459a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800459e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d024      	beq.n	8004612 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	461a      	mov	r2, r3
 80045d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	4413      	add	r3, r2
 80045dc:	3302      	adds	r3, #2
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045f0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80045f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d02e      	beq.n	800465a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6818      	ldr	r0, [r3, #0]
 8004600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004602:	6959      	ldr	r1, [r3, #20]
 8004604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004606:	891a      	ldrh	r2, [r3, #8]
 8004608:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800460c:	f005 fd11 	bl	800a032 <USB_ReadPMA>
 8004610:	e023      	b.n	800465a <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800461a:	b29b      	uxth	r3, r3
 800461c:	461a      	mov	r2, r3
 800461e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4413      	add	r3, r2
 8004626:	3306      	adds	r3, #6
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6812      	ldr	r2, [r2, #0]
 800462e:	4413      	add	r3, r2
 8004630:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004634:	881b      	ldrh	r3, [r3, #0]
 8004636:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800463a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800463e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004642:	2b00      	cmp	r3, #0
 8004644:	d009      	beq.n	800465a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800464c:	6959      	ldr	r1, [r3, #20]
 800464e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004650:	895a      	ldrh	r2, [r3, #10]
 8004652:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004656:	f005 fcec 	bl	800a032 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800465a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800465c:	69da      	ldr	r2, [r3, #28]
 800465e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004662:	441a      	add	r2, r3
 8004664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004666:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800466a:	695a      	ldr	r2, [r3, #20]
 800466c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004670:	441a      	add	r2, r3
 8004672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004674:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d005      	beq.n	800468a <PCD_EP_ISR_Handler+0x514>
 800467e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	429a      	cmp	r2, r3
 8004688:	d206      	bcs.n	8004698 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800468a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	4619      	mov	r1, r3
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f007 fac7 	bl	800bc24 <HAL_PCD_DataOutStageCallback>
 8004696:	e005      	b.n	80046a4 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800469e:	4618      	mov	r0, r3
 80046a0:	f003 ff92 	bl	80085c8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80046a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80046a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 8123 	beq.w	80048f8 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80046b2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80046b6:	4613      	mov	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	3310      	adds	r3, #16
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	4413      	add	r3, r2
 80046c4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	461a      	mov	r2, r3
 80046cc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80046dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046e0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	461a      	mov	r2, r3
 80046ea:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	441a      	add	r2, r3
 80046f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80046f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046fe:	b29b      	uxth	r3, r3
 8004700:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004704:	78db      	ldrb	r3, [r3, #3]
 8004706:	2b01      	cmp	r3, #1
 8004708:	f040 80a2 	bne.w	8004850 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800470c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800470e:	2200      	movs	r2, #0
 8004710:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004714:	7b1b      	ldrb	r3, [r3, #12]
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 8093 	beq.w	8004842 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800471c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004724:	2b00      	cmp	r3, #0
 8004726:	d046      	beq.n	80047b6 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800472a:	785b      	ldrb	r3, [r3, #1]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d126      	bne.n	800477e <PCD_EP_ISR_Handler+0x608>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	627b      	str	r3, [r7, #36]	@ 0x24
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800473e:	b29b      	uxth	r3, r3
 8004740:	461a      	mov	r2, r3
 8004742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004744:	4413      	add	r3, r2
 8004746:	627b      	str	r3, [r7, #36]	@ 0x24
 8004748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	011a      	lsls	r2, r3, #4
 800474e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004750:	4413      	add	r3, r2
 8004752:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004756:	623b      	str	r3, [r7, #32]
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	b29b      	uxth	r3, r3
 800475e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004762:	b29a      	uxth	r2, r3
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	801a      	strh	r2, [r3, #0]
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	b29b      	uxth	r3, r3
 800476e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004776:	b29a      	uxth	r2, r3
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	801a      	strh	r2, [r3, #0]
 800477c:	e061      	b.n	8004842 <PCD_EP_ISR_Handler+0x6cc>
 800477e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004780:	785b      	ldrb	r3, [r3, #1]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d15d      	bne.n	8004842 <PCD_EP_ISR_Handler+0x6cc>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004794:	b29b      	uxth	r3, r3
 8004796:	461a      	mov	r2, r3
 8004798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800479a:	4413      	add	r3, r2
 800479c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800479e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	011a      	lsls	r2, r3, #4
 80047a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a6:	4413      	add	r3, r2
 80047a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80047ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b0:	2200      	movs	r2, #0
 80047b2:	801a      	strh	r2, [r3, #0]
 80047b4:	e045      	b.n	8004842 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047be:	785b      	ldrb	r3, [r3, #1]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d126      	bne.n	8004812 <PCD_EP_ISR_Handler+0x69c>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	461a      	mov	r2, r3
 80047d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d8:	4413      	add	r3, r2
 80047da:	637b      	str	r3, [r7, #52]	@ 0x34
 80047dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	011a      	lsls	r2, r3, #4
 80047e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e4:	4413      	add	r3, r2
 80047e6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80047ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ee:	881b      	ldrh	r3, [r3, #0]
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fa:	801a      	strh	r2, [r3, #0]
 80047fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	b29b      	uxth	r3, r3
 8004802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800480a:	b29a      	uxth	r2, r3
 800480c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480e:	801a      	strh	r2, [r3, #0]
 8004810:	e017      	b.n	8004842 <PCD_EP_ISR_Handler+0x6cc>
 8004812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004814:	785b      	ldrb	r3, [r3, #1]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d113      	bne.n	8004842 <PCD_EP_ISR_Handler+0x6cc>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004822:	b29b      	uxth	r3, r3
 8004824:	461a      	mov	r2, r3
 8004826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004828:	4413      	add	r3, r2
 800482a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800482c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	011a      	lsls	r2, r3, #4
 8004832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004834:	4413      	add	r3, r2
 8004836:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800483a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800483c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800483e:	2200      	movs	r2, #0
 8004840:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	4619      	mov	r1, r3
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f007 fa06 	bl	800bc5a <HAL_PCD_DataInStageCallback>
 800484e:	e053      	b.n	80048f8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004850:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004858:	2b00      	cmp	r3, #0
 800485a:	d146      	bne.n	80048ea <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004864:	b29b      	uxth	r3, r3
 8004866:	461a      	mov	r2, r3
 8004868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4413      	add	r3, r2
 8004870:	3302      	adds	r3, #2
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6812      	ldr	r2, [r2, #0]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004884:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800488a:	699a      	ldr	r2, [r3, #24]
 800488c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004890:	429a      	cmp	r2, r3
 8004892:	d907      	bls.n	80048a4 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8004894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004896:	699a      	ldr	r2, [r3, #24]
 8004898:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800489c:	1ad2      	subs	r2, r2, r3
 800489e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048a0:	619a      	str	r2, [r3, #24]
 80048a2:	e002      	b.n	80048aa <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80048a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048a6:	2200      	movs	r2, #0
 80048a8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80048aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	4619      	mov	r1, r3
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f007 f9ce 	bl	800bc5a <HAL_PCD_DataInStageCallback>
 80048be:	e01b      	b.n	80048f8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80048c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c2:	695a      	ldr	r2, [r3, #20]
 80048c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80048c8:	441a      	add	r2, r3
 80048ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048cc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80048ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048d0:	69da      	ldr	r2, [r3, #28]
 80048d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80048d6:	441a      	add	r2, r3
 80048d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048da:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048e2:	4618      	mov	r0, r3
 80048e4:	f003 fe70 	bl	80085c8 <USB_EPStartXfer>
 80048e8:	e006      	b.n	80048f8 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80048ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80048ee:	461a      	mov	r2, r3
 80048f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f91b 	bl	8004b2e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004900:	b29b      	uxth	r3, r3
 8004902:	b21b      	sxth	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	f6ff ac3b 	blt.w	8004180 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3758      	adds	r7, #88	@ 0x58
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b088      	sub	sp, #32
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	4613      	mov	r3, r2
 8004920:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004922:	88fb      	ldrh	r3, [r7, #6]
 8004924:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d07e      	beq.n	8004a2a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004934:	b29b      	uxth	r3, r3
 8004936:	461a      	mov	r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	4413      	add	r3, r2
 8004940:	3302      	adds	r3, #2
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	6812      	ldr	r2, [r2, #0]
 8004948:	4413      	add	r3, r2
 800494a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004954:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	699a      	ldr	r2, [r3, #24]
 800495a:	8b7b      	ldrh	r3, [r7, #26]
 800495c:	429a      	cmp	r2, r3
 800495e:	d306      	bcc.n	800496e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	699a      	ldr	r2, [r3, #24]
 8004964:	8b7b      	ldrh	r3, [r7, #26]
 8004966:	1ad2      	subs	r2, r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	619a      	str	r2, [r3, #24]
 800496c:	e002      	b.n	8004974 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2200      	movs	r2, #0
 8004972:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d123      	bne.n	80049c4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	461a      	mov	r2, r3
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	b29b      	uxth	r3, r3
 800498e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004996:	833b      	strh	r3, [r7, #24]
 8004998:	8b3b      	ldrh	r3, [r7, #24]
 800499a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800499e:	833b      	strh	r3, [r7, #24]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	461a      	mov	r2, r3
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	441a      	add	r2, r3
 80049ae:	8b3b      	ldrh	r3, [r7, #24]
 80049b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80049c4:	88fb      	ldrh	r3, [r7, #6]
 80049c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d01f      	beq.n	8004a0e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	461a      	mov	r2, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049e8:	82fb      	strh	r3, [r7, #22]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	441a      	add	r2, r3
 80049f8:	8afb      	ldrh	r3, [r7, #22]
 80049fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a06:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004a0e:	8b7b      	ldrh	r3, [r7, #26]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 8087 	beq.w	8004b24 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6818      	ldr	r0, [r3, #0]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	6959      	ldr	r1, [r3, #20]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	891a      	ldrh	r2, [r3, #8]
 8004a22:	8b7b      	ldrh	r3, [r7, #26]
 8004a24:	f005 fb05 	bl	800a032 <USB_ReadPMA>
 8004a28:	e07c      	b.n	8004b24 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	461a      	mov	r2, r3
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	4413      	add	r3, r2
 8004a3e:	3306      	adds	r3, #6
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	6812      	ldr	r2, [r2, #0]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a52:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	699a      	ldr	r2, [r3, #24]
 8004a58:	8b7b      	ldrh	r3, [r7, #26]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d306      	bcc.n	8004a6c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	699a      	ldr	r2, [r3, #24]
 8004a62:	8b7b      	ldrh	r3, [r7, #26]
 8004a64:	1ad2      	subs	r2, r2, r3
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	619a      	str	r2, [r3, #24]
 8004a6a:	e002      	b.n	8004a72 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d123      	bne.n	8004ac2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a94:	83fb      	strh	r3, [r7, #30]
 8004a96:	8bfb      	ldrh	r3, [r7, #30]
 8004a98:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a9c:	83fb      	strh	r3, [r7, #30]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	441a      	add	r2, r3
 8004aac:	8bfb      	ldrh	r3, [r7, #30]
 8004aae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ab2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004ac2:	88fb      	ldrh	r3, [r7, #6]
 8004ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d11f      	bne.n	8004b0c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ae6:	83bb      	strh	r3, [r7, #28]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	461a      	mov	r2, r3
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	441a      	add	r2, r3
 8004af6:	8bbb      	ldrh	r3, [r7, #28]
 8004af8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004afc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b04:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004b0c:	8b7b      	ldrh	r3, [r7, #26]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d008      	beq.n	8004b24 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6818      	ldr	r0, [r3, #0]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	6959      	ldr	r1, [r3, #20]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	895a      	ldrh	r2, [r3, #10]
 8004b1e:	8b7b      	ldrh	r3, [r7, #26]
 8004b20:	f005 fa87 	bl	800a032 <USB_ReadPMA>
    }
  }

  return count;
 8004b24:	8b7b      	ldrh	r3, [r7, #26]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3720      	adds	r7, #32
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b0a4      	sub	sp, #144	@ 0x90
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	60f8      	str	r0, [r7, #12]
 8004b36:	60b9      	str	r1, [r7, #8]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b3c:	88fb      	ldrh	r3, [r7, #6]
 8004b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 81dd 	beq.w	8004f02 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	461a      	mov	r2, r3
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	4413      	add	r3, r2
 8004b5c:	3302      	adds	r3, #2
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	6812      	ldr	r2, [r2, #0]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b70:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	699a      	ldr	r2, [r3, #24]
 8004b78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d907      	bls.n	8004b90 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	699a      	ldr	r2, [r3, #24]
 8004b84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b88:	1ad2      	subs	r2, r2, r3
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	619a      	str	r2, [r3, #24]
 8004b8e:	e002      	b.n	8004b96 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	2200      	movs	r2, #0
 8004b94:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f040 80b9 	bne.w	8004d12 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	785b      	ldrb	r3, [r3, #1]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d126      	bne.n	8004bf6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	461a      	mov	r2, r3
 8004bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bbc:	4413      	add	r3, r2
 8004bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	011a      	lsls	r2, r3, #4
 8004bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc8:	4413      	add	r3, r2
 8004bca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004bce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bde:	801a      	strh	r2, [r3, #0]
 8004be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf2:	801a      	strh	r2, [r3, #0]
 8004bf4:	e01a      	b.n	8004c2c <HAL_PCD_EP_DB_Transmit+0xfe>
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	785b      	ldrb	r3, [r3, #1]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d116      	bne.n	8004c2c <HAL_PCD_EP_DB_Transmit+0xfe>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	461a      	mov	r2, r3
 8004c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c12:	4413      	add	r3, r2
 8004c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	011a      	lsls	r2, r3, #4
 8004c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c1e:	4413      	add	r3, r2
 8004c20:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c24:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c28:	2200      	movs	r2, #0
 8004c2a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	785b      	ldrb	r3, [r3, #1]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d126      	bne.n	8004c88 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	4413      	add	r3, r2
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	011a      	lsls	r2, r3, #4
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	801a      	strh	r2, [r3, #0]
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	801a      	strh	r2, [r3, #0]
 8004c86:	e017      	b.n	8004cb8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	785b      	ldrb	r3, [r3, #1]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d113      	bne.n	8004cb8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9e:	4413      	add	r3, r2
 8004ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	011a      	lsls	r2, r3, #4
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004caa:	4413      	add	r3, r2
 8004cac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004cb0:	623b      	str	r3, [r7, #32]
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f006 ffcb 	bl	800bc5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004cc4:	88fb      	ldrh	r3, [r7, #6]
 8004cc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 82fc 	beq.w	80052c8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cea:	82fb      	strh	r3, [r7, #22]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	441a      	add	r2, r3
 8004cfa:	8afb      	ldrh	r3, [r7, #22]
 8004cfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	8013      	strh	r3, [r2, #0]
 8004d10:	e2da      	b.n	80052c8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d12:	88fb      	ldrh	r3, [r7, #6]
 8004d14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d021      	beq.n	8004d60 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d36:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	441a      	add	r2, r3
 8004d48:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004d4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	f040 82ae 	bne.w	80052c8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	695a      	ldr	r2, [r3, #20]
 8004d70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d74:	441a      	add	r2, r3
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	69da      	ldr	r2, [r3, #28]
 8004d7e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d82:	441a      	add	r2, r3
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	6a1a      	ldr	r2, [r3, #32]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d30b      	bcc.n	8004dac <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	6a1a      	ldr	r2, [r3, #32]
 8004da0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004da4:	1ad2      	subs	r2, r2, r3
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	621a      	str	r2, [r3, #32]
 8004daa:	e017      	b.n	8004ddc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d108      	bne.n	8004dc6 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004db4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004db8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004dc4:	e00a      	b.n	8004ddc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	785b      	ldrb	r3, [r3, #1]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d165      	bne.n	8004eb0 <HAL_PCD_EP_DB_Transmit+0x382>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	461a      	mov	r2, r3
 8004df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004df8:	4413      	add	r3, r2
 8004dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	011a      	lsls	r2, r3, #4
 8004e02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e04:	4413      	add	r3, r2
 8004e06:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e1a:	801a      	strh	r2, [r3, #0]
 8004e1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e20:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e22:	d91d      	bls.n	8004e60 <HAL_PCD_EP_DB_Transmit+0x332>
 8004e24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e28:	095b      	lsrs	r3, r3, #5
 8004e2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e30:	f003 031f 	and.w	r3, r3, #31
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d102      	bne.n	8004e3e <HAL_PCD_EP_DB_Transmit+0x310>
 8004e38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	029b      	lsls	r3, r3, #10
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e5c:	801a      	strh	r2, [r3, #0]
 8004e5e:	e044      	b.n	8004eea <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10a      	bne.n	8004e7e <HAL_PCD_EP_DB_Transmit+0x350>
 8004e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7a:	801a      	strh	r2, [r3, #0]
 8004e7c:	e035      	b.n	8004eea <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004e7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e82:	085b      	lsrs	r3, r3, #1
 8004e84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <HAL_PCD_EP_DB_Transmit+0x36a>
 8004e92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e94:	3301      	adds	r3, #1
 8004e96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	029b      	lsls	r3, r3, #10
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eac:	801a      	strh	r2, [r3, #0]
 8004eae:	e01c      	b.n	8004eea <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	785b      	ldrb	r3, [r3, #1]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d118      	bne.n	8004eea <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	461a      	mov	r2, r3
 8004eca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ecc:	4413      	add	r3, r2
 8004ece:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	011a      	lsls	r2, r3, #4
 8004ed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ed8:	4413      	add	r3, r2
 8004eda:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ede:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ee8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6818      	ldr	r0, [r3, #0]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	6959      	ldr	r1, [r3, #20]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	891a      	ldrh	r2, [r3, #8]
 8004ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	f005 f853 	bl	8009fa6 <USB_WritePMA>
 8004f00:	e1e2      	b.n	80052c8 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	4413      	add	r3, r2
 8004f16:	3306      	adds	r3, #6
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	6812      	ldr	r2, [r2, #0]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f2a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d307      	bcc.n	8004f4a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	699a      	ldr	r2, [r3, #24]
 8004f3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004f42:	1ad2      	subs	r2, r2, r3
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	619a      	str	r2, [r3, #24]
 8004f48:	e002      	b.n	8004f50 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f040 80c0 	bne.w	80050da <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	785b      	ldrb	r3, [r3, #1]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d126      	bne.n	8004fb0 <HAL_PCD_EP_DB_Transmit+0x482>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	461a      	mov	r2, r3
 8004f74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f76:	4413      	add	r3, r2
 8004f78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	011a      	lsls	r2, r3, #4
 8004f80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f82:	4413      	add	r3, r2
 8004f84:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004f88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f98:	801a      	strh	r2, [r3, #0]
 8004f9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fac:	801a      	strh	r2, [r3, #0]
 8004fae:	e01a      	b.n	8004fe6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	785b      	ldrb	r3, [r3, #1]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d116      	bne.n	8004fe6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	461a      	mov	r2, r3
 8004fca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fcc:	4413      	add	r3, r2
 8004fce:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	011a      	lsls	r2, r3, #4
 8004fd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fd8:	4413      	add	r3, r2
 8004fda:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004fde:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fe0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	677b      	str	r3, [r7, #116]	@ 0x74
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	785b      	ldrb	r3, [r3, #1]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d12b      	bne.n	800504c <HAL_PCD_EP_DB_Transmit+0x51e>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005002:	b29b      	uxth	r3, r3
 8005004:	461a      	mov	r2, r3
 8005006:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005008:	4413      	add	r3, r2
 800500a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	011a      	lsls	r2, r3, #4
 8005012:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005014:	4413      	add	r3, r2
 8005016:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800501a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800501e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	b29b      	uxth	r3, r3
 8005026:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800502a:	b29a      	uxth	r2, r3
 800502c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005030:	801a      	strh	r2, [r3, #0]
 8005032:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800503e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005042:	b29a      	uxth	r2, r3
 8005044:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005048:	801a      	strh	r2, [r3, #0]
 800504a:	e017      	b.n	800507c <HAL_PCD_EP_DB_Transmit+0x54e>
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	785b      	ldrb	r3, [r3, #1]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d113      	bne.n	800507c <HAL_PCD_EP_DB_Transmit+0x54e>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800505c:	b29b      	uxth	r3, r3
 800505e:	461a      	mov	r2, r3
 8005060:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005062:	4413      	add	r3, r2
 8005064:	677b      	str	r3, [r7, #116]	@ 0x74
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	011a      	lsls	r2, r3, #4
 800506c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800506e:	4413      	add	r3, r2
 8005070:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005074:	673b      	str	r3, [r7, #112]	@ 0x70
 8005076:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005078:	2200      	movs	r2, #0
 800507a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	4619      	mov	r1, r3
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f006 fde9 	bl	800bc5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005088:	88fb      	ldrh	r3, [r7, #6]
 800508a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800508e:	2b00      	cmp	r3, #0
 8005090:	f040 811a 	bne.w	80052c8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	461a      	mov	r2, r3
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ae:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	461a      	mov	r2, r3
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	441a      	add	r2, r3
 80050c0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80050c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	8013      	strh	r3, [r2, #0]
 80050d8:	e0f6      	b.n	80052c8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80050da:	88fb      	ldrh	r3, [r7, #6]
 80050dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d121      	bne.n	8005128 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	461a      	mov	r2, r3
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050fe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	461a      	mov	r2, r3
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	441a      	add	r2, r3
 8005110:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005114:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005118:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800511c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005120:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005124:	b29b      	uxth	r3, r3
 8005126:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800512e:	2b01      	cmp	r3, #1
 8005130:	f040 80ca 	bne.w	80052c8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	695a      	ldr	r2, [r3, #20]
 8005138:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800513c:	441a      	add	r2, r3
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	69da      	ldr	r2, [r3, #28]
 8005146:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800514a:	441a      	add	r2, r3
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	6a1a      	ldr	r2, [r3, #32]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	429a      	cmp	r2, r3
 800515a:	d30b      	bcc.n	8005174 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	6a1a      	ldr	r2, [r3, #32]
 8005168:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800516c:	1ad2      	subs	r2, r2, r3
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	621a      	str	r2, [r3, #32]
 8005172:	e017      	b.n	80051a4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d108      	bne.n	800518e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800517c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005180:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800518c:	e00a      	b.n	80051a4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	2200      	movs	r2, #0
 800519a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	785b      	ldrb	r3, [r3, #1]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d165      	bne.n	800527e <HAL_PCD_EP_DB_Transmit+0x750>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051c6:	4413      	add	r3, r2
 80051c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	011a      	lsls	r2, r3, #4
 80051d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051d2:	4413      	add	r3, r2
 80051d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80051d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051e8:	801a      	strh	r2, [r3, #0]
 80051ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80051f0:	d91d      	bls.n	800522e <HAL_PCD_EP_DB_Transmit+0x700>
 80051f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051f6:	095b      	lsrs	r3, r3, #5
 80051f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051fe:	f003 031f 	and.w	r3, r3, #31
 8005202:	2b00      	cmp	r3, #0
 8005204:	d102      	bne.n	800520c <HAL_PCD_EP_DB_Transmit+0x6de>
 8005206:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005208:	3b01      	subs	r3, #1
 800520a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800520c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b29a      	uxth	r2, r3
 8005212:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005214:	b29b      	uxth	r3, r3
 8005216:	029b      	lsls	r3, r3, #10
 8005218:	b29b      	uxth	r3, r3
 800521a:	4313      	orrs	r3, r2
 800521c:	b29b      	uxth	r3, r3
 800521e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005226:	b29a      	uxth	r2, r3
 8005228:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800522a:	801a      	strh	r2, [r3, #0]
 800522c:	e041      	b.n	80052b2 <HAL_PCD_EP_DB_Transmit+0x784>
 800522e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10a      	bne.n	800524c <HAL_PCD_EP_DB_Transmit+0x71e>
 8005236:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	b29b      	uxth	r3, r3
 800523c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005244:	b29a      	uxth	r2, r3
 8005246:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005248:	801a      	strh	r2, [r3, #0]
 800524a:	e032      	b.n	80052b2 <HAL_PCD_EP_DB_Transmit+0x784>
 800524c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005250:	085b      	lsrs	r3, r3, #1
 8005252:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005254:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b00      	cmp	r3, #0
 800525e:	d002      	beq.n	8005266 <HAL_PCD_EP_DB_Transmit+0x738>
 8005260:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005262:	3301      	adds	r3, #1
 8005264:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005266:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	b29a      	uxth	r2, r3
 800526c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800526e:	b29b      	uxth	r3, r3
 8005270:	029b      	lsls	r3, r3, #10
 8005272:	b29b      	uxth	r3, r3
 8005274:	4313      	orrs	r3, r2
 8005276:	b29a      	uxth	r2, r3
 8005278:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800527a:	801a      	strh	r2, [r3, #0]
 800527c:	e019      	b.n	80052b2 <HAL_PCD_EP_DB_Transmit+0x784>
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	785b      	ldrb	r3, [r3, #1]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d115      	bne.n	80052b2 <HAL_PCD_EP_DB_Transmit+0x784>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800528e:	b29b      	uxth	r3, r3
 8005290:	461a      	mov	r2, r3
 8005292:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005294:	4413      	add	r3, r2
 8005296:	657b      	str	r3, [r7, #84]	@ 0x54
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	011a      	lsls	r2, r3, #4
 800529e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052a0:	4413      	add	r3, r2
 80052a2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80052a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80052a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052b0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6818      	ldr	r0, [r3, #0]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	6959      	ldr	r1, [r3, #20]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	895a      	ldrh	r2, [r3, #10]
 80052be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	f004 fe6f 	bl	8009fa6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	461a      	mov	r2, r3
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	b29b      	uxth	r3, r3
 80052da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052e2:	82bb      	strh	r3, [r7, #20]
 80052e4:	8abb      	ldrh	r3, [r7, #20]
 80052e6:	f083 0310 	eor.w	r3, r3, #16
 80052ea:	82bb      	strh	r3, [r7, #20]
 80052ec:	8abb      	ldrh	r3, [r7, #20]
 80052ee:	f083 0320 	eor.w	r3, r3, #32
 80052f2:	82bb      	strh	r3, [r7, #20]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	461a      	mov	r2, r3
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	441a      	add	r2, r3
 8005302:	8abb      	ldrh	r3, [r7, #20]
 8005304:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005308:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800530c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005314:	b29b      	uxth	r3, r3
 8005316:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3790      	adds	r7, #144	@ 0x90
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005322:	b480      	push	{r7}
 8005324:	b087      	sub	sp, #28
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	607b      	str	r3, [r7, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	817b      	strh	r3, [r7, #10]
 8005330:	4613      	mov	r3, r2
 8005332:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005334:	897b      	ldrh	r3, [r7, #10]
 8005336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800533a:	b29b      	uxth	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00b      	beq.n	8005358 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005340:	897b      	ldrh	r3, [r7, #10]
 8005342:	f003 0207 	and.w	r2, r3, #7
 8005346:	4613      	mov	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	3310      	adds	r3, #16
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4413      	add	r3, r2
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	e009      	b.n	800536c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005358:	897a      	ldrh	r2, [r7, #10]
 800535a:	4613      	mov	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4413      	add	r3, r2
 800536a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800536c:	893b      	ldrh	r3, [r7, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d107      	bne.n	8005382 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2200      	movs	r2, #0
 8005376:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	b29a      	uxth	r2, r3
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	80da      	strh	r2, [r3, #6]
 8005380:	e00b      	b.n	800539a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	2201      	movs	r2, #1
 8005386:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	b29a      	uxth	r2, r3
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	0c1b      	lsrs	r3, r3, #16
 8005394:	b29a      	uxth	r2, r3
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	371c      	adds	r7, #28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bc80      	pop	{r7}
 80053a4:	4770      	bx	lr
	...

080053a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e272      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 8087 	beq.w	80054d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053c8:	4b92      	ldr	r3, [pc, #584]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f003 030c 	and.w	r3, r3, #12
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d00c      	beq.n	80053ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80053d4:	4b8f      	ldr	r3, [pc, #572]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f003 030c 	and.w	r3, r3, #12
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d112      	bne.n	8005406 <HAL_RCC_OscConfig+0x5e>
 80053e0:	4b8c      	ldr	r3, [pc, #560]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053ec:	d10b      	bne.n	8005406 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ee:	4b89      	ldr	r3, [pc, #548]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d06c      	beq.n	80054d4 <HAL_RCC_OscConfig+0x12c>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d168      	bne.n	80054d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e24c      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800540e:	d106      	bne.n	800541e <HAL_RCC_OscConfig+0x76>
 8005410:	4b80      	ldr	r3, [pc, #512]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a7f      	ldr	r2, [pc, #508]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005416:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	e02e      	b.n	800547c <HAL_RCC_OscConfig+0xd4>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10c      	bne.n	8005440 <HAL_RCC_OscConfig+0x98>
 8005426:	4b7b      	ldr	r3, [pc, #492]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a7a      	ldr	r2, [pc, #488]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 800542c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	4b78      	ldr	r3, [pc, #480]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a77      	ldr	r2, [pc, #476]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005438:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	e01d      	b.n	800547c <HAL_RCC_OscConfig+0xd4>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005448:	d10c      	bne.n	8005464 <HAL_RCC_OscConfig+0xbc>
 800544a:	4b72      	ldr	r3, [pc, #456]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a71      	ldr	r2, [pc, #452]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005450:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	4b6f      	ldr	r3, [pc, #444]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a6e      	ldr	r2, [pc, #440]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 800545c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	e00b      	b.n	800547c <HAL_RCC_OscConfig+0xd4>
 8005464:	4b6b      	ldr	r3, [pc, #428]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a6a      	ldr	r2, [pc, #424]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 800546a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	4b68      	ldr	r3, [pc, #416]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a67      	ldr	r2, [pc, #412]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005476:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800547a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d013      	beq.n	80054ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005484:	f7fd fcda 	bl	8002e3c <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800548c:	f7fd fcd6 	bl	8002e3c <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b64      	cmp	r3, #100	@ 0x64
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e200      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800549e:	4b5d      	ldr	r3, [pc, #372]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0f0      	beq.n	800548c <HAL_RCC_OscConfig+0xe4>
 80054aa:	e014      	b.n	80054d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ac:	f7fd fcc6 	bl	8002e3c <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054b4:	f7fd fcc2 	bl	8002e3c <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b64      	cmp	r3, #100	@ 0x64
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e1ec      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054c6:	4b53      	ldr	r3, [pc, #332]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1f0      	bne.n	80054b4 <HAL_RCC_OscConfig+0x10c>
 80054d2:	e000      	b.n	80054d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d063      	beq.n	80055aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054e2:	4b4c      	ldr	r3, [pc, #304]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f003 030c 	and.w	r3, r3, #12
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00b      	beq.n	8005506 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80054ee:	4b49      	ldr	r3, [pc, #292]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f003 030c 	and.w	r3, r3, #12
 80054f6:	2b08      	cmp	r3, #8
 80054f8:	d11c      	bne.n	8005534 <HAL_RCC_OscConfig+0x18c>
 80054fa:	4b46      	ldr	r3, [pc, #280]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d116      	bne.n	8005534 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005506:	4b43      	ldr	r3, [pc, #268]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d005      	beq.n	800551e <HAL_RCC_OscConfig+0x176>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d001      	beq.n	800551e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e1c0      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800551e:	4b3d      	ldr	r3, [pc, #244]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	4939      	ldr	r1, [pc, #228]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 800552e:	4313      	orrs	r3, r2
 8005530:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005532:	e03a      	b.n	80055aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d020      	beq.n	800557e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800553c:	4b36      	ldr	r3, [pc, #216]	@ (8005618 <HAL_RCC_OscConfig+0x270>)
 800553e:	2201      	movs	r2, #1
 8005540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005542:	f7fd fc7b 	bl	8002e3c <HAL_GetTick>
 8005546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005548:	e008      	b.n	800555c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800554a:	f7fd fc77 	bl	8002e3c <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d901      	bls.n	800555c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e1a1      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800555c:	4b2d      	ldr	r3, [pc, #180]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0f0      	beq.n	800554a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005568:	4b2a      	ldr	r3, [pc, #168]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	00db      	lsls	r3, r3, #3
 8005576:	4927      	ldr	r1, [pc, #156]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005578:	4313      	orrs	r3, r2
 800557a:	600b      	str	r3, [r1, #0]
 800557c:	e015      	b.n	80055aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800557e:	4b26      	ldr	r3, [pc, #152]	@ (8005618 <HAL_RCC_OscConfig+0x270>)
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005584:	f7fd fc5a 	bl	8002e3c <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800558c:	f7fd fc56 	bl	8002e3c <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e180      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800559e:	4b1d      	ldr	r3, [pc, #116]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f0      	bne.n	800558c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d03a      	beq.n	800562c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d019      	beq.n	80055f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055be:	4b17      	ldr	r3, [pc, #92]	@ (800561c <HAL_RCC_OscConfig+0x274>)
 80055c0:	2201      	movs	r2, #1
 80055c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c4:	f7fd fc3a 	bl	8002e3c <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055cc:	f7fd fc36 	bl	8002e3c <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e160      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055de:	4b0d      	ldr	r3, [pc, #52]	@ (8005614 <HAL_RCC_OscConfig+0x26c>)
 80055e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0f0      	beq.n	80055cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80055ea:	2001      	movs	r0, #1
 80055ec:	f000 fa9c 	bl	8005b28 <RCC_Delay>
 80055f0:	e01c      	b.n	800562c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055f2:	4b0a      	ldr	r3, [pc, #40]	@ (800561c <HAL_RCC_OscConfig+0x274>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055f8:	f7fd fc20 	bl	8002e3c <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055fe:	e00f      	b.n	8005620 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005600:	f7fd fc1c 	bl	8002e3c <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d908      	bls.n	8005620 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e146      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
 8005612:	bf00      	nop
 8005614:	40021000 	.word	0x40021000
 8005618:	42420000 	.word	0x42420000
 800561c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005620:	4b92      	ldr	r3, [pc, #584]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 8005622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e9      	bne.n	8005600 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 80a6 	beq.w	8005786 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800563a:	2300      	movs	r3, #0
 800563c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800563e:	4b8b      	ldr	r3, [pc, #556]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10d      	bne.n	8005666 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800564a:	4b88      	ldr	r3, [pc, #544]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	4a87      	ldr	r2, [pc, #540]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 8005650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005654:	61d3      	str	r3, [r2, #28]
 8005656:	4b85      	ldr	r3, [pc, #532]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800565e:	60bb      	str	r3, [r7, #8]
 8005660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005662:	2301      	movs	r3, #1
 8005664:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005666:	4b82      	ldr	r3, [pc, #520]	@ (8005870 <HAL_RCC_OscConfig+0x4c8>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800566e:	2b00      	cmp	r3, #0
 8005670:	d118      	bne.n	80056a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005672:	4b7f      	ldr	r3, [pc, #508]	@ (8005870 <HAL_RCC_OscConfig+0x4c8>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a7e      	ldr	r2, [pc, #504]	@ (8005870 <HAL_RCC_OscConfig+0x4c8>)
 8005678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800567c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800567e:	f7fd fbdd 	bl	8002e3c <HAL_GetTick>
 8005682:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005684:	e008      	b.n	8005698 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005686:	f7fd fbd9 	bl	8002e3c <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b64      	cmp	r3, #100	@ 0x64
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e103      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005698:	4b75      	ldr	r3, [pc, #468]	@ (8005870 <HAL_RCC_OscConfig+0x4c8>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0f0      	beq.n	8005686 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d106      	bne.n	80056ba <HAL_RCC_OscConfig+0x312>
 80056ac:	4b6f      	ldr	r3, [pc, #444]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	4a6e      	ldr	r2, [pc, #440]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 80056b2:	f043 0301 	orr.w	r3, r3, #1
 80056b6:	6213      	str	r3, [r2, #32]
 80056b8:	e02d      	b.n	8005716 <HAL_RCC_OscConfig+0x36e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10c      	bne.n	80056dc <HAL_RCC_OscConfig+0x334>
 80056c2:	4b6a      	ldr	r3, [pc, #424]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	4a69      	ldr	r2, [pc, #420]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 80056c8:	f023 0301 	bic.w	r3, r3, #1
 80056cc:	6213      	str	r3, [r2, #32]
 80056ce:	4b67      	ldr	r3, [pc, #412]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	4a66      	ldr	r2, [pc, #408]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 80056d4:	f023 0304 	bic.w	r3, r3, #4
 80056d8:	6213      	str	r3, [r2, #32]
 80056da:	e01c      	b.n	8005716 <HAL_RCC_OscConfig+0x36e>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	2b05      	cmp	r3, #5
 80056e2:	d10c      	bne.n	80056fe <HAL_RCC_OscConfig+0x356>
 80056e4:	4b61      	ldr	r3, [pc, #388]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	4a60      	ldr	r2, [pc, #384]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 80056ea:	f043 0304 	orr.w	r3, r3, #4
 80056ee:	6213      	str	r3, [r2, #32]
 80056f0:	4b5e      	ldr	r3, [pc, #376]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	4a5d      	ldr	r2, [pc, #372]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 80056f6:	f043 0301 	orr.w	r3, r3, #1
 80056fa:	6213      	str	r3, [r2, #32]
 80056fc:	e00b      	b.n	8005716 <HAL_RCC_OscConfig+0x36e>
 80056fe:	4b5b      	ldr	r3, [pc, #364]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	4a5a      	ldr	r2, [pc, #360]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 8005704:	f023 0301 	bic.w	r3, r3, #1
 8005708:	6213      	str	r3, [r2, #32]
 800570a:	4b58      	ldr	r3, [pc, #352]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	4a57      	ldr	r2, [pc, #348]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 8005710:	f023 0304 	bic.w	r3, r3, #4
 8005714:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d015      	beq.n	800574a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800571e:	f7fd fb8d 	bl	8002e3c <HAL_GetTick>
 8005722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005724:	e00a      	b.n	800573c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005726:	f7fd fb89 	bl	8002e3c <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005734:	4293      	cmp	r3, r2
 8005736:	d901      	bls.n	800573c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e0b1      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800573c:	4b4b      	ldr	r3, [pc, #300]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d0ee      	beq.n	8005726 <HAL_RCC_OscConfig+0x37e>
 8005748:	e014      	b.n	8005774 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800574a:	f7fd fb77 	bl	8002e3c <HAL_GetTick>
 800574e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005750:	e00a      	b.n	8005768 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005752:	f7fd fb73 	bl	8002e3c <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005760:	4293      	cmp	r3, r2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e09b      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005768:	4b40      	ldr	r3, [pc, #256]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1ee      	bne.n	8005752 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005774:	7dfb      	ldrb	r3, [r7, #23]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d105      	bne.n	8005786 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800577a:	4b3c      	ldr	r3, [pc, #240]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	4a3b      	ldr	r2, [pc, #236]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 8005780:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005784:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 8087 	beq.w	800589e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005790:	4b36      	ldr	r3, [pc, #216]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f003 030c 	and.w	r3, r3, #12
 8005798:	2b08      	cmp	r3, #8
 800579a:	d061      	beq.n	8005860 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d146      	bne.n	8005832 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a4:	4b33      	ldr	r3, [pc, #204]	@ (8005874 <HAL_RCC_OscConfig+0x4cc>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057aa:	f7fd fb47 	bl	8002e3c <HAL_GetTick>
 80057ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b2:	f7fd fb43 	bl	8002e3c <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e06d      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057c4:	4b29      	ldr	r3, [pc, #164]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1f0      	bne.n	80057b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057d8:	d108      	bne.n	80057ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80057da:	4b24      	ldr	r3, [pc, #144]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	4921      	ldr	r1, [pc, #132]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057ec:	4b1f      	ldr	r3, [pc, #124]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a19      	ldr	r1, [r3, #32]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fc:	430b      	orrs	r3, r1
 80057fe:	491b      	ldr	r1, [pc, #108]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 8005800:	4313      	orrs	r3, r2
 8005802:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005804:	4b1b      	ldr	r3, [pc, #108]	@ (8005874 <HAL_RCC_OscConfig+0x4cc>)
 8005806:	2201      	movs	r2, #1
 8005808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800580a:	f7fd fb17 	bl	8002e3c <HAL_GetTick>
 800580e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005810:	e008      	b.n	8005824 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005812:	f7fd fb13 	bl	8002e3c <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e03d      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005824:	4b11      	ldr	r3, [pc, #68]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0f0      	beq.n	8005812 <HAL_RCC_OscConfig+0x46a>
 8005830:	e035      	b.n	800589e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005832:	4b10      	ldr	r3, [pc, #64]	@ (8005874 <HAL_RCC_OscConfig+0x4cc>)
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005838:	f7fd fb00 	bl	8002e3c <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005840:	f7fd fafc 	bl	8002e3c <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e026      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005852:	4b06      	ldr	r3, [pc, #24]	@ (800586c <HAL_RCC_OscConfig+0x4c4>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1f0      	bne.n	8005840 <HAL_RCC_OscConfig+0x498>
 800585e:	e01e      	b.n	800589e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d107      	bne.n	8005878 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e019      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
 800586c:	40021000 	.word	0x40021000
 8005870:	40007000 	.word	0x40007000
 8005874:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005878:	4b0b      	ldr	r3, [pc, #44]	@ (80058a8 <HAL_RCC_OscConfig+0x500>)
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	429a      	cmp	r2, r3
 800588a:	d106      	bne.n	800589a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005896:	429a      	cmp	r2, r3
 8005898:	d001      	beq.n	800589e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e000      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40021000 	.word	0x40021000

080058ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e0d0      	b.n	8005a62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058c0:	4b6a      	ldr	r3, [pc, #424]	@ (8005a6c <HAL_RCC_ClockConfig+0x1c0>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d910      	bls.n	80058f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ce:	4b67      	ldr	r3, [pc, #412]	@ (8005a6c <HAL_RCC_ClockConfig+0x1c0>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f023 0207 	bic.w	r2, r3, #7
 80058d6:	4965      	ldr	r1, [pc, #404]	@ (8005a6c <HAL_RCC_ClockConfig+0x1c0>)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	4313      	orrs	r3, r2
 80058dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058de:	4b63      	ldr	r3, [pc, #396]	@ (8005a6c <HAL_RCC_ClockConfig+0x1c0>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0307 	and.w	r3, r3, #7
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d001      	beq.n	80058f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e0b8      	b.n	8005a62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d020      	beq.n	800593e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	d005      	beq.n	8005914 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005908:	4b59      	ldr	r3, [pc, #356]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	4a58      	ldr	r2, [pc, #352]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 800590e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005912:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	2b00      	cmp	r3, #0
 800591e:	d005      	beq.n	800592c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005920:	4b53      	ldr	r3, [pc, #332]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	4a52      	ldr	r2, [pc, #328]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 8005926:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800592a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800592c:	4b50      	ldr	r3, [pc, #320]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	494d      	ldr	r1, [pc, #308]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 800593a:	4313      	orrs	r3, r2
 800593c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d040      	beq.n	80059cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d107      	bne.n	8005962 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005952:	4b47      	ldr	r3, [pc, #284]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d115      	bne.n	800598a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e07f      	b.n	8005a62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	2b02      	cmp	r3, #2
 8005968:	d107      	bne.n	800597a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800596a:	4b41      	ldr	r3, [pc, #260]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d109      	bne.n	800598a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e073      	b.n	8005a62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800597a:	4b3d      	ldr	r3, [pc, #244]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e06b      	b.n	8005a62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800598a:	4b39      	ldr	r3, [pc, #228]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f023 0203 	bic.w	r2, r3, #3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	4936      	ldr	r1, [pc, #216]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 8005998:	4313      	orrs	r3, r2
 800599a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800599c:	f7fd fa4e 	bl	8002e3c <HAL_GetTick>
 80059a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059a2:	e00a      	b.n	80059ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059a4:	f7fd fa4a 	bl	8002e3c <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e053      	b.n	8005a62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ba:	4b2d      	ldr	r3, [pc, #180]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f003 020c 	and.w	r2, r3, #12
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d1eb      	bne.n	80059a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059cc:	4b27      	ldr	r3, [pc, #156]	@ (8005a6c <HAL_RCC_ClockConfig+0x1c0>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d210      	bcs.n	80059fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059da:	4b24      	ldr	r3, [pc, #144]	@ (8005a6c <HAL_RCC_ClockConfig+0x1c0>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f023 0207 	bic.w	r2, r3, #7
 80059e2:	4922      	ldr	r1, [pc, #136]	@ (8005a6c <HAL_RCC_ClockConfig+0x1c0>)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ea:	4b20      	ldr	r3, [pc, #128]	@ (8005a6c <HAL_RCC_ClockConfig+0x1c0>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0307 	and.w	r3, r3, #7
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d001      	beq.n	80059fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e032      	b.n	8005a62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d008      	beq.n	8005a1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a08:	4b19      	ldr	r3, [pc, #100]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	4916      	ldr	r1, [pc, #88]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d009      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a26:	4b12      	ldr	r3, [pc, #72]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	490e      	ldr	r1, [pc, #56]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a3a:	f000 f821 	bl	8005a80 <HAL_RCC_GetSysClockFreq>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	4b0b      	ldr	r3, [pc, #44]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	091b      	lsrs	r3, r3, #4
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	490a      	ldr	r1, [pc, #40]	@ (8005a74 <HAL_RCC_ClockConfig+0x1c8>)
 8005a4c:	5ccb      	ldrb	r3, [r1, r3]
 8005a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a52:	4a09      	ldr	r2, [pc, #36]	@ (8005a78 <HAL_RCC_ClockConfig+0x1cc>)
 8005a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a56:	4b09      	ldr	r3, [pc, #36]	@ (8005a7c <HAL_RCC_ClockConfig+0x1d0>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fd f9ac 	bl	8002db8 <HAL_InitTick>

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	40022000 	.word	0x40022000
 8005a70:	40021000 	.word	0x40021000
 8005a74:	0800dc10 	.word	0x0800dc10
 8005a78:	20000008 	.word	0x20000008
 8005a7c:	2000000c 	.word	0x2000000c

08005a80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60bb      	str	r3, [r7, #8]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	617b      	str	r3, [r7, #20]
 8005a92:	2300      	movs	r3, #0
 8005a94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8005b14 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f003 030c 	and.w	r3, r3, #12
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d002      	beq.n	8005ab0 <HAL_RCC_GetSysClockFreq+0x30>
 8005aaa:	2b08      	cmp	r3, #8
 8005aac:	d003      	beq.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x36>
 8005aae:	e027      	b.n	8005b00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ab0:	4b19      	ldr	r3, [pc, #100]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x98>)
 8005ab2:	613b      	str	r3, [r7, #16]
      break;
 8005ab4:	e027      	b.n	8005b06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	0c9b      	lsrs	r3, r3, #18
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	4a17      	ldr	r2, [pc, #92]	@ (8005b1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005ac0:	5cd3      	ldrb	r3, [r2, r3]
 8005ac2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d010      	beq.n	8005af0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005ace:	4b11      	ldr	r3, [pc, #68]	@ (8005b14 <HAL_RCC_GetSysClockFreq+0x94>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	0c5b      	lsrs	r3, r3, #17
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	4a11      	ldr	r2, [pc, #68]	@ (8005b20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005ada:	5cd3      	ldrb	r3, [r2, r3]
 8005adc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x98>)
 8005ae2:	fb03 f202 	mul.w	r2, r3, r2
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	e004      	b.n	8005afa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a0c      	ldr	r2, [pc, #48]	@ (8005b24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005af4:	fb02 f303 	mul.w	r3, r2, r3
 8005af8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	613b      	str	r3, [r7, #16]
      break;
 8005afe:	e002      	b.n	8005b06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b00:	4b05      	ldr	r3, [pc, #20]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b02:	613b      	str	r3, [r7, #16]
      break;
 8005b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b06:	693b      	ldr	r3, [r7, #16]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	371c      	adds	r7, #28
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bc80      	pop	{r7}
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	40021000 	.word	0x40021000
 8005b18:	007a1200 	.word	0x007a1200
 8005b1c:	0800dc20 	.word	0x0800dc20
 8005b20:	0800dc30 	.word	0x0800dc30
 8005b24:	003d0900 	.word	0x003d0900

08005b28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b30:	4b0a      	ldr	r3, [pc, #40]	@ (8005b5c <RCC_Delay+0x34>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a0a      	ldr	r2, [pc, #40]	@ (8005b60 <RCC_Delay+0x38>)
 8005b36:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3a:	0a5b      	lsrs	r3, r3, #9
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	fb02 f303 	mul.w	r3, r2, r3
 8005b42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b44:	bf00      	nop
  }
  while (Delay --);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	1e5a      	subs	r2, r3, #1
 8005b4a:	60fa      	str	r2, [r7, #12]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1f9      	bne.n	8005b44 <RCC_Delay+0x1c>
}
 8005b50:	bf00      	nop
 8005b52:	bf00      	nop
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bc80      	pop	{r7}
 8005b5a:	4770      	bx	lr
 8005b5c:	20000008 	.word	0x20000008
 8005b60:	10624dd3 	.word	0x10624dd3

08005b64 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	613b      	str	r3, [r7, #16]
 8005b70:	2300      	movs	r3, #0
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d07d      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005b80:	2300      	movs	r3, #0
 8005b82:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b84:	4b4f      	ldr	r3, [pc, #316]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10d      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b90:	4b4c      	ldr	r3, [pc, #304]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	4a4b      	ldr	r2, [pc, #300]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b9a:	61d3      	str	r3, [r2, #28]
 8005b9c:	4b49      	ldr	r3, [pc, #292]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b9e:	69db      	ldr	r3, [r3, #28]
 8005ba0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ba4:	60bb      	str	r3, [r7, #8]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bac:	4b46      	ldr	r3, [pc, #280]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d118      	bne.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bb8:	4b43      	ldr	r3, [pc, #268]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a42      	ldr	r2, [pc, #264]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bc4:	f7fd f93a 	bl	8002e3c <HAL_GetTick>
 8005bc8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bca:	e008      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bcc:	f7fd f936 	bl	8002e3c <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b64      	cmp	r3, #100	@ 0x64
 8005bd8:	d901      	bls.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e06d      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bde:	4b3a      	ldr	r3, [pc, #232]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0f0      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bea:	4b36      	ldr	r3, [pc, #216]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bf2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d02e      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d027      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c08:	4b2e      	ldr	r3, [pc, #184]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c10:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c12:	4b2e      	ldr	r3, [pc, #184]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c18:	4b2c      	ldr	r3, [pc, #176]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c1e:	4a29      	ldr	r2, [pc, #164]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d014      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c2e:	f7fd f905 	bl	8002e3c <HAL_GetTick>
 8005c32:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c34:	e00a      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c36:	f7fd f901 	bl	8002e3c <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e036      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0ee      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c58:	4b1a      	ldr	r3, [pc, #104]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	4917      	ldr	r1, [pc, #92]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d105      	bne.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c70:	4b14      	ldr	r3, [pc, #80]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	4a13      	ldr	r2, [pc, #76]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d008      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c88:	4b0e      	ldr	r3, [pc, #56]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	490b      	ldr	r1, [pc, #44]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0310 	and.w	r3, r3, #16
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d008      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ca6:	4b07      	ldr	r3, [pc, #28]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	4904      	ldr	r1, [pc, #16]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	40021000 	.word	0x40021000
 8005cc8:	40007000 	.word	0x40007000
 8005ccc:	42420440 	.word	0x42420440

08005cd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e041      	b.n	8005d66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d106      	bne.n	8005cfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fc fe50 	bl	800299c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4610      	mov	r0, r2
 8005d10:	f001 f936 	bl	8006f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
	...

08005d70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d001      	beq.n	8005d88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e03a      	b.n	8005dfe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 0201 	orr.w	r2, r2, #1
 8005d9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a18      	ldr	r2, [pc, #96]	@ (8005e08 <HAL_TIM_Base_Start_IT+0x98>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d00e      	beq.n	8005dc8 <HAL_TIM_Base_Start_IT+0x58>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005db2:	d009      	beq.n	8005dc8 <HAL_TIM_Base_Start_IT+0x58>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a14      	ldr	r2, [pc, #80]	@ (8005e0c <HAL_TIM_Base_Start_IT+0x9c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d004      	beq.n	8005dc8 <HAL_TIM_Base_Start_IT+0x58>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a13      	ldr	r2, [pc, #76]	@ (8005e10 <HAL_TIM_Base_Start_IT+0xa0>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d111      	bne.n	8005dec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 0307 	and.w	r3, r3, #7
 8005dd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b06      	cmp	r3, #6
 8005dd8:	d010      	beq.n	8005dfc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f042 0201 	orr.w	r2, r2, #1
 8005de8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dea:	e007      	b.n	8005dfc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 0201 	orr.w	r2, r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bc80      	pop	{r7}
 8005e06:	4770      	bx	lr
 8005e08:	40012c00 	.word	0x40012c00
 8005e0c:	40000400 	.word	0x40000400
 8005e10:	40000800 	.word	0x40000800

08005e14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e041      	b.n	8005eaa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d106      	bne.n	8005e40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f839 	bl	8005eb2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3304      	adds	r3, #4
 8005e50:	4619      	mov	r1, r3
 8005e52:	4610      	mov	r0, r2
 8005e54:	f001 f894 	bl	8006f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bc80      	pop	{r7}
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
 8005ed0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d109      	bne.n	8005ef0 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	bf0c      	ite	eq
 8005ee8:	2301      	moveq	r3, #1
 8005eea:	2300      	movne	r3, #0
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	e022      	b.n	8005f36 <HAL_TIM_PWM_Start_DMA+0x72>
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2b04      	cmp	r3, #4
 8005ef4:	d109      	bne.n	8005f0a <HAL_TIM_PWM_Start_DMA+0x46>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	bf0c      	ite	eq
 8005f02:	2301      	moveq	r3, #1
 8005f04:	2300      	movne	r3, #0
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	e015      	b.n	8005f36 <HAL_TIM_PWM_Start_DMA+0x72>
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b08      	cmp	r3, #8
 8005f0e:	d109      	bne.n	8005f24 <HAL_TIM_PWM_Start_DMA+0x60>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	bf0c      	ite	eq
 8005f1c:	2301      	moveq	r3, #1
 8005f1e:	2300      	movne	r3, #0
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	e008      	b.n	8005f36 <HAL_TIM_PWM_Start_DMA+0x72>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	bf0c      	ite	eq
 8005f30:	2301      	moveq	r3, #1
 8005f32:	2300      	movne	r3, #0
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	e153      	b.n	80061e6 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d109      	bne.n	8005f58 <HAL_TIM_PWM_Start_DMA+0x94>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	bf0c      	ite	eq
 8005f50:	2301      	moveq	r3, #1
 8005f52:	2300      	movne	r3, #0
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	e022      	b.n	8005f9e <HAL_TIM_PWM_Start_DMA+0xda>
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	d109      	bne.n	8005f72 <HAL_TIM_PWM_Start_DMA+0xae>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	bf0c      	ite	eq
 8005f6a:	2301      	moveq	r3, #1
 8005f6c:	2300      	movne	r3, #0
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	e015      	b.n	8005f9e <HAL_TIM_PWM_Start_DMA+0xda>
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2b08      	cmp	r3, #8
 8005f76:	d109      	bne.n	8005f8c <HAL_TIM_PWM_Start_DMA+0xc8>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	bf0c      	ite	eq
 8005f84:	2301      	moveq	r3, #1
 8005f86:	2300      	movne	r3, #0
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	e008      	b.n	8005f9e <HAL_TIM_PWM_Start_DMA+0xda>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	bf0c      	ite	eq
 8005f98:	2301      	moveq	r3, #1
 8005f9a:	2300      	movne	r3, #0
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d024      	beq.n	8005fec <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d002      	beq.n	8005fae <HAL_TIM_PWM_Start_DMA+0xea>
 8005fa8:	887b      	ldrh	r3, [r7, #2]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e119      	b.n	80061e6 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d104      	bne.n	8005fc2 <HAL_TIM_PWM_Start_DMA+0xfe>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fc0:	e016      	b.n	8005ff0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	d104      	bne.n	8005fd2 <HAL_TIM_PWM_Start_DMA+0x10e>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fd0:	e00e      	b.n	8005ff0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d104      	bne.n	8005fe2 <HAL_TIM_PWM_Start_DMA+0x11e>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fe0:	e006      	b.n	8005ff0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fea:	e001      	b.n	8005ff0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e0fa      	b.n	80061e6 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	2b0c      	cmp	r3, #12
 8005ff4:	f200 80ae 	bhi.w	8006154 <HAL_TIM_PWM_Start_DMA+0x290>
 8005ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8006000 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffe:	bf00      	nop
 8006000:	08006035 	.word	0x08006035
 8006004:	08006155 	.word	0x08006155
 8006008:	08006155 	.word	0x08006155
 800600c:	08006155 	.word	0x08006155
 8006010:	0800607d 	.word	0x0800607d
 8006014:	08006155 	.word	0x08006155
 8006018:	08006155 	.word	0x08006155
 800601c:	08006155 	.word	0x08006155
 8006020:	080060c5 	.word	0x080060c5
 8006024:	08006155 	.word	0x08006155
 8006028:	08006155 	.word	0x08006155
 800602c:	08006155 	.word	0x08006155
 8006030:	0800610d 	.word	0x0800610d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006038:	4a6d      	ldr	r2, [pc, #436]	@ (80061f0 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800603a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006040:	4a6c      	ldr	r2, [pc, #432]	@ (80061f4 <HAL_TIM_PWM_Start_DMA+0x330>)
 8006042:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006048:	4a6b      	ldr	r2, [pc, #428]	@ (80061f8 <HAL_TIM_PWM_Start_DMA+0x334>)
 800604a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3334      	adds	r3, #52	@ 0x34
 8006058:	461a      	mov	r2, r3
 800605a:	887b      	ldrh	r3, [r7, #2]
 800605c:	f7fd f884 	bl	8003168 <HAL_DMA_Start_IT>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e0bd      	b.n	80061e6 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68da      	ldr	r2, [r3, #12]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006078:	60da      	str	r2, [r3, #12]
      break;
 800607a:	e06e      	b.n	800615a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006080:	4a5b      	ldr	r2, [pc, #364]	@ (80061f0 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8006082:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006088:	4a5a      	ldr	r2, [pc, #360]	@ (80061f4 <HAL_TIM_PWM_Start_DMA+0x330>)
 800608a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006090:	4a59      	ldr	r2, [pc, #356]	@ (80061f8 <HAL_TIM_PWM_Start_DMA+0x334>)
 8006092:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006098:	6879      	ldr	r1, [r7, #4]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	3338      	adds	r3, #56	@ 0x38
 80060a0:	461a      	mov	r2, r3
 80060a2:	887b      	ldrh	r3, [r7, #2]
 80060a4:	f7fd f860 	bl	8003168 <HAL_DMA_Start_IT>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e099      	b.n	80061e6 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68da      	ldr	r2, [r3, #12]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80060c0:	60da      	str	r2, [r3, #12]
      break;
 80060c2:	e04a      	b.n	800615a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c8:	4a49      	ldr	r2, [pc, #292]	@ (80061f0 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80060ca:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d0:	4a48      	ldr	r2, [pc, #288]	@ (80061f4 <HAL_TIM_PWM_Start_DMA+0x330>)
 80060d2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d8:	4a47      	ldr	r2, [pc, #284]	@ (80061f8 <HAL_TIM_PWM_Start_DMA+0x334>)
 80060da:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80060e0:	6879      	ldr	r1, [r7, #4]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	333c      	adds	r3, #60	@ 0x3c
 80060e8:	461a      	mov	r2, r3
 80060ea:	887b      	ldrh	r3, [r7, #2]
 80060ec:	f7fd f83c 	bl	8003168 <HAL_DMA_Start_IT>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e075      	b.n	80061e6 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68da      	ldr	r2, [r3, #12]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006108:	60da      	str	r2, [r3, #12]
      break;
 800610a:	e026      	b.n	800615a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006110:	4a37      	ldr	r2, [pc, #220]	@ (80061f0 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8006112:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006118:	4a36      	ldr	r2, [pc, #216]	@ (80061f4 <HAL_TIM_PWM_Start_DMA+0x330>)
 800611a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006120:	4a35      	ldr	r2, [pc, #212]	@ (80061f8 <HAL_TIM_PWM_Start_DMA+0x334>)
 8006122:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006128:	6879      	ldr	r1, [r7, #4]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3340      	adds	r3, #64	@ 0x40
 8006130:	461a      	mov	r2, r3
 8006132:	887b      	ldrh	r3, [r7, #2]
 8006134:	f7fd f818 	bl	8003168 <HAL_DMA_Start_IT>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e051      	b.n	80061e6 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006150:	60da      	str	r2, [r3, #12]
      break;
 8006152:	e002      	b.n	800615a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	75fb      	strb	r3, [r7, #23]
      break;
 8006158:	bf00      	nop
  }

  if (status == HAL_OK)
 800615a:	7dfb      	ldrb	r3, [r7, #23]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d141      	bne.n	80061e4 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2201      	movs	r2, #1
 8006166:	68b9      	ldr	r1, [r7, #8]
 8006168:	4618      	mov	r0, r3
 800616a:	f001 fb34 	bl	80077d6 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a22      	ldr	r2, [pc, #136]	@ (80061fc <HAL_TIM_PWM_Start_DMA+0x338>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d107      	bne.n	8006188 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006186:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a1b      	ldr	r2, [pc, #108]	@ (80061fc <HAL_TIM_PWM_Start_DMA+0x338>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d00e      	beq.n	80061b0 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800619a:	d009      	beq.n	80061b0 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a17      	ldr	r2, [pc, #92]	@ (8006200 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d004      	beq.n	80061b0 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a16      	ldr	r2, [pc, #88]	@ (8006204 <HAL_TIM_PWM_Start_DMA+0x340>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d111      	bne.n	80061d4 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	2b06      	cmp	r3, #6
 80061c0:	d010      	beq.n	80061e4 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f042 0201 	orr.w	r2, r2, #1
 80061d0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061d2:	e007      	b.n	80061e4 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0201 	orr.w	r2, r2, #1
 80061e2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80061e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3718      	adds	r7, #24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	08006e6f 	.word	0x08006e6f
 80061f4:	08006f17 	.word	0x08006f17
 80061f8:	08006ddd 	.word	0x08006ddd
 80061fc:	40012c00 	.word	0x40012c00
 8006200:	40000400 	.word	0x40000400
 8006204:	40000800 	.word	0x40000800

08006208 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b0c      	cmp	r3, #12
 800621a:	d855      	bhi.n	80062c8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800621c:	a201      	add	r2, pc, #4	@ (adr r2, 8006224 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800621e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006222:	bf00      	nop
 8006224:	08006259 	.word	0x08006259
 8006228:	080062c9 	.word	0x080062c9
 800622c:	080062c9 	.word	0x080062c9
 8006230:	080062c9 	.word	0x080062c9
 8006234:	08006275 	.word	0x08006275
 8006238:	080062c9 	.word	0x080062c9
 800623c:	080062c9 	.word	0x080062c9
 8006240:	080062c9 	.word	0x080062c9
 8006244:	08006291 	.word	0x08006291
 8006248:	080062c9 	.word	0x080062c9
 800624c:	080062c9 	.word	0x080062c9
 8006250:	080062c9 	.word	0x080062c9
 8006254:	080062ad 	.word	0x080062ad
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006266:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626c:	4618      	mov	r0, r3
 800626e:	f7fc ffdb 	bl	8003228 <HAL_DMA_Abort_IT>
      break;
 8006272:	e02c      	b.n	80062ce <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006282:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006288:	4618      	mov	r0, r3
 800628a:	f7fc ffcd 	bl	8003228 <HAL_DMA_Abort_IT>
      break;
 800628e:	e01e      	b.n	80062ce <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68da      	ldr	r2, [r3, #12]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800629e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fc ffbf 	bl	8003228 <HAL_DMA_Abort_IT>
      break;
 80062aa:	e010      	b.n	80062ce <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80062ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fc ffb1 	bl	8003228 <HAL_DMA_Abort_IT>
      break;
 80062c6:	e002      	b.n	80062ce <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	73fb      	strb	r3, [r7, #15]
      break;
 80062cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d157      	bne.n	8006384 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2200      	movs	r2, #0
 80062da:	6839      	ldr	r1, [r7, #0]
 80062dc:	4618      	mov	r0, r3
 80062de:	f001 fa7a 	bl	80077d6 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a2a      	ldr	r2, [pc, #168]	@ (8006390 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d117      	bne.n	800631c <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6a1a      	ldr	r2, [r3, #32]
 80062f2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80062f6:	4013      	ands	r3, r2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10f      	bne.n	800631c <HAL_TIM_PWM_Stop_DMA+0x114>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6a1a      	ldr	r2, [r3, #32]
 8006302:	f240 4344 	movw	r3, #1092	@ 0x444
 8006306:	4013      	ands	r3, r2
 8006308:	2b00      	cmp	r3, #0
 800630a:	d107      	bne.n	800631c <HAL_TIM_PWM_Stop_DMA+0x114>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800631a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6a1a      	ldr	r2, [r3, #32]
 8006322:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006326:	4013      	ands	r3, r2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10f      	bne.n	800634c <HAL_TIM_PWM_Stop_DMA+0x144>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6a1a      	ldr	r2, [r3, #32]
 8006332:	f240 4344 	movw	r3, #1092	@ 0x444
 8006336:	4013      	ands	r3, r2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d107      	bne.n	800634c <HAL_TIM_PWM_Stop_DMA+0x144>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0201 	bic.w	r2, r2, #1
 800634a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d104      	bne.n	800635c <HAL_TIM_PWM_Stop_DMA+0x154>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800635a:	e013      	b.n	8006384 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	2b04      	cmp	r3, #4
 8006360:	d104      	bne.n	800636c <HAL_TIM_PWM_Stop_DMA+0x164>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800636a:	e00b      	b.n	8006384 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	2b08      	cmp	r3, #8
 8006370:	d104      	bne.n	800637c <HAL_TIM_PWM_Stop_DMA+0x174>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800637a:	e003      	b.n	8006384 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8006384:	7bfb      	ldrb	r3, [r7, #15]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	40012c00 	.word	0x40012c00

08006394 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e041      	b.n	800642a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d106      	bne.n	80063c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f839 	bl	8006432 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2202      	movs	r2, #2
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3304      	adds	r3, #4
 80063d0:	4619      	mov	r1, r3
 80063d2:	4610      	mov	r0, r2
 80063d4:	f000 fdd4 	bl	8006f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800643a:	bf00      	nop
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	bc80      	pop	{r7}
 8006442:	4770      	bx	lr

08006444 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d104      	bne.n	8006462 <HAL_TIM_IC_Start_IT+0x1e>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800645e:	b2db      	uxtb	r3, r3
 8006460:	e013      	b.n	800648a <HAL_TIM_IC_Start_IT+0x46>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2b04      	cmp	r3, #4
 8006466:	d104      	bne.n	8006472 <HAL_TIM_IC_Start_IT+0x2e>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800646e:	b2db      	uxtb	r3, r3
 8006470:	e00b      	b.n	800648a <HAL_TIM_IC_Start_IT+0x46>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2b08      	cmp	r3, #8
 8006476:	d104      	bne.n	8006482 <HAL_TIM_IC_Start_IT+0x3e>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800647e:	b2db      	uxtb	r3, r3
 8006480:	e003      	b.n	800648a <HAL_TIM_IC_Start_IT+0x46>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006488:	b2db      	uxtb	r3, r3
 800648a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d104      	bne.n	800649c <HAL_TIM_IC_Start_IT+0x58>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006498:	b2db      	uxtb	r3, r3
 800649a:	e013      	b.n	80064c4 <HAL_TIM_IC_Start_IT+0x80>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d104      	bne.n	80064ac <HAL_TIM_IC_Start_IT+0x68>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	e00b      	b.n	80064c4 <HAL_TIM_IC_Start_IT+0x80>
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2b08      	cmp	r3, #8
 80064b0:	d104      	bne.n	80064bc <HAL_TIM_IC_Start_IT+0x78>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	e003      	b.n	80064c4 <HAL_TIM_IC_Start_IT+0x80>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80064c6:	7bbb      	ldrb	r3, [r7, #14]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d102      	bne.n	80064d2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80064cc:	7b7b      	ldrb	r3, [r7, #13]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d001      	beq.n	80064d6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e0b8      	b.n	8006648 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d104      	bne.n	80064e6 <HAL_TIM_IC_Start_IT+0xa2>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064e4:	e013      	b.n	800650e <HAL_TIM_IC_Start_IT+0xca>
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b04      	cmp	r3, #4
 80064ea:	d104      	bne.n	80064f6 <HAL_TIM_IC_Start_IT+0xb2>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2202      	movs	r2, #2
 80064f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064f4:	e00b      	b.n	800650e <HAL_TIM_IC_Start_IT+0xca>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b08      	cmp	r3, #8
 80064fa:	d104      	bne.n	8006506 <HAL_TIM_IC_Start_IT+0xc2>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006504:	e003      	b.n	800650e <HAL_TIM_IC_Start_IT+0xca>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2202      	movs	r2, #2
 800650a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d104      	bne.n	800651e <HAL_TIM_IC_Start_IT+0xda>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2202      	movs	r2, #2
 8006518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800651c:	e013      	b.n	8006546 <HAL_TIM_IC_Start_IT+0x102>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b04      	cmp	r3, #4
 8006522:	d104      	bne.n	800652e <HAL_TIM_IC_Start_IT+0xea>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800652c:	e00b      	b.n	8006546 <HAL_TIM_IC_Start_IT+0x102>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b08      	cmp	r3, #8
 8006532:	d104      	bne.n	800653e <HAL_TIM_IC_Start_IT+0xfa>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2202      	movs	r2, #2
 8006538:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800653c:	e003      	b.n	8006546 <HAL_TIM_IC_Start_IT+0x102>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2202      	movs	r2, #2
 8006542:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b0c      	cmp	r3, #12
 800654a:	d841      	bhi.n	80065d0 <HAL_TIM_IC_Start_IT+0x18c>
 800654c:	a201      	add	r2, pc, #4	@ (adr r2, 8006554 <HAL_TIM_IC_Start_IT+0x110>)
 800654e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006552:	bf00      	nop
 8006554:	08006589 	.word	0x08006589
 8006558:	080065d1 	.word	0x080065d1
 800655c:	080065d1 	.word	0x080065d1
 8006560:	080065d1 	.word	0x080065d1
 8006564:	0800659b 	.word	0x0800659b
 8006568:	080065d1 	.word	0x080065d1
 800656c:	080065d1 	.word	0x080065d1
 8006570:	080065d1 	.word	0x080065d1
 8006574:	080065ad 	.word	0x080065ad
 8006578:	080065d1 	.word	0x080065d1
 800657c:	080065d1 	.word	0x080065d1
 8006580:	080065d1 	.word	0x080065d1
 8006584:	080065bf 	.word	0x080065bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f042 0202 	orr.w	r2, r2, #2
 8006596:	60da      	str	r2, [r3, #12]
      break;
 8006598:	e01d      	b.n	80065d6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68da      	ldr	r2, [r3, #12]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f042 0204 	orr.w	r2, r2, #4
 80065a8:	60da      	str	r2, [r3, #12]
      break;
 80065aa:	e014      	b.n	80065d6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68da      	ldr	r2, [r3, #12]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f042 0208 	orr.w	r2, r2, #8
 80065ba:	60da      	str	r2, [r3, #12]
      break;
 80065bc:	e00b      	b.n	80065d6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68da      	ldr	r2, [r3, #12]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f042 0210 	orr.w	r2, r2, #16
 80065cc:	60da      	str	r2, [r3, #12]
      break;
 80065ce:	e002      	b.n	80065d6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	73fb      	strb	r3, [r7, #15]
      break;
 80065d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80065d6:	7bfb      	ldrb	r3, [r7, #15]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d134      	bne.n	8006646 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2201      	movs	r2, #1
 80065e2:	6839      	ldr	r1, [r7, #0]
 80065e4:	4618      	mov	r0, r3
 80065e6:	f001 f8f6 	bl	80077d6 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a18      	ldr	r2, [pc, #96]	@ (8006650 <HAL_TIM_IC_Start_IT+0x20c>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00e      	beq.n	8006612 <HAL_TIM_IC_Start_IT+0x1ce>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065fc:	d009      	beq.n	8006612 <HAL_TIM_IC_Start_IT+0x1ce>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a14      	ldr	r2, [pc, #80]	@ (8006654 <HAL_TIM_IC_Start_IT+0x210>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d004      	beq.n	8006612 <HAL_TIM_IC_Start_IT+0x1ce>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a12      	ldr	r2, [pc, #72]	@ (8006658 <HAL_TIM_IC_Start_IT+0x214>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d111      	bne.n	8006636 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f003 0307 	and.w	r3, r3, #7
 800661c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	2b06      	cmp	r3, #6
 8006622:	d010      	beq.n	8006646 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0201 	orr.w	r2, r2, #1
 8006632:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006634:	e007      	b.n	8006646 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f042 0201 	orr.w	r2, r2, #1
 8006644:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006646:	7bfb      	ldrb	r3, [r7, #15]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	40012c00 	.word	0x40012c00
 8006654:	40000400 	.word	0x40000400
 8006658:	40000800 	.word	0x40000800

0800665c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d020      	beq.n	80066c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01b      	beq.n	80066c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f06f 0202 	mvn.w	r2, #2
 8006690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	f003 0303 	and.w	r3, r3, #3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7fb febe 	bl	8002428 <HAL_TIM_IC_CaptureCallback>
 80066ac:	e005      	b.n	80066ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fb70 	bl	8006d94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7fc f909 	bl	80028cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f003 0304 	and.w	r3, r3, #4
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d020      	beq.n	800670c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d01b      	beq.n	800670c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f06f 0204 	mvn.w	r2, #4
 80066dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2202      	movs	r2, #2
 80066e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7fb fe98 	bl	8002428 <HAL_TIM_IC_CaptureCallback>
 80066f8:	e005      	b.n	8006706 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fb4a 	bl	8006d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7fc f8e3 	bl	80028cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f003 0308 	and.w	r3, r3, #8
 8006712:	2b00      	cmp	r3, #0
 8006714:	d020      	beq.n	8006758 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f003 0308 	and.w	r3, r3, #8
 800671c:	2b00      	cmp	r3, #0
 800671e:	d01b      	beq.n	8006758 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f06f 0208 	mvn.w	r2, #8
 8006728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2204      	movs	r2, #4
 800672e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f7fb fe72 	bl	8002428 <HAL_TIM_IC_CaptureCallback>
 8006744:	e005      	b.n	8006752 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fb24 	bl	8006d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7fc f8bd 	bl	80028cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	f003 0310 	and.w	r3, r3, #16
 800675e:	2b00      	cmp	r3, #0
 8006760:	d020      	beq.n	80067a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f003 0310 	and.w	r3, r3, #16
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01b      	beq.n	80067a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f06f 0210 	mvn.w	r2, #16
 8006774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2208      	movs	r2, #8
 800677a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7fb fe4c 	bl	8002428 <HAL_TIM_IC_CaptureCallback>
 8006790:	e005      	b.n	800679e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fafe 	bl	8006d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7fc f897 	bl	80028cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00c      	beq.n	80067c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d007      	beq.n	80067c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f06f 0201 	mvn.w	r2, #1
 80067c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7fb fe96 	bl	80024f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00c      	beq.n	80067ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d007      	beq.n	80067ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80067e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f001 f8d2 	bl	8007990 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00c      	beq.n	8006810 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d007      	beq.n	8006810 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fad4 	bl	8006db8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f003 0320 	and.w	r3, r3, #32
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00c      	beq.n	8006834 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f003 0320 	and.w	r3, r3, #32
 8006820:	2b00      	cmp	r3, #0
 8006822:	d007      	beq.n	8006834 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f06f 0220 	mvn.w	r2, #32
 800682c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f001 f8a5 	bl	800797e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006834:	bf00      	nop
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006848:	2300      	movs	r3, #0
 800684a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006852:	2b01      	cmp	r3, #1
 8006854:	d101      	bne.n	800685a <HAL_TIM_IC_ConfigChannel+0x1e>
 8006856:	2302      	movs	r3, #2
 8006858:	e088      	b.n	800696c <HAL_TIM_IC_ConfigChannel+0x130>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d11b      	bne.n	80068a0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006878:	f000 fe0a 	bl	8007490 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	699a      	ldr	r2, [r3, #24]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 020c 	bic.w	r2, r2, #12
 800688a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6999      	ldr	r1, [r3, #24]
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	689a      	ldr	r2, [r3, #8]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	619a      	str	r2, [r3, #24]
 800689e:	e060      	b.n	8006962 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b04      	cmp	r3, #4
 80068a4:	d11c      	bne.n	80068e0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80068b6:	f000 fe73 	bl	80075a0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	699a      	ldr	r2, [r3, #24]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80068c8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6999      	ldr	r1, [r3, #24]
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	021a      	lsls	r2, r3, #8
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	619a      	str	r2, [r3, #24]
 80068de:	e040      	b.n	8006962 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b08      	cmp	r3, #8
 80068e4:	d11b      	bne.n	800691e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80068f6:	f000 febe 	bl	8007676 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	69da      	ldr	r2, [r3, #28]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 020c 	bic.w	r2, r2, #12
 8006908:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	69d9      	ldr	r1, [r3, #28]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	430a      	orrs	r2, r1
 800691a:	61da      	str	r2, [r3, #28]
 800691c:	e021      	b.n	8006962 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b0c      	cmp	r3, #12
 8006922:	d11c      	bne.n	800695e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006934:	f000 feda 	bl	80076ec <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	69da      	ldr	r2, [r3, #28]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006946:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	69d9      	ldr	r1, [r3, #28]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	021a      	lsls	r2, r3, #8
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	430a      	orrs	r2, r1
 800695a:	61da      	str	r2, [r3, #28]
 800695c:	e001      	b.n	8006962 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800696a:	7dfb      	ldrb	r3, [r7, #23]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3718      	adds	r7, #24
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800698a:	2b01      	cmp	r3, #1
 800698c:	d101      	bne.n	8006992 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800698e:	2302      	movs	r3, #2
 8006990:	e0ae      	b.n	8006af0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b0c      	cmp	r3, #12
 800699e:	f200 809f 	bhi.w	8006ae0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80069a2:	a201      	add	r2, pc, #4	@ (adr r2, 80069a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a8:	080069dd 	.word	0x080069dd
 80069ac:	08006ae1 	.word	0x08006ae1
 80069b0:	08006ae1 	.word	0x08006ae1
 80069b4:	08006ae1 	.word	0x08006ae1
 80069b8:	08006a1d 	.word	0x08006a1d
 80069bc:	08006ae1 	.word	0x08006ae1
 80069c0:	08006ae1 	.word	0x08006ae1
 80069c4:	08006ae1 	.word	0x08006ae1
 80069c8:	08006a5f 	.word	0x08006a5f
 80069cc:	08006ae1 	.word	0x08006ae1
 80069d0:	08006ae1 	.word	0x08006ae1
 80069d4:	08006ae1 	.word	0x08006ae1
 80069d8:	08006a9f 	.word	0x08006a9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68b9      	ldr	r1, [r7, #8]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 fb3a 	bl	800705c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	699a      	ldr	r2, [r3, #24]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f042 0208 	orr.w	r2, r2, #8
 80069f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	699a      	ldr	r2, [r3, #24]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0204 	bic.w	r2, r2, #4
 8006a06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6999      	ldr	r1, [r3, #24]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	691a      	ldr	r2, [r3, #16]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	619a      	str	r2, [r3, #24]
      break;
 8006a1a:	e064      	b.n	8006ae6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68b9      	ldr	r1, [r7, #8]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 fb80 	bl	8007128 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	699a      	ldr	r2, [r3, #24]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	699a      	ldr	r2, [r3, #24]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6999      	ldr	r1, [r3, #24]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	021a      	lsls	r2, r3, #8
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	619a      	str	r2, [r3, #24]
      break;
 8006a5c:	e043      	b.n	8006ae6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68b9      	ldr	r1, [r7, #8]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 fbc9 	bl	80071fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	69da      	ldr	r2, [r3, #28]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f042 0208 	orr.w	r2, r2, #8
 8006a78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69da      	ldr	r2, [r3, #28]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 0204 	bic.w	r2, r2, #4
 8006a88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	69d9      	ldr	r1, [r3, #28]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	691a      	ldr	r2, [r3, #16]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	61da      	str	r2, [r3, #28]
      break;
 8006a9c:	e023      	b.n	8006ae6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68b9      	ldr	r1, [r7, #8]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 fc13 	bl	80072d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	69da      	ldr	r2, [r3, #28]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ab8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	69da      	ldr	r2, [r3, #28]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ac8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69d9      	ldr	r1, [r3, #28]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	021a      	lsls	r2, r3, #8
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	61da      	str	r2, [r3, #28]
      break;
 8006ade:	e002      	b.n	8006ae6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ae4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3718      	adds	r7, #24
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b02:	2300      	movs	r3, #0
 8006b04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d101      	bne.n	8006b14 <HAL_TIM_ConfigClockSource+0x1c>
 8006b10:	2302      	movs	r3, #2
 8006b12:	e0b4      	b.n	8006c7e <HAL_TIM_ConfigClockSource+0x186>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006b32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b4c:	d03e      	beq.n	8006bcc <HAL_TIM_ConfigClockSource+0xd4>
 8006b4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b52:	f200 8087 	bhi.w	8006c64 <HAL_TIM_ConfigClockSource+0x16c>
 8006b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b5a:	f000 8086 	beq.w	8006c6a <HAL_TIM_ConfigClockSource+0x172>
 8006b5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b62:	d87f      	bhi.n	8006c64 <HAL_TIM_ConfigClockSource+0x16c>
 8006b64:	2b70      	cmp	r3, #112	@ 0x70
 8006b66:	d01a      	beq.n	8006b9e <HAL_TIM_ConfigClockSource+0xa6>
 8006b68:	2b70      	cmp	r3, #112	@ 0x70
 8006b6a:	d87b      	bhi.n	8006c64 <HAL_TIM_ConfigClockSource+0x16c>
 8006b6c:	2b60      	cmp	r3, #96	@ 0x60
 8006b6e:	d050      	beq.n	8006c12 <HAL_TIM_ConfigClockSource+0x11a>
 8006b70:	2b60      	cmp	r3, #96	@ 0x60
 8006b72:	d877      	bhi.n	8006c64 <HAL_TIM_ConfigClockSource+0x16c>
 8006b74:	2b50      	cmp	r3, #80	@ 0x50
 8006b76:	d03c      	beq.n	8006bf2 <HAL_TIM_ConfigClockSource+0xfa>
 8006b78:	2b50      	cmp	r3, #80	@ 0x50
 8006b7a:	d873      	bhi.n	8006c64 <HAL_TIM_ConfigClockSource+0x16c>
 8006b7c:	2b40      	cmp	r3, #64	@ 0x40
 8006b7e:	d058      	beq.n	8006c32 <HAL_TIM_ConfigClockSource+0x13a>
 8006b80:	2b40      	cmp	r3, #64	@ 0x40
 8006b82:	d86f      	bhi.n	8006c64 <HAL_TIM_ConfigClockSource+0x16c>
 8006b84:	2b30      	cmp	r3, #48	@ 0x30
 8006b86:	d064      	beq.n	8006c52 <HAL_TIM_ConfigClockSource+0x15a>
 8006b88:	2b30      	cmp	r3, #48	@ 0x30
 8006b8a:	d86b      	bhi.n	8006c64 <HAL_TIM_ConfigClockSource+0x16c>
 8006b8c:	2b20      	cmp	r3, #32
 8006b8e:	d060      	beq.n	8006c52 <HAL_TIM_ConfigClockSource+0x15a>
 8006b90:	2b20      	cmp	r3, #32
 8006b92:	d867      	bhi.n	8006c64 <HAL_TIM_ConfigClockSource+0x16c>
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d05c      	beq.n	8006c52 <HAL_TIM_ConfigClockSource+0x15a>
 8006b98:	2b10      	cmp	r3, #16
 8006b9a:	d05a      	beq.n	8006c52 <HAL_TIM_ConfigClockSource+0x15a>
 8006b9c:	e062      	b.n	8006c64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006bae:	f000 fdf3 	bl	8007798 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006bc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	609a      	str	r2, [r3, #8]
      break;
 8006bca:	e04f      	b.n	8006c6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006bdc:	f000 fddc 	bl	8007798 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689a      	ldr	r2, [r3, #8]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006bee:	609a      	str	r2, [r3, #8]
      break;
 8006bf0:	e03c      	b.n	8006c6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bfe:	461a      	mov	r2, r3
 8006c00:	f000 fca0 	bl	8007544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2150      	movs	r1, #80	@ 0x50
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 fdaa 	bl	8007764 <TIM_ITRx_SetConfig>
      break;
 8006c10:	e02c      	b.n	8006c6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c1e:	461a      	mov	r2, r3
 8006c20:	f000 fcfa 	bl	8007618 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2160      	movs	r1, #96	@ 0x60
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 fd9a 	bl	8007764 <TIM_ITRx_SetConfig>
      break;
 8006c30:	e01c      	b.n	8006c6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c3e:	461a      	mov	r2, r3
 8006c40:	f000 fc80 	bl	8007544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2140      	movs	r1, #64	@ 0x40
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 fd8a 	bl	8007764 <TIM_ITRx_SetConfig>
      break;
 8006c50:	e00c      	b.n	8006c6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	f000 fd81 	bl	8007764 <TIM_ITRx_SetConfig>
      break;
 8006c62:	e003      	b.n	8006c6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	73fb      	strb	r3, [r7, #15]
      break;
 8006c68:	e000      	b.n	8006c6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b082      	sub	sp, #8
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d101      	bne.n	8006c9e <HAL_TIM_SlaveConfigSynchro+0x18>
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	e031      	b.n	8006d02 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2202      	movs	r2, #2
 8006caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fb5b 	bl	800736c <TIM_SlaveTimer_SetConfig>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d009      	beq.n	8006cd0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e018      	b.n	8006d02 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68da      	ldr	r2, [r3, #12]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cde:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68da      	ldr	r2, [r3, #12]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006cee:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
	...

08006d0c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b0c      	cmp	r3, #12
 8006d1e:	d831      	bhi.n	8006d84 <HAL_TIM_ReadCapturedValue+0x78>
 8006d20:	a201      	add	r2, pc, #4	@ (adr r2, 8006d28 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006d5d 	.word	0x08006d5d
 8006d2c:	08006d85 	.word	0x08006d85
 8006d30:	08006d85 	.word	0x08006d85
 8006d34:	08006d85 	.word	0x08006d85
 8006d38:	08006d67 	.word	0x08006d67
 8006d3c:	08006d85 	.word	0x08006d85
 8006d40:	08006d85 	.word	0x08006d85
 8006d44:	08006d85 	.word	0x08006d85
 8006d48:	08006d71 	.word	0x08006d71
 8006d4c:	08006d85 	.word	0x08006d85
 8006d50:	08006d85 	.word	0x08006d85
 8006d54:	08006d85 	.word	0x08006d85
 8006d58:	08006d7b 	.word	0x08006d7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d62:	60fb      	str	r3, [r7, #12]

      break;
 8006d64:	e00f      	b.n	8006d86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6c:	60fb      	str	r3, [r7, #12]

      break;
 8006d6e:	e00a      	b.n	8006d86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d76:	60fb      	str	r3, [r7, #12]

      break;
 8006d78:	e005      	b.n	8006d86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d80:	60fb      	str	r3, [r7, #12]

      break;
 8006d82:	e000      	b.n	8006d86 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006d84:	bf00      	nop
  }

  return tmpreg;
 8006d86:	68fb      	ldr	r3, [r7, #12]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bc80      	pop	{r7}
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop

08006d94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bc80      	pop	{r7}
 8006da4:	4770      	bx	lr

08006da6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006dae:	bf00      	nop
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bc80      	pop	{r7}
 8006db6:	4770      	bx	lr

08006db8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bc80      	pop	{r7}
 8006dc8:	4770      	bx	lr

08006dca <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b083      	sub	sp, #12
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006dd2:	bf00      	nop
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr

08006ddc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d107      	bne.n	8006e04 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2201      	movs	r2, #1
 8006df8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e02:	e02a      	b.n	8006e5a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d107      	bne.n	8006e1e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2202      	movs	r2, #2
 8006e12:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e1c:	e01d      	b.n	8006e5a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d107      	bne.n	8006e38 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2204      	movs	r2, #4
 8006e2c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e36:	e010      	b.n	8006e5a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d107      	bne.n	8006e52 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2208      	movs	r2, #8
 8006e46:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006e50:	e003      	b.n	8006e5a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f7ff ffb5 	bl	8006dca <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	771a      	strb	r2, [r3, #28]
}
 8006e66:	bf00      	nop
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d10b      	bne.n	8006e9e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d136      	bne.n	8006f02 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e9c:	e031      	b.n	8006f02 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d10b      	bne.n	8006ec0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d125      	bne.n	8006f02 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ebe:	e020      	b.n	8006f02 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d10b      	bne.n	8006ee2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2204      	movs	r2, #4
 8006ece:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d114      	bne.n	8006f02 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ee0:	e00f      	b.n	8006f02 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d10a      	bne.n	8006f02 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2208      	movs	r2, #8
 8006ef0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d103      	bne.n	8006f02 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f7fb fce2 	bl	80028cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	771a      	strb	r2, [r3, #28]
}
 8006f0e:	bf00      	nop
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b084      	sub	sp, #16
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f22:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d103      	bne.n	8006f36 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2201      	movs	r2, #1
 8006f32:	771a      	strb	r2, [r3, #28]
 8006f34:	e019      	b.n	8006f6a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d103      	bne.n	8006f48 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2202      	movs	r2, #2
 8006f44:	771a      	strb	r2, [r3, #28]
 8006f46:	e010      	b.n	8006f6a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d103      	bne.n	8006f5a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2204      	movs	r2, #4
 8006f56:	771a      	strb	r2, [r3, #28]
 8006f58:	e007      	b.n	8006f6a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d102      	bne.n	8006f6a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2208      	movs	r2, #8
 8006f68:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f7ff ff1b 	bl	8006da6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	771a      	strb	r2, [r3, #28]
}
 8006f76:	bf00      	nop
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
	...

08006f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a2f      	ldr	r2, [pc, #188]	@ (8007050 <TIM_Base_SetConfig+0xd0>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d00b      	beq.n	8006fb0 <TIM_Base_SetConfig+0x30>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f9e:	d007      	beq.n	8006fb0 <TIM_Base_SetConfig+0x30>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a2c      	ldr	r2, [pc, #176]	@ (8007054 <TIM_Base_SetConfig+0xd4>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d003      	beq.n	8006fb0 <TIM_Base_SetConfig+0x30>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a2b      	ldr	r2, [pc, #172]	@ (8007058 <TIM_Base_SetConfig+0xd8>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d108      	bne.n	8006fc2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a22      	ldr	r2, [pc, #136]	@ (8007050 <TIM_Base_SetConfig+0xd0>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d00b      	beq.n	8006fe2 <TIM_Base_SetConfig+0x62>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fd0:	d007      	beq.n	8006fe2 <TIM_Base_SetConfig+0x62>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a1f      	ldr	r2, [pc, #124]	@ (8007054 <TIM_Base_SetConfig+0xd4>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d003      	beq.n	8006fe2 <TIM_Base_SetConfig+0x62>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8007058 <TIM_Base_SetConfig+0xd8>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d108      	bne.n	8006ff4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	689a      	ldr	r2, [r3, #8]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a0d      	ldr	r2, [pc, #52]	@ (8007050 <TIM_Base_SetConfig+0xd0>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d103      	bne.n	8007028 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	691a      	ldr	r2, [r3, #16]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	2b00      	cmp	r3, #0
 8007038:	d005      	beq.n	8007046 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	f023 0201 	bic.w	r2, r3, #1
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	611a      	str	r2, [r3, #16]
  }
}
 8007046:	bf00      	nop
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	bc80      	pop	{r7}
 800704e:	4770      	bx	lr
 8007050:	40012c00 	.word	0x40012c00
 8007054:	40000400 	.word	0x40000400
 8007058:	40000800 	.word	0x40000800

0800705c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	f023 0201 	bic.w	r2, r3, #1
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800708a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f023 0303 	bic.w	r3, r3, #3
 8007092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	4313      	orrs	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f023 0302 	bic.w	r3, r3, #2
 80070a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a1c      	ldr	r2, [pc, #112]	@ (8007124 <TIM_OC1_SetConfig+0xc8>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d10c      	bne.n	80070d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	f023 0308 	bic.w	r3, r3, #8
 80070be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	f023 0304 	bic.w	r3, r3, #4
 80070d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a13      	ldr	r2, [pc, #76]	@ (8007124 <TIM_OC1_SetConfig+0xc8>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d111      	bne.n	80070fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80070e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	621a      	str	r2, [r3, #32]
}
 8007118:	bf00      	nop
 800711a:	371c      	adds	r7, #28
 800711c:	46bd      	mov	sp, r7
 800711e:	bc80      	pop	{r7}
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	40012c00 	.word	0x40012c00

08007128 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a1b      	ldr	r3, [r3, #32]
 800713c:	f023 0210 	bic.w	r2, r3, #16
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800715e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	021b      	lsls	r3, r3, #8
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	4313      	orrs	r3, r2
 800716a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	f023 0320 	bic.w	r3, r3, #32
 8007172:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	011b      	lsls	r3, r3, #4
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	4313      	orrs	r3, r2
 800717e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a1d      	ldr	r2, [pc, #116]	@ (80071f8 <TIM_OC2_SetConfig+0xd0>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d10d      	bne.n	80071a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800718e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	011b      	lsls	r3, r3, #4
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	4313      	orrs	r3, r2
 800719a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a14      	ldr	r2, [pc, #80]	@ (80071f8 <TIM_OC2_SetConfig+0xd0>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d113      	bne.n	80071d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80071b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80071ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	621a      	str	r2, [r3, #32]
}
 80071ee:	bf00      	nop
 80071f0:	371c      	adds	r7, #28
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bc80      	pop	{r7}
 80071f6:	4770      	bx	lr
 80071f8:	40012c00 	.word	0x40012c00

080071fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	69db      	ldr	r3, [r3, #28]
 8007222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800722a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f023 0303 	bic.w	r3, r3, #3
 8007232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	4313      	orrs	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	021b      	lsls	r3, r3, #8
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	4313      	orrs	r3, r2
 8007250:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a1d      	ldr	r2, [pc, #116]	@ (80072cc <TIM_OC3_SetConfig+0xd0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d10d      	bne.n	8007276 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007260:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	021b      	lsls	r3, r3, #8
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	4313      	orrs	r3, r2
 800726c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a14      	ldr	r2, [pc, #80]	@ (80072cc <TIM_OC3_SetConfig+0xd0>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d113      	bne.n	80072a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800728c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	4313      	orrs	r3, r2
 8007298:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	011b      	lsls	r3, r3, #4
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	621a      	str	r2, [r3, #32]
}
 80072c0:	bf00      	nop
 80072c2:	371c      	adds	r7, #28
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bc80      	pop	{r7}
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	40012c00 	.word	0x40012c00

080072d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b087      	sub	sp, #28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a1b      	ldr	r3, [r3, #32]
 80072e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	69db      	ldr	r3, [r3, #28]
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	021b      	lsls	r3, r3, #8
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	4313      	orrs	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800731a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	031b      	lsls	r3, r3, #12
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	4313      	orrs	r3, r2
 8007326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a0f      	ldr	r2, [pc, #60]	@ (8007368 <TIM_OC4_SetConfig+0x98>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d109      	bne.n	8007344 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007336:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	019b      	lsls	r3, r3, #6
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	4313      	orrs	r3, r2
 8007342:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	685a      	ldr	r2, [r3, #4]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	621a      	str	r2, [r3, #32]
}
 800735e:	bf00      	nop
 8007360:	371c      	adds	r7, #28
 8007362:	46bd      	mov	sp, r7
 8007364:	bc80      	pop	{r7}
 8007366:	4770      	bx	lr
 8007368:	40012c00 	.word	0x40012c00

0800736c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007376:	2300      	movs	r3, #0
 8007378:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007388:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	4313      	orrs	r3, r2
 8007392:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f023 0307 	bic.w	r3, r3, #7
 800739a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	2b70      	cmp	r3, #112	@ 0x70
 80073b4:	d01a      	beq.n	80073ec <TIM_SlaveTimer_SetConfig+0x80>
 80073b6:	2b70      	cmp	r3, #112	@ 0x70
 80073b8:	d860      	bhi.n	800747c <TIM_SlaveTimer_SetConfig+0x110>
 80073ba:	2b60      	cmp	r3, #96	@ 0x60
 80073bc:	d054      	beq.n	8007468 <TIM_SlaveTimer_SetConfig+0xfc>
 80073be:	2b60      	cmp	r3, #96	@ 0x60
 80073c0:	d85c      	bhi.n	800747c <TIM_SlaveTimer_SetConfig+0x110>
 80073c2:	2b50      	cmp	r3, #80	@ 0x50
 80073c4:	d046      	beq.n	8007454 <TIM_SlaveTimer_SetConfig+0xe8>
 80073c6:	2b50      	cmp	r3, #80	@ 0x50
 80073c8:	d858      	bhi.n	800747c <TIM_SlaveTimer_SetConfig+0x110>
 80073ca:	2b40      	cmp	r3, #64	@ 0x40
 80073cc:	d019      	beq.n	8007402 <TIM_SlaveTimer_SetConfig+0x96>
 80073ce:	2b40      	cmp	r3, #64	@ 0x40
 80073d0:	d854      	bhi.n	800747c <TIM_SlaveTimer_SetConfig+0x110>
 80073d2:	2b30      	cmp	r3, #48	@ 0x30
 80073d4:	d055      	beq.n	8007482 <TIM_SlaveTimer_SetConfig+0x116>
 80073d6:	2b30      	cmp	r3, #48	@ 0x30
 80073d8:	d850      	bhi.n	800747c <TIM_SlaveTimer_SetConfig+0x110>
 80073da:	2b20      	cmp	r3, #32
 80073dc:	d051      	beq.n	8007482 <TIM_SlaveTimer_SetConfig+0x116>
 80073de:	2b20      	cmp	r3, #32
 80073e0:	d84c      	bhi.n	800747c <TIM_SlaveTimer_SetConfig+0x110>
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d04d      	beq.n	8007482 <TIM_SlaveTimer_SetConfig+0x116>
 80073e6:	2b10      	cmp	r3, #16
 80073e8:	d04b      	beq.n	8007482 <TIM_SlaveTimer_SetConfig+0x116>
 80073ea:	e047      	b.n	800747c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80073fc:	f000 f9cc 	bl	8007798 <TIM_ETR_SetConfig>
      break;
 8007400:	e040      	b.n	8007484 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b05      	cmp	r3, #5
 8007408:	d101      	bne.n	800740e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e03b      	b.n	8007486 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	6a1b      	ldr	r3, [r3, #32]
 8007414:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6a1a      	ldr	r2, [r3, #32]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 0201 	bic.w	r2, r2, #1
 8007424:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007434:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	011b      	lsls	r3, r3, #4
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	4313      	orrs	r3, r2
 8007440:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	621a      	str	r2, [r3, #32]
      break;
 8007452:	e017      	b.n	8007484 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007460:	461a      	mov	r2, r3
 8007462:	f000 f86f 	bl	8007544 <TIM_TI1_ConfigInputStage>
      break;
 8007466:	e00d      	b.n	8007484 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007474:	461a      	mov	r2, r3
 8007476:	f000 f8cf 	bl	8007618 <TIM_TI2_ConfigInputStage>
      break;
 800747a:	e003      	b.n	8007484 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	75fb      	strb	r3, [r7, #23]
      break;
 8007480:	e000      	b.n	8007484 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007482:	bf00      	nop
  }

  return status;
 8007484:	7dfb      	ldrb	r3, [r7, #23]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3718      	adds	r7, #24
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
	...

08007490 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007490:	b480      	push	{r7}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
 800749c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6a1b      	ldr	r3, [r3, #32]
 80074a8:	f023 0201 	bic.w	r2, r3, #1
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	4a1f      	ldr	r2, [pc, #124]	@ (8007538 <TIM_TI1_SetConfig+0xa8>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00b      	beq.n	80074d6 <TIM_TI1_SetConfig+0x46>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074c4:	d007      	beq.n	80074d6 <TIM_TI1_SetConfig+0x46>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4a1c      	ldr	r2, [pc, #112]	@ (800753c <TIM_TI1_SetConfig+0xac>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d003      	beq.n	80074d6 <TIM_TI1_SetConfig+0x46>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	4a1b      	ldr	r2, [pc, #108]	@ (8007540 <TIM_TI1_SetConfig+0xb0>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d101      	bne.n	80074da <TIM_TI1_SetConfig+0x4a>
 80074d6:	2301      	movs	r3, #1
 80074d8:	e000      	b.n	80074dc <TIM_TI1_SetConfig+0x4c>
 80074da:	2300      	movs	r3, #0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d008      	beq.n	80074f2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	f023 0303 	bic.w	r3, r3, #3
 80074e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	617b      	str	r3, [r7, #20]
 80074f0:	e003      	b.n	80074fa <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	f043 0301 	orr.w	r3, r3, #1
 80074f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007500:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	011b      	lsls	r3, r3, #4
 8007506:	b2db      	uxtb	r3, r3
 8007508:	697a      	ldr	r2, [r7, #20]
 800750a:	4313      	orrs	r3, r2
 800750c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	f023 030a 	bic.w	r3, r3, #10
 8007514:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	f003 030a 	and.w	r3, r3, #10
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	4313      	orrs	r3, r2
 8007520:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	693a      	ldr	r2, [r7, #16]
 800752c:	621a      	str	r2, [r3, #32]
}
 800752e:	bf00      	nop
 8007530:	371c      	adds	r7, #28
 8007532:	46bd      	mov	sp, r7
 8007534:	bc80      	pop	{r7}
 8007536:	4770      	bx	lr
 8007538:	40012c00 	.word	0x40012c00
 800753c:	40000400 	.word	0x40000400
 8007540:	40000800 	.word	0x40000800

08007544 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007544:	b480      	push	{r7}
 8007546:	b087      	sub	sp, #28
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	f023 0201 	bic.w	r2, r3, #1
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800756e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	011b      	lsls	r3, r3, #4
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	4313      	orrs	r3, r2
 8007578:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	f023 030a 	bic.w	r3, r3, #10
 8007580:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007582:	697a      	ldr	r2, [r7, #20]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	4313      	orrs	r3, r2
 8007588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	621a      	str	r2, [r3, #32]
}
 8007596:	bf00      	nop
 8007598:	371c      	adds	r7, #28
 800759a:	46bd      	mov	sp, r7
 800759c:	bc80      	pop	{r7}
 800759e:	4770      	bx	lr

080075a0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b087      	sub	sp, #28
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
 80075ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a1b      	ldr	r3, [r3, #32]
 80075b8:	f023 0210 	bic.w	r2, r3, #16
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	021b      	lsls	r3, r3, #8
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80075de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	031b      	lsls	r3, r3, #12
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80075f2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	011b      	lsls	r3, r3, #4
 80075f8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	4313      	orrs	r3, r2
 8007600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	621a      	str	r2, [r3, #32]
}
 800760e:	bf00      	nop
 8007610:	371c      	adds	r7, #28
 8007612:	46bd      	mov	sp, r7
 8007614:	bc80      	pop	{r7}
 8007616:	4770      	bx	lr

08007618 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007618:	b480      	push	{r7}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6a1b      	ldr	r3, [r3, #32]
 8007628:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	f023 0210 	bic.w	r2, r3, #16
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	031b      	lsls	r3, r3, #12
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	4313      	orrs	r3, r2
 800764c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007654:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	011b      	lsls	r3, r3, #4
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	4313      	orrs	r3, r2
 800765e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	621a      	str	r2, [r3, #32]
}
 800766c:	bf00      	nop
 800766e:	371c      	adds	r7, #28
 8007670:	46bd      	mov	sp, r7
 8007672:	bc80      	pop	{r7}
 8007674:	4770      	bx	lr

08007676 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007676:	b480      	push	{r7}
 8007678:	b087      	sub	sp, #28
 800767a:	af00      	add	r7, sp, #0
 800767c:	60f8      	str	r0, [r7, #12]
 800767e:	60b9      	str	r1, [r7, #8]
 8007680:	607a      	str	r2, [r7, #4]
 8007682:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	f023 0303 	bic.w	r3, r3, #3
 80076a2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076b2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	011b      	lsls	r3, r3, #4
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	4313      	orrs	r3, r2
 80076be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80076c6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	021b      	lsls	r3, r3, #8
 80076cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076d0:	697a      	ldr	r2, [r7, #20]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	621a      	str	r2, [r3, #32]
}
 80076e2:	bf00      	nop
 80076e4:	371c      	adds	r7, #28
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bc80      	pop	{r7}
 80076ea:	4770      	bx	lr

080076ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b087      	sub	sp, #28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
 80076f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	69db      	ldr	r3, [r3, #28]
 8007710:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007718:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	021b      	lsls	r3, r3, #8
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	4313      	orrs	r3, r2
 8007722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800772a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	031b      	lsls	r3, r3, #12
 8007730:	b29b      	uxth	r3, r3
 8007732:	693a      	ldr	r2, [r7, #16]
 8007734:	4313      	orrs	r3, r2
 8007736:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800773e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	031b      	lsls	r3, r3, #12
 8007744:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	4313      	orrs	r3, r2
 800774c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	621a      	str	r2, [r3, #32]
}
 800775a:	bf00      	nop
 800775c:	371c      	adds	r7, #28
 800775e:	46bd      	mov	sp, r7
 8007760:	bc80      	pop	{r7}
 8007762:	4770      	bx	lr

08007764 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800777a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800777c:	683a      	ldr	r2, [r7, #0]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	4313      	orrs	r3, r2
 8007782:	f043 0307 	orr.w	r3, r3, #7
 8007786:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	609a      	str	r2, [r3, #8]
}
 800778e:	bf00      	nop
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	bc80      	pop	{r7}
 8007796:	4770      	bx	lr

08007798 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007798:	b480      	push	{r7}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
 80077a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	021a      	lsls	r2, r3, #8
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	431a      	orrs	r2, r3
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	4313      	orrs	r3, r2
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	609a      	str	r2, [r3, #8]
}
 80077cc:	bf00      	nop
 80077ce:	371c      	adds	r7, #28
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bc80      	pop	{r7}
 80077d4:	4770      	bx	lr

080077d6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b087      	sub	sp, #28
 80077da:	af00      	add	r7, sp, #0
 80077dc:	60f8      	str	r0, [r7, #12]
 80077de:	60b9      	str	r1, [r7, #8]
 80077e0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	f003 031f 	and.w	r3, r3, #31
 80077e8:	2201      	movs	r2, #1
 80077ea:	fa02 f303 	lsl.w	r3, r2, r3
 80077ee:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6a1a      	ldr	r2, [r3, #32]
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	43db      	mvns	r3, r3
 80077f8:	401a      	ands	r2, r3
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6a1a      	ldr	r2, [r3, #32]
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	f003 031f 	and.w	r3, r3, #31
 8007808:	6879      	ldr	r1, [r7, #4]
 800780a:	fa01 f303 	lsl.w	r3, r1, r3
 800780e:	431a      	orrs	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	621a      	str	r2, [r3, #32]
}
 8007814:	bf00      	nop
 8007816:	371c      	adds	r7, #28
 8007818:	46bd      	mov	sp, r7
 800781a:	bc80      	pop	{r7}
 800781c:	4770      	bx	lr
	...

08007820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007830:	2b01      	cmp	r3, #1
 8007832:	d101      	bne.n	8007838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007834:	2302      	movs	r3, #2
 8007836:	e046      	b.n	80078c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2202      	movs	r2, #2
 8007844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800785e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	4313      	orrs	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a16      	ldr	r2, [pc, #88]	@ (80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d00e      	beq.n	800789a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007884:	d009      	beq.n	800789a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a12      	ldr	r2, [pc, #72]	@ (80078d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d004      	beq.n	800789a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a10      	ldr	r2, [pc, #64]	@ (80078d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d10c      	bne.n	80078b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bc80      	pop	{r7}
 80078ce:	4770      	bx	lr
 80078d0:	40012c00 	.word	0x40012c00
 80078d4:	40000400 	.word	0x40000400
 80078d8:	40000800 	.word	0x40000800

080078dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80078e6:	2300      	movs	r3, #0
 80078e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d101      	bne.n	80078f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80078f4:	2302      	movs	r3, #2
 80078f6:	e03d      	b.n	8007974 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	4313      	orrs	r3, r2
 800790c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	4313      	orrs	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	4313      	orrs	r3, r2
 8007928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4313      	orrs	r3, r2
 8007936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	4313      	orrs	r3, r2
 8007944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	4313      	orrs	r3, r2
 8007952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	4313      	orrs	r3, r2
 8007960:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	bc80      	pop	{r7}
 800797c:	4770      	bx	lr

0800797e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800797e:	b480      	push	{r7}
 8007980:	b083      	sub	sp, #12
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007986:	bf00      	nop
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	bc80      	pop	{r7}
 800798e:	4770      	bx	lr

08007990 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	bc80      	pop	{r7}
 80079a0:	4770      	bx	lr

080079a2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b085      	sub	sp, #20
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	60f8      	str	r0, [r7, #12]
 80079aa:	4638      	mov	r0, r7
 80079ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bc80      	pop	{r7}
 80079ba:	4770      	bx	lr

080079bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80079cc:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80079d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3714      	adds	r7, #20
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bc80      	pop	{r7}
 80079e6:	4770      	bx	lr

080079e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80079f0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80079f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	43db      	mvns	r3, r3
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	4013      	ands	r3, r2
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bc80      	pop	{r7}
 8007a1a:	4770      	bx	lr

08007a1c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bc80      	pop	{r7}
 8007a32:	4770      	bx	lr

08007a34 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	4638      	mov	r0, r7
 8007a3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2201      	movs	r2, #1
 8007a46:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3714      	adds	r7, #20
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bc80      	pop	{r7}
 8007a6c:	4770      	bx	lr
	...

08007a70 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b09d      	sub	sp, #116	@ 0x74
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	881b      	ldrh	r3, [r3, #0]
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8007a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a96:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	78db      	ldrb	r3, [r3, #3]
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d81f      	bhi.n	8007ae2 <USB_ActivateEndpoint+0x72>
 8007aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa8 <USB_ActivateEndpoint+0x38>)
 8007aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa8:	08007ab9 	.word	0x08007ab9
 8007aac:	08007ad5 	.word	0x08007ad5
 8007ab0:	08007aeb 	.word	0x08007aeb
 8007ab4:	08007ac7 	.word	0x08007ac7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007ab8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007abc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007ac0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007ac4:	e012      	b.n	8007aec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007ac6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007aca:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8007ace:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007ad2:	e00b      	b.n	8007aec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007ad4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007ad8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007adc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007ae0:	e004      	b.n	8007aec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8007ae8:	e000      	b.n	8007aec <USB_ActivateEndpoint+0x7c>
      break;
 8007aea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	441a      	add	r2, r3
 8007af6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007afa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007afe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4413      	add	r3, r2
 8007b18:	881b      	ldrh	r3, [r3, #0]
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	7812      	ldrb	r2, [r2, #0]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	441a      	add	r2, r3
 8007b3a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007b3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	7b1b      	ldrb	r3, [r3, #12]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f040 8178 	bne.w	8007e4c <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	785b      	ldrb	r3, [r3, #1]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 8084 	beq.w	8007c6e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	61bb      	str	r3, [r7, #24]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	461a      	mov	r2, r3
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	4413      	add	r3, r2
 8007b78:	61bb      	str	r3, [r7, #24]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	011a      	lsls	r2, r3, #4
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	4413      	add	r3, r2
 8007b84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b88:	617b      	str	r3, [r7, #20]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	88db      	ldrh	r3, [r3, #6]
 8007b8e:	085b      	lsrs	r3, r3, #1
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	005b      	lsls	r3, r3, #1
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	881b      	ldrh	r3, [r3, #0]
 8007ba6:	827b      	strh	r3, [r7, #18]
 8007ba8:	8a7b      	ldrh	r3, [r7, #18]
 8007baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d01b      	beq.n	8007bea <USB_ActivateEndpoint+0x17a>
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	881b      	ldrh	r3, [r3, #0]
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bc8:	823b      	strh	r3, [r7, #16]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	441a      	add	r2, r3
 8007bd4:	8a3b      	ldrh	r3, [r7, #16]
 8007bd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007be2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	78db      	ldrb	r3, [r3, #3]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d020      	beq.n	8007c34 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	881b      	ldrh	r3, [r3, #0]
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c08:	81bb      	strh	r3, [r7, #12]
 8007c0a:	89bb      	ldrh	r3, [r7, #12]
 8007c0c:	f083 0320 	eor.w	r3, r3, #32
 8007c10:	81bb      	strh	r3, [r7, #12]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	441a      	add	r2, r3
 8007c1c:	89bb      	ldrh	r3, [r7, #12]
 8007c1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	8013      	strh	r3, [r2, #0]
 8007c32:	e2d5      	b.n	80081e0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	881b      	ldrh	r3, [r3, #0]
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c4a:	81fb      	strh	r3, [r7, #14]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	441a      	add	r2, r3
 8007c56:	89fb      	ldrh	r3, [r7, #14]
 8007c58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	8013      	strh	r3, [r2, #0]
 8007c6c:	e2b8      	b.n	80081e0 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7e:	4413      	add	r3, r2
 8007c80:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	011a      	lsls	r2, r3, #4
 8007c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8007c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	88db      	ldrh	r3, [r3, #6]
 8007c96:	085b      	lsrs	r3, r3, #1
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	005b      	lsls	r3, r3, #1
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ca0:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	461a      	mov	r2, r3
 8007cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb2:	4413      	add	r3, r2
 8007cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	011a      	lsls	r2, r3, #4
 8007cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc8:	881b      	ldrh	r3, [r3, #0]
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd4:	801a      	strh	r2, [r3, #0]
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	2b3e      	cmp	r3, #62	@ 0x3e
 8007cdc:	d91d      	bls.n	8007d1a <USB_ActivateEndpoint+0x2aa>
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	095b      	lsrs	r3, r3, #5
 8007ce4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	f003 031f 	and.w	r3, r3, #31
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d102      	bne.n	8007cf8 <USB_ActivateEndpoint+0x288>
 8007cf2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	029b      	lsls	r3, r3, #10
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	4313      	orrs	r3, r2
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d16:	801a      	strh	r2, [r3, #0]
 8007d18:	e026      	b.n	8007d68 <USB_ActivateEndpoint+0x2f8>
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10a      	bne.n	8007d38 <USB_ActivateEndpoint+0x2c8>
 8007d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d24:	881b      	ldrh	r3, [r3, #0]
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d34:	801a      	strh	r2, [r3, #0]
 8007d36:	e017      	b.n	8007d68 <USB_ActivateEndpoint+0x2f8>
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	085b      	lsrs	r3, r3, #1
 8007d3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <USB_ActivateEndpoint+0x2e2>
 8007d4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d4e:	3301      	adds	r3, #1
 8007d50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d54:	881b      	ldrh	r3, [r3, #0]
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	029b      	lsls	r3, r3, #10
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	4313      	orrs	r3, r2
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d66:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4413      	add	r3, r2
 8007d72:	881b      	ldrh	r3, [r3, #0]
 8007d74:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007d76:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007d78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d01b      	beq.n	8007db8 <USB_ActivateEndpoint+0x348>
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	881b      	ldrh	r3, [r3, #0]
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d96:	843b      	strh	r3, [r7, #32]
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	441a      	add	r2, r3
 8007da2:	8c3b      	ldrh	r3, [r7, #32]
 8007da4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007da8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007db0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d124      	bne.n	8007e0a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4413      	add	r3, r2
 8007dca:	881b      	ldrh	r3, [r3, #0]
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dd6:	83bb      	strh	r3, [r7, #28]
 8007dd8:	8bbb      	ldrh	r3, [r7, #28]
 8007dda:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007dde:	83bb      	strh	r3, [r7, #28]
 8007de0:	8bbb      	ldrh	r3, [r7, #28]
 8007de2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007de6:	83bb      	strh	r3, [r7, #28]
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	441a      	add	r2, r3
 8007df2:	8bbb      	ldrh	r3, [r7, #28]
 8007df4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007df8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	8013      	strh	r3, [r2, #0]
 8007e08:	e1ea      	b.n	80081e0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	881b      	ldrh	r3, [r3, #0]
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e20:	83fb      	strh	r3, [r7, #30]
 8007e22:	8bfb      	ldrh	r3, [r7, #30]
 8007e24:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007e28:	83fb      	strh	r3, [r7, #30]
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	441a      	add	r2, r3
 8007e34:	8bfb      	ldrh	r3, [r7, #30]
 8007e36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	8013      	strh	r3, [r2, #0]
 8007e4a:	e1c9      	b.n	80081e0 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	78db      	ldrb	r3, [r3, #3]
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d11e      	bne.n	8007e92 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4413      	add	r3, r2
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e6a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	441a      	add	r2, r3
 8007e78:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007e7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e84:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007e88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	8013      	strh	r3, [r2, #0]
 8007e90:	e01d      	b.n	8007ece <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4413      	add	r3, r2
 8007e9c:	881b      	ldrh	r3, [r3, #0]
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007ea4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ea8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	441a      	add	r2, r3
 8007eb6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007eba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ebe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ec2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	461a      	mov	r2, r3
 8007edc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ede:	4413      	add	r3, r2
 8007ee0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	011a      	lsls	r2, r3, #4
 8007ee8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ef0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	891b      	ldrh	r3, [r3, #8]
 8007ef6:	085b      	lsrs	r3, r3, #1
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	005b      	lsls	r3, r3, #1
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f00:	801a      	strh	r2, [r3, #0]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	461a      	mov	r2, r3
 8007f10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f12:	4413      	add	r3, r2
 8007f14:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	011a      	lsls	r2, r3, #4
 8007f1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f1e:	4413      	add	r3, r2
 8007f20:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8007f24:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	895b      	ldrh	r3, [r3, #10]
 8007f2a:	085b      	lsrs	r3, r3, #1
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	005b      	lsls	r3, r3, #1
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f34:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	785b      	ldrb	r3, [r3, #1]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f040 8093 	bne.w	8008066 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4413      	add	r3, r2
 8007f4a:	881b      	ldrh	r3, [r3, #0]
 8007f4c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8007f50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007f54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d01b      	beq.n	8007f94 <USB_ActivateEndpoint+0x524>
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4413      	add	r3, r2
 8007f66:	881b      	ldrh	r3, [r3, #0]
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f72:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	441a      	add	r2, r3
 8007f7e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007f80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4413      	add	r3, r2
 8007f9e:	881b      	ldrh	r3, [r3, #0]
 8007fa0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007fa2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d01b      	beq.n	8007fe4 <USB_ActivateEndpoint+0x574>
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4413      	add	r3, r2
 8007fb6:	881b      	ldrh	r3, [r3, #0]
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fc2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	441a      	add	r2, r3
 8007fce:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007fd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fdc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	881b      	ldrh	r3, [r3, #0]
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ffa:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007ffc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007ffe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008002:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008004:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008006:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800800a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	441a      	add	r2, r3
 8008016:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008018:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800801c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008020:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008024:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008028:	b29b      	uxth	r3, r3
 800802a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4413      	add	r3, r2
 8008036:	881b      	ldrh	r3, [r3, #0]
 8008038:	b29b      	uxth	r3, r3
 800803a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800803e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008042:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	441a      	add	r2, r3
 800804e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008050:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008054:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008058:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800805c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008060:	b29b      	uxth	r3, r3
 8008062:	8013      	strh	r3, [r2, #0]
 8008064:	e0bc      	b.n	80081e0 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	4413      	add	r3, r2
 8008070:	881b      	ldrh	r3, [r3, #0]
 8008072:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008076:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800807a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800807e:	2b00      	cmp	r3, #0
 8008080:	d01d      	beq.n	80080be <USB_ActivateEndpoint+0x64e>
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	4413      	add	r3, r2
 800808c:	881b      	ldrh	r3, [r3, #0]
 800808e:	b29b      	uxth	r3, r3
 8008090:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008094:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008098:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	441a      	add	r2, r3
 80080a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80080aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80080b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4413      	add	r3, r2
 80080c8:	881b      	ldrh	r3, [r3, #0]
 80080ca:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80080ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80080d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d01d      	beq.n	8008116 <USB_ActivateEndpoint+0x6a6>
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4413      	add	r3, r2
 80080e4:	881b      	ldrh	r3, [r3, #0]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080f0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	441a      	add	r2, r3
 80080fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8008102:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008106:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800810a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800810e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008112:	b29b      	uxth	r3, r3
 8008114:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	78db      	ldrb	r3, [r3, #3]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d024      	beq.n	8008168 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	b29b      	uxth	r3, r3
 800812c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008130:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008134:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008138:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800813c:	f083 0320 	eor.w	r3, r3, #32
 8008140:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	441a      	add	r2, r3
 800814e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008152:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008156:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800815a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800815e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008162:	b29b      	uxth	r3, r3
 8008164:	8013      	strh	r3, [r2, #0]
 8008166:	e01d      	b.n	80081a4 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4413      	add	r3, r2
 8008172:	881b      	ldrh	r3, [r3, #0]
 8008174:	b29b      	uxth	r3, r3
 8008176:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800817a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800817e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	441a      	add	r2, r3
 800818c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008190:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008194:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008198:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800819c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4413      	add	r3, r2
 80081ae:	881b      	ldrh	r3, [r3, #0]
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80081b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	441a      	add	r2, r3
 80081c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80081cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081dc:	b29b      	uxth	r3, r3
 80081de:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80081e0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3774      	adds	r7, #116	@ 0x74
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bc80      	pop	{r7}
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop

080081f0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b08d      	sub	sp, #52	@ 0x34
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	7b1b      	ldrb	r3, [r3, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f040 808e 	bne.w	8008320 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	785b      	ldrb	r3, [r3, #1]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d044      	beq.n	8008296 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4413      	add	r3, r2
 8008216:	881b      	ldrh	r3, [r3, #0]
 8008218:	81bb      	strh	r3, [r7, #12]
 800821a:	89bb      	ldrh	r3, [r7, #12]
 800821c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008220:	2b00      	cmp	r3, #0
 8008222:	d01b      	beq.n	800825c <USB_DeactivateEndpoint+0x6c>
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4413      	add	r3, r2
 800822e:	881b      	ldrh	r3, [r3, #0]
 8008230:	b29b      	uxth	r3, r3
 8008232:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800823a:	817b      	strh	r3, [r7, #10]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	441a      	add	r2, r3
 8008246:	897b      	ldrh	r3, [r7, #10]
 8008248:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800824c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008250:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008254:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008258:	b29b      	uxth	r3, r3
 800825a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	881b      	ldrh	r3, [r3, #0]
 8008268:	b29b      	uxth	r3, r3
 800826a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800826e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008272:	813b      	strh	r3, [r7, #8]
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	441a      	add	r2, r3
 800827e:	893b      	ldrh	r3, [r7, #8]
 8008280:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008284:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008288:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800828c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008290:	b29b      	uxth	r3, r3
 8008292:	8013      	strh	r3, [r2, #0]
 8008294:	e192      	b.n	80085bc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	827b      	strh	r3, [r7, #18]
 80082a4:	8a7b      	ldrh	r3, [r7, #18]
 80082a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d01b      	beq.n	80082e6 <USB_DeactivateEndpoint+0xf6>
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4413      	add	r3, r2
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082c4:	823b      	strh	r3, [r7, #16]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	441a      	add	r2, r3
 80082d0:	8a3b      	ldrh	r3, [r7, #16]
 80082d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80082de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	881b      	ldrh	r3, [r3, #0]
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082fc:	81fb      	strh	r3, [r7, #14]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	441a      	add	r2, r3
 8008308:	89fb      	ldrh	r3, [r7, #14]
 800830a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800830e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008312:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800831a:	b29b      	uxth	r3, r3
 800831c:	8013      	strh	r3, [r2, #0]
 800831e:	e14d      	b.n	80085bc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	785b      	ldrb	r3, [r3, #1]
 8008324:	2b00      	cmp	r3, #0
 8008326:	f040 80a5 	bne.w	8008474 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	881b      	ldrh	r3, [r3, #0]
 8008336:	843b      	strh	r3, [r7, #32]
 8008338:	8c3b      	ldrh	r3, [r7, #32]
 800833a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800833e:	2b00      	cmp	r3, #0
 8008340:	d01b      	beq.n	800837a <USB_DeactivateEndpoint+0x18a>
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4413      	add	r3, r2
 800834c:	881b      	ldrh	r3, [r3, #0]
 800834e:	b29b      	uxth	r3, r3
 8008350:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008354:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008358:	83fb      	strh	r3, [r7, #30]
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	441a      	add	r2, r3
 8008364:	8bfb      	ldrh	r3, [r7, #30]
 8008366:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800836a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800836e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008376:	b29b      	uxth	r3, r3
 8008378:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	4413      	add	r3, r2
 8008384:	881b      	ldrh	r3, [r3, #0]
 8008386:	83bb      	strh	r3, [r7, #28]
 8008388:	8bbb      	ldrh	r3, [r7, #28]
 800838a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800838e:	2b00      	cmp	r3, #0
 8008390:	d01b      	beq.n	80083ca <USB_DeactivateEndpoint+0x1da>
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4413      	add	r3, r2
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	b29b      	uxth	r3, r3
 80083a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083a8:	837b      	strh	r3, [r7, #26]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	441a      	add	r2, r3
 80083b4:	8b7b      	ldrh	r3, [r7, #26]
 80083b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	881b      	ldrh	r3, [r3, #0]
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083e0:	833b      	strh	r3, [r7, #24]
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	441a      	add	r2, r3
 80083ec:	8b3b      	ldrh	r3, [r7, #24]
 80083ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80083fe:	b29b      	uxth	r3, r3
 8008400:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4413      	add	r3, r2
 800840c:	881b      	ldrh	r3, [r3, #0]
 800840e:	b29b      	uxth	r3, r3
 8008410:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008414:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008418:	82fb      	strh	r3, [r7, #22]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	441a      	add	r2, r3
 8008424:	8afb      	ldrh	r3, [r7, #22]
 8008426:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800842a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800842e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008436:	b29b      	uxth	r3, r3
 8008438:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	881b      	ldrh	r3, [r3, #0]
 8008446:	b29b      	uxth	r3, r3
 8008448:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800844c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008450:	82bb      	strh	r3, [r7, #20]
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	441a      	add	r2, r3
 800845c:	8abb      	ldrh	r3, [r7, #20]
 800845e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008462:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008466:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800846a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800846e:	b29b      	uxth	r3, r3
 8008470:	8013      	strh	r3, [r2, #0]
 8008472:	e0a3      	b.n	80085bc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4413      	add	r3, r2
 800847e:	881b      	ldrh	r3, [r3, #0]
 8008480:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008482:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008484:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d01b      	beq.n	80084c4 <USB_DeactivateEndpoint+0x2d4>
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	b29b      	uxth	r3, r3
 800849a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800849e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084a2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	441a      	add	r2, r3
 80084ae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80084b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80084bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	881b      	ldrh	r3, [r3, #0]
 80084d0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80084d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80084d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d01b      	beq.n	8008514 <USB_DeactivateEndpoint+0x324>
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	881b      	ldrh	r3, [r3, #0]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084f2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	441a      	add	r2, r3
 80084fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008500:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008504:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008508:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800850c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008510:	b29b      	uxth	r3, r3
 8008512:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4413      	add	r3, r2
 800851e:	881b      	ldrh	r3, [r3, #0]
 8008520:	b29b      	uxth	r3, r3
 8008522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800852a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	441a      	add	r2, r3
 8008536:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008538:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800853c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008540:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008544:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008548:	b29b      	uxth	r3, r3
 800854a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4413      	add	r3, r2
 8008556:	881b      	ldrh	r3, [r3, #0]
 8008558:	b29b      	uxth	r3, r3
 800855a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800855e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008562:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	441a      	add	r2, r3
 800856e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008570:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008574:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008578:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800857c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008580:	b29b      	uxth	r3, r3
 8008582:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	881b      	ldrh	r3, [r3, #0]
 8008590:	b29b      	uxth	r3, r3
 8008592:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800859a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	441a      	add	r2, r3
 80085a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80085a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3734      	adds	r7, #52	@ 0x34
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bc80      	pop	{r7}
 80085c6:	4770      	bx	lr

080085c8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b0c2      	sub	sp, #264	@ 0x108
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085d6:	6018      	str	r0, [r3, #0]
 80085d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085e0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80085e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	785b      	ldrb	r3, [r3, #1]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	f040 86b7 	bne.w	8009362 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80085f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	699a      	ldr	r2, [r3, #24]
 8008600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	429a      	cmp	r2, r3
 800860e:	d908      	bls.n	8008622 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008620:	e007      	b.n	8008632 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	7b1b      	ldrb	r3, [r3, #12]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d13a      	bne.n	80086b8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008646:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	6959      	ldr	r1, [r3, #20]
 800864e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008652:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	88da      	ldrh	r2, [r3, #6]
 800865a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800865e:	b29b      	uxth	r3, r3
 8008660:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008664:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008668:	6800      	ldr	r0, [r0, #0]
 800866a:	f001 fc9c 	bl	8009fa6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800866e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008672:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	613b      	str	r3, [r7, #16]
 800867a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800867e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008688:	b29b      	uxth	r3, r3
 800868a:	461a      	mov	r2, r3
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	4413      	add	r3, r2
 8008690:	613b      	str	r3, [r7, #16]
 8008692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008696:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	011a      	lsls	r2, r3, #4
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	4413      	add	r3, r2
 80086a4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80086a8:	60fb      	str	r3, [r7, #12]
 80086aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	801a      	strh	r2, [r3, #0]
 80086b4:	f000 be1f 	b.w	80092f6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80086b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	78db      	ldrb	r3, [r3, #3]
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	f040 8462 	bne.w	8008f8e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80086ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6a1a      	ldr	r2, [r3, #32]
 80086d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	f240 83df 	bls.w	8008ea6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80086e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	4413      	add	r3, r2
 8008702:	881b      	ldrh	r3, [r3, #0]
 8008704:	b29b      	uxth	r3, r3
 8008706:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800870a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800870e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008716:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008720:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	441a      	add	r2, r3
 800872c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008730:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008734:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008738:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800873c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008740:	b29b      	uxth	r3, r3
 8008742:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	6a1a      	ldr	r2, [r3, #32]
 8008750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008754:	1ad2      	subs	r2, r2, r3
 8008756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800875a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008766:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4413      	add	r3, r2
 800877c:	881b      	ldrh	r3, [r3, #0]
 800877e:	b29b      	uxth	r3, r3
 8008780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008784:	2b00      	cmp	r3, #0
 8008786:	f000 81c7 	beq.w	8008b18 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800878a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800878e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	633b      	str	r3, [r7, #48]	@ 0x30
 8008796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800879a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	785b      	ldrb	r3, [r3, #1]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d177      	bne.n	8008896 <USB_EPStartXfer+0x2ce>
 80087a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80087b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	461a      	mov	r2, r3
 80087c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c6:	4413      	add	r3, r2
 80087c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80087ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	011a      	lsls	r2, r3, #4
 80087d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087da:	4413      	add	r3, r2
 80087dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80087e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80087e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e4:	881b      	ldrh	r3, [r3, #0]
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f0:	801a      	strh	r2, [r3, #0]
 80087f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80087f8:	d921      	bls.n	800883e <USB_EPStartXfer+0x276>
 80087fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087fe:	095b      	lsrs	r3, r3, #5
 8008800:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008808:	f003 031f 	and.w	r3, r3, #31
 800880c:	2b00      	cmp	r3, #0
 800880e:	d104      	bne.n	800881a <USB_EPStartXfer+0x252>
 8008810:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008814:	3b01      	subs	r3, #1
 8008816:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800881a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881c:	881b      	ldrh	r3, [r3, #0]
 800881e:	b29a      	uxth	r2, r3
 8008820:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008824:	b29b      	uxth	r3, r3
 8008826:	029b      	lsls	r3, r3, #10
 8008828:	b29b      	uxth	r3, r3
 800882a:	4313      	orrs	r3, r2
 800882c:	b29b      	uxth	r3, r3
 800882e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008836:	b29a      	uxth	r2, r3
 8008838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800883a:	801a      	strh	r2, [r3, #0]
 800883c:	e050      	b.n	80088e0 <USB_EPStartXfer+0x318>
 800883e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10a      	bne.n	800885c <USB_EPStartXfer+0x294>
 8008846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008848:	881b      	ldrh	r3, [r3, #0]
 800884a:	b29b      	uxth	r3, r3
 800884c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008854:	b29a      	uxth	r2, r3
 8008856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008858:	801a      	strh	r2, [r3, #0]
 800885a:	e041      	b.n	80088e0 <USB_EPStartXfer+0x318>
 800885c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008860:	085b      	lsrs	r3, r3, #1
 8008862:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	2b00      	cmp	r3, #0
 8008870:	d004      	beq.n	800887c <USB_EPStartXfer+0x2b4>
 8008872:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008876:	3301      	adds	r3, #1
 8008878:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800887c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887e:	881b      	ldrh	r3, [r3, #0]
 8008880:	b29a      	uxth	r2, r3
 8008882:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008886:	b29b      	uxth	r3, r3
 8008888:	029b      	lsls	r3, r3, #10
 800888a:	b29b      	uxth	r3, r3
 800888c:	4313      	orrs	r3, r2
 800888e:	b29a      	uxth	r2, r3
 8008890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008892:	801a      	strh	r2, [r3, #0]
 8008894:	e024      	b.n	80088e0 <USB_EPStartXfer+0x318>
 8008896:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800889a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	785b      	ldrb	r3, [r3, #1]
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d11c      	bne.n	80088e0 <USB_EPStartXfer+0x318>
 80088a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	461a      	mov	r2, r3
 80088b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ba:	4413      	add	r3, r2
 80088bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80088be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	011a      	lsls	r2, r3, #4
 80088cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ce:	4413      	add	r3, r2
 80088d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80088d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80088d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088da:	b29a      	uxth	r2, r3
 80088dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80088e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	895b      	ldrh	r3, [r3, #10]
 80088ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	6959      	ldr	r1, [r3, #20]
 80088fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008900:	b29b      	uxth	r3, r3
 8008902:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008906:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800890a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800890e:	6800      	ldr	r0, [r0, #0]
 8008910:	f001 fb49 	bl	8009fa6 <USB_WritePMA>
            ep->xfer_buff += len;
 8008914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008918:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	695a      	ldr	r2, [r3, #20]
 8008920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008924:	441a      	add	r2, r3
 8008926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800892a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008936:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6a1a      	ldr	r2, [r3, #32]
 800893e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	429a      	cmp	r2, r3
 800894c:	d90f      	bls.n	800896e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800894e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	6a1a      	ldr	r2, [r3, #32]
 800895a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800895e:	1ad2      	subs	r2, r2, r3
 8008960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008964:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	621a      	str	r2, [r3, #32]
 800896c:	e00e      	b.n	800898c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800896e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008972:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800897e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008982:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2200      	movs	r2, #0
 800898a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800898c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	785b      	ldrb	r3, [r3, #1]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d177      	bne.n	8008a8c <USB_EPStartXfer+0x4c4>
 800899c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	61bb      	str	r3, [r7, #24]
 80089a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	461a      	mov	r2, r3
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	4413      	add	r3, r2
 80089be:	61bb      	str	r3, [r7, #24]
 80089c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	011a      	lsls	r2, r3, #4
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	4413      	add	r3, r2
 80089d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80089d6:	617b      	str	r3, [r7, #20]
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	881b      	ldrh	r3, [r3, #0]
 80089dc:	b29b      	uxth	r3, r3
 80089de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	801a      	strh	r2, [r3, #0]
 80089e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80089ee:	d921      	bls.n	8008a34 <USB_EPStartXfer+0x46c>
 80089f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089f4:	095b      	lsrs	r3, r3, #5
 80089f6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80089fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089fe:	f003 031f 	and.w	r3, r3, #31
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d104      	bne.n	8008a10 <USB_EPStartXfer+0x448>
 8008a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	029b      	lsls	r3, r3, #10
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	4313      	orrs	r3, r2
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	801a      	strh	r2, [r3, #0]
 8008a32:	e056      	b.n	8008ae2 <USB_EPStartXfer+0x51a>
 8008a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10a      	bne.n	8008a52 <USB_EPStartXfer+0x48a>
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	881b      	ldrh	r3, [r3, #0]
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	801a      	strh	r2, [r3, #0]
 8008a50:	e047      	b.n	8008ae2 <USB_EPStartXfer+0x51a>
 8008a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a56:	085b      	lsrs	r3, r3, #1
 8008a58:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a60:	f003 0301 	and.w	r3, r3, #1
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d004      	beq.n	8008a72 <USB_EPStartXfer+0x4aa>
 8008a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	029b      	lsls	r3, r3, #10
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	4313      	orrs	r3, r2
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	801a      	strh	r2, [r3, #0]
 8008a8a:	e02a      	b.n	8008ae2 <USB_EPStartXfer+0x51a>
 8008a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	785b      	ldrb	r3, [r3, #1]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d122      	bne.n	8008ae2 <USB_EPStartXfer+0x51a>
 8008a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aa0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	623b      	str	r3, [r7, #32]
 8008aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	461a      	mov	r2, r3
 8008aba:	6a3b      	ldr	r3, [r7, #32]
 8008abc:	4413      	add	r3, r2
 8008abe:	623b      	str	r3, [r7, #32]
 8008ac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ac4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	011a      	lsls	r2, r3, #4
 8008ace:	6a3b      	ldr	r3, [r7, #32]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008ad6:	61fb      	str	r3, [r7, #28]
 8008ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ae6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	891b      	ldrh	r3, [r3, #8]
 8008aee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008af6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	6959      	ldr	r1, [r3, #20]
 8008afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008b08:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008b0c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008b10:	6800      	ldr	r0, [r0, #0]
 8008b12:	f001 fa48 	bl	8009fa6 <USB_WritePMA>
 8008b16:	e3ee      	b.n	80092f6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	785b      	ldrb	r3, [r3, #1]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d177      	bne.n	8008c18 <USB_EPStartXfer+0x650>
 8008b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	461a      	mov	r2, r3
 8008b46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b48:	4413      	add	r3, r2
 8008b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	011a      	lsls	r2, r3, #4
 8008b5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b5c:	4413      	add	r3, r2
 8008b5e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008b62:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b66:	881b      	ldrh	r3, [r3, #0]
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b72:	801a      	strh	r2, [r3, #0]
 8008b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b78:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b7a:	d921      	bls.n	8008bc0 <USB_EPStartXfer+0x5f8>
 8008b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b80:	095b      	lsrs	r3, r3, #5
 8008b82:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b8a:	f003 031f 	and.w	r3, r3, #31
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d104      	bne.n	8008b9c <USB_EPStartXfer+0x5d4>
 8008b92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008b96:	3b01      	subs	r3, #1
 8008b98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008b9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b9e:	881b      	ldrh	r3, [r3, #0]
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	029b      	lsls	r3, r3, #10
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	4313      	orrs	r3, r2
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bbc:	801a      	strh	r2, [r3, #0]
 8008bbe:	e056      	b.n	8008c6e <USB_EPStartXfer+0x6a6>
 8008bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d10a      	bne.n	8008bde <USB_EPStartXfer+0x616>
 8008bc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bca:	881b      	ldrh	r3, [r3, #0]
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bda:	801a      	strh	r2, [r3, #0]
 8008bdc:	e047      	b.n	8008c6e <USB_EPStartXfer+0x6a6>
 8008bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008be2:	085b      	lsrs	r3, r3, #1
 8008be4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bec:	f003 0301 	and.w	r3, r3, #1
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d004      	beq.n	8008bfe <USB_EPStartXfer+0x636>
 8008bf4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008bfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c00:	881b      	ldrh	r3, [r3, #0]
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	029b      	lsls	r3, r3, #10
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c14:	801a      	strh	r2, [r3, #0]
 8008c16:	e02a      	b.n	8008c6e <USB_EPStartXfer+0x6a6>
 8008c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	785b      	ldrb	r3, [r3, #1]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d122      	bne.n	8008c6e <USB_EPStartXfer+0x6a6>
 8008c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	461a      	mov	r2, r3
 8008c46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c48:	4413      	add	r3, r2
 8008c4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	011a      	lsls	r2, r3, #4
 8008c5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c5c:	4413      	add	r3, r2
 8008c5e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c6c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	891b      	ldrh	r3, [r3, #8]
 8008c7a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6959      	ldr	r1, [r3, #20]
 8008c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008c94:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008c98:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008c9c:	6800      	ldr	r0, [r0, #0]
 8008c9e:	f001 f982 	bl	8009fa6 <USB_WritePMA>
            ep->xfer_buff += len;
 8008ca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ca6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	695a      	ldr	r2, [r3, #20]
 8008cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cb2:	441a      	add	r2, r3
 8008cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	6a1a      	ldr	r2, [r3, #32]
 8008ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d90f      	bls.n	8008cfc <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ce0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	6a1a      	ldr	r2, [r3, #32]
 8008ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cec:	1ad2      	subs	r2, r2, r3
 8008cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	621a      	str	r2, [r3, #32]
 8008cfa:	e00e      	b.n	8008d1a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6a1b      	ldr	r3, [r3, #32]
 8008d08:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2200      	movs	r2, #0
 8008d18:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	785b      	ldrb	r3, [r3, #1]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d177      	bne.n	8008e26 <USB_EPStartXfer+0x85e>
 8008d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008d42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	461a      	mov	r2, r3
 8008d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d56:	4413      	add	r3, r2
 8008d58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008d5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	011a      	lsls	r2, r3, #4
 8008d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d6a:	4413      	add	r3, r2
 8008d6c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d74:	881b      	ldrh	r3, [r3, #0]
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d80:	801a      	strh	r2, [r3, #0]
 8008d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d86:	2b3e      	cmp	r3, #62	@ 0x3e
 8008d88:	d921      	bls.n	8008dce <USB_EPStartXfer+0x806>
 8008d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d8e:	095b      	lsrs	r3, r3, #5
 8008d90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d98:	f003 031f 	and.w	r3, r3, #31
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d104      	bne.n	8008daa <USB_EPStartXfer+0x7e2>
 8008da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008da4:	3b01      	subs	r3, #1
 8008da6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dac:	881b      	ldrh	r3, [r3, #0]
 8008dae:	b29a      	uxth	r2, r3
 8008db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	029b      	lsls	r3, r3, #10
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dca:	801a      	strh	r2, [r3, #0]
 8008dcc:	e050      	b.n	8008e70 <USB_EPStartXfer+0x8a8>
 8008dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10a      	bne.n	8008dec <USB_EPStartXfer+0x824>
 8008dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dd8:	881b      	ldrh	r3, [r3, #0]
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008de4:	b29a      	uxth	r2, r3
 8008de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de8:	801a      	strh	r2, [r3, #0]
 8008dea:	e041      	b.n	8008e70 <USB_EPStartXfer+0x8a8>
 8008dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008df0:	085b      	lsrs	r3, r3, #1
 8008df2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dfa:	f003 0301 	and.w	r3, r3, #1
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d004      	beq.n	8008e0c <USB_EPStartXfer+0x844>
 8008e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e06:	3301      	adds	r3, #1
 8008e08:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e0e:	881b      	ldrh	r3, [r3, #0]
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	029b      	lsls	r3, r3, #10
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	b29a      	uxth	r2, r3
 8008e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e22:	801a      	strh	r2, [r3, #0]
 8008e24:	e024      	b.n	8008e70 <USB_EPStartXfer+0x8a8>
 8008e26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	785b      	ldrb	r3, [r3, #1]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d11c      	bne.n	8008e70 <USB_EPStartXfer+0x8a8>
 8008e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	461a      	mov	r2, r3
 8008e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e4a:	4413      	add	r3, r2
 8008e4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	011a      	lsls	r2, r3, #4
 8008e5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e5e:	4413      	add	r3, r2
 8008e60:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e6e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	895b      	ldrh	r3, [r3, #10]
 8008e7c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	6959      	ldr	r1, [r3, #20]
 8008e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008e96:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008e9a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008e9e:	6800      	ldr	r0, [r0, #0]
 8008ea0:	f001 f881 	bl	8009fa6 <USB_WritePMA>
 8008ea4:	e227      	b.n	80092f6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6a1b      	ldr	r3, [r3, #32]
 8008eb2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ec4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	4413      	add	r3, r2
 8008ed0:	881b      	ldrh	r3, [r3, #0]
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008ed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008edc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ee4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	441a      	add	r2, r3
 8008efa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008efe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	461a      	mov	r2, r3
 8008f30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f32:	4413      	add	r3, r2
 8008f34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	011a      	lsls	r2, r3, #4
 8008f44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f46:	4413      	add	r3, r2
 8008f48:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008f4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f56:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	891b      	ldrh	r3, [r3, #8]
 8008f64:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6959      	ldr	r1, [r3, #20]
 8008f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008f7e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008f82:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008f86:	6800      	ldr	r0, [r0, #0]
 8008f88:	f001 f80d 	bl	8009fa6 <USB_WritePMA>
 8008f8c:	e1b3      	b.n	80092f6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008f8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6a1a      	ldr	r2, [r3, #32]
 8008f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f9e:	1ad2      	subs	r2, r2, r3
 8008fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	4413      	add	r3, r2
 8008fc6:	881b      	ldrh	r3, [r3, #0]
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f000 80c6 	beq.w	8009160 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	673b      	str	r3, [r7, #112]	@ 0x70
 8008fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	785b      	ldrb	r3, [r3, #1]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d177      	bne.n	80090e0 <USB_EPStartXfer+0xb18>
 8008ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ff4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009000:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800900a:	b29b      	uxth	r3, r3
 800900c:	461a      	mov	r2, r3
 800900e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009010:	4413      	add	r3, r2
 8009012:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009018:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	011a      	lsls	r2, r3, #4
 8009022:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009024:	4413      	add	r3, r2
 8009026:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800902a:	667b      	str	r3, [r7, #100]	@ 0x64
 800902c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800902e:	881b      	ldrh	r3, [r3, #0]
 8009030:	b29b      	uxth	r3, r3
 8009032:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009036:	b29a      	uxth	r2, r3
 8009038:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800903a:	801a      	strh	r2, [r3, #0]
 800903c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009040:	2b3e      	cmp	r3, #62	@ 0x3e
 8009042:	d921      	bls.n	8009088 <USB_EPStartXfer+0xac0>
 8009044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009048:	095b      	lsrs	r3, r3, #5
 800904a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800904e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009052:	f003 031f 	and.w	r3, r3, #31
 8009056:	2b00      	cmp	r3, #0
 8009058:	d104      	bne.n	8009064 <USB_EPStartXfer+0xa9c>
 800905a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800905e:	3b01      	subs	r3, #1
 8009060:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009064:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009066:	881b      	ldrh	r3, [r3, #0]
 8009068:	b29a      	uxth	r2, r3
 800906a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800906e:	b29b      	uxth	r3, r3
 8009070:	029b      	lsls	r3, r3, #10
 8009072:	b29b      	uxth	r3, r3
 8009074:	4313      	orrs	r3, r2
 8009076:	b29b      	uxth	r3, r3
 8009078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800907c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009080:	b29a      	uxth	r2, r3
 8009082:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009084:	801a      	strh	r2, [r3, #0]
 8009086:	e050      	b.n	800912a <USB_EPStartXfer+0xb62>
 8009088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10a      	bne.n	80090a6 <USB_EPStartXfer+0xade>
 8009090:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009092:	881b      	ldrh	r3, [r3, #0]
 8009094:	b29b      	uxth	r3, r3
 8009096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800909a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800909e:	b29a      	uxth	r2, r3
 80090a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090a2:	801a      	strh	r2, [r3, #0]
 80090a4:	e041      	b.n	800912a <USB_EPStartXfer+0xb62>
 80090a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090aa:	085b      	lsrs	r3, r3, #1
 80090ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80090b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090b4:	f003 0301 	and.w	r3, r3, #1
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d004      	beq.n	80090c6 <USB_EPStartXfer+0xafe>
 80090bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80090c0:	3301      	adds	r3, #1
 80090c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80090c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090c8:	881b      	ldrh	r3, [r3, #0]
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	029b      	lsls	r3, r3, #10
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	4313      	orrs	r3, r2
 80090d8:	b29a      	uxth	r2, r3
 80090da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090dc:	801a      	strh	r2, [r3, #0]
 80090de:	e024      	b.n	800912a <USB_EPStartXfer+0xb62>
 80090e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	785b      	ldrb	r3, [r3, #1]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d11c      	bne.n	800912a <USB_EPStartXfer+0xb62>
 80090f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090fe:	b29b      	uxth	r3, r3
 8009100:	461a      	mov	r2, r3
 8009102:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009104:	4413      	add	r3, r2
 8009106:	673b      	str	r3, [r7, #112]	@ 0x70
 8009108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800910c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	011a      	lsls	r2, r3, #4
 8009116:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009118:	4413      	add	r3, r2
 800911a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800911e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009124:	b29a      	uxth	r2, r3
 8009126:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009128:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800912a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800912e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	895b      	ldrh	r3, [r3, #10]
 8009136:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800913a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800913e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6959      	ldr	r1, [r3, #20]
 8009146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800914a:	b29b      	uxth	r3, r3
 800914c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009150:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009154:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009158:	6800      	ldr	r0, [r0, #0]
 800915a:	f000 ff24 	bl	8009fa6 <USB_WritePMA>
 800915e:	e0ca      	b.n	80092f6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009164:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	785b      	ldrb	r3, [r3, #1]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d177      	bne.n	8009260 <USB_EPStartXfer+0xc98>
 8009170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009174:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800917c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009180:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800918a:	b29b      	uxth	r3, r3
 800918c:	461a      	mov	r2, r3
 800918e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009190:	4413      	add	r3, r2
 8009192:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	011a      	lsls	r2, r3, #4
 80091a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80091a4:	4413      	add	r3, r2
 80091a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80091aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80091ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091ae:	881b      	ldrh	r3, [r3, #0]
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091ba:	801a      	strh	r2, [r3, #0]
 80091bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80091c2:	d921      	bls.n	8009208 <USB_EPStartXfer+0xc40>
 80091c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091c8:	095b      	lsrs	r3, r3, #5
 80091ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80091ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091d2:	f003 031f 	and.w	r3, r3, #31
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d104      	bne.n	80091e4 <USB_EPStartXfer+0xc1c>
 80091da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80091de:	3b01      	subs	r3, #1
 80091e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80091e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091e6:	881b      	ldrh	r3, [r3, #0]
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	029b      	lsls	r3, r3, #10
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	4313      	orrs	r3, r2
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009200:	b29a      	uxth	r2, r3
 8009202:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009204:	801a      	strh	r2, [r3, #0]
 8009206:	e05c      	b.n	80092c2 <USB_EPStartXfer+0xcfa>
 8009208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800920c:	2b00      	cmp	r3, #0
 800920e:	d10a      	bne.n	8009226 <USB_EPStartXfer+0xc5e>
 8009210:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009212:	881b      	ldrh	r3, [r3, #0]
 8009214:	b29b      	uxth	r3, r3
 8009216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800921a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800921e:	b29a      	uxth	r2, r3
 8009220:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009222:	801a      	strh	r2, [r3, #0]
 8009224:	e04d      	b.n	80092c2 <USB_EPStartXfer+0xcfa>
 8009226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800922a:	085b      	lsrs	r3, r3, #1
 800922c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009234:	f003 0301 	and.w	r3, r3, #1
 8009238:	2b00      	cmp	r3, #0
 800923a:	d004      	beq.n	8009246 <USB_EPStartXfer+0xc7e>
 800923c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009240:	3301      	adds	r3, #1
 8009242:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009246:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009248:	881b      	ldrh	r3, [r3, #0]
 800924a:	b29a      	uxth	r2, r3
 800924c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009250:	b29b      	uxth	r3, r3
 8009252:	029b      	lsls	r3, r3, #10
 8009254:	b29b      	uxth	r3, r3
 8009256:	4313      	orrs	r3, r2
 8009258:	b29a      	uxth	r2, r3
 800925a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800925c:	801a      	strh	r2, [r3, #0]
 800925e:	e030      	b.n	80092c2 <USB_EPStartXfer+0xcfa>
 8009260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	785b      	ldrb	r3, [r3, #1]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d128      	bne.n	80092c2 <USB_EPStartXfer+0xcfa>
 8009270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009274:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800927e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009282:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800928c:	b29b      	uxth	r3, r3
 800928e:	461a      	mov	r2, r3
 8009290:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009294:	4413      	add	r3, r2
 8009296:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800929a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800929e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	011a      	lsls	r2, r3, #4
 80092a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80092ac:	4413      	add	r3, r2
 80092ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80092b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80092b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80092c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80092c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	891b      	ldrh	r3, [r3, #8]
 80092ce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80092d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	6959      	ldr	r1, [r3, #20]
 80092de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80092e8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80092ec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80092f0:	6800      	ldr	r0, [r0, #0]
 80092f2:	f000 fe58 	bl	8009fa6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80092f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	4413      	add	r3, r2
 8009310:	881b      	ldrh	r3, [r3, #0]
 8009312:	b29b      	uxth	r3, r3
 8009314:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009318:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800931c:	817b      	strh	r3, [r7, #10]
 800931e:	897b      	ldrh	r3, [r7, #10]
 8009320:	f083 0310 	eor.w	r3, r3, #16
 8009324:	817b      	strh	r3, [r7, #10]
 8009326:	897b      	ldrh	r3, [r7, #10]
 8009328:	f083 0320 	eor.w	r3, r3, #32
 800932c:	817b      	strh	r3, [r7, #10]
 800932e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009332:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800933c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	441a      	add	r2, r3
 8009348:	897b      	ldrh	r3, [r7, #10]
 800934a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800934e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009352:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800935a:	b29b      	uxth	r3, r3
 800935c:	8013      	strh	r3, [r2, #0]
 800935e:	f000 bcde 	b.w	8009d1e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	7b1b      	ldrb	r3, [r3, #12]
 800936e:	2b00      	cmp	r3, #0
 8009370:	f040 80bb 	bne.w	80094ea <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	699a      	ldr	r2, [r3, #24]
 8009380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009384:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	429a      	cmp	r2, r3
 800938e:	d917      	bls.n	80093c0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80093a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	699a      	ldr	r2, [r3, #24]
 80093ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093b0:	1ad2      	subs	r2, r2, r3
 80093b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	619a      	str	r2, [r3, #24]
 80093be:	e00e      	b.n	80093de <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80093c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80093d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2200      	movs	r2, #0
 80093dc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80093de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80093ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	461a      	mov	r2, r3
 80093fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009402:	4413      	add	r3, r2
 8009404:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800940c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	011a      	lsls	r2, r3, #4
 8009416:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800941a:	4413      	add	r3, r2
 800941c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009420:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009424:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009428:	881b      	ldrh	r3, [r3, #0]
 800942a:	b29b      	uxth	r3, r3
 800942c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009430:	b29a      	uxth	r2, r3
 8009432:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009436:	801a      	strh	r2, [r3, #0]
 8009438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800943c:	2b3e      	cmp	r3, #62	@ 0x3e
 800943e:	d924      	bls.n	800948a <USB_EPStartXfer+0xec2>
 8009440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009444:	095b      	lsrs	r3, r3, #5
 8009446:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800944a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800944e:	f003 031f 	and.w	r3, r3, #31
 8009452:	2b00      	cmp	r3, #0
 8009454:	d104      	bne.n	8009460 <USB_EPStartXfer+0xe98>
 8009456:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800945a:	3b01      	subs	r3, #1
 800945c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009460:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009464:	881b      	ldrh	r3, [r3, #0]
 8009466:	b29a      	uxth	r2, r3
 8009468:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800946c:	b29b      	uxth	r3, r3
 800946e:	029b      	lsls	r3, r3, #10
 8009470:	b29b      	uxth	r3, r3
 8009472:	4313      	orrs	r3, r2
 8009474:	b29b      	uxth	r3, r3
 8009476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800947a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800947e:	b29a      	uxth	r2, r3
 8009480:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009484:	801a      	strh	r2, [r3, #0]
 8009486:	f000 bc10 	b.w	8009caa <USB_EPStartXfer+0x16e2>
 800948a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800948e:	2b00      	cmp	r3, #0
 8009490:	d10c      	bne.n	80094ac <USB_EPStartXfer+0xee4>
 8009492:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009496:	881b      	ldrh	r3, [r3, #0]
 8009498:	b29b      	uxth	r3, r3
 800949a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800949e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80094a8:	801a      	strh	r2, [r3, #0]
 80094aa:	e3fe      	b.n	8009caa <USB_EPStartXfer+0x16e2>
 80094ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094b0:	085b      	lsrs	r3, r3, #1
 80094b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80094b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094ba:	f003 0301 	and.w	r3, r3, #1
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d004      	beq.n	80094cc <USB_EPStartXfer+0xf04>
 80094c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80094c6:	3301      	adds	r3, #1
 80094c8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80094cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80094d0:	881b      	ldrh	r3, [r3, #0]
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80094d8:	b29b      	uxth	r3, r3
 80094da:	029b      	lsls	r3, r3, #10
 80094dc:	b29b      	uxth	r3, r3
 80094de:	4313      	orrs	r3, r2
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80094e6:	801a      	strh	r2, [r3, #0]
 80094e8:	e3df      	b.n	8009caa <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80094ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	78db      	ldrb	r3, [r3, #3]
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	f040 8218 	bne.w	800992c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80094fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	785b      	ldrb	r3, [r3, #1]
 8009508:	2b00      	cmp	r3, #0
 800950a:	f040 809d 	bne.w	8009648 <USB_EPStartXfer+0x1080>
 800950e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009512:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800951c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009520:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800952a:	b29b      	uxth	r3, r3
 800952c:	461a      	mov	r2, r3
 800952e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009532:	4413      	add	r3, r2
 8009534:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800953c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	011a      	lsls	r2, r3, #4
 8009546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800954a:	4413      	add	r3, r2
 800954c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009550:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009554:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009558:	881b      	ldrh	r3, [r3, #0]
 800955a:	b29b      	uxth	r3, r3
 800955c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009560:	b29a      	uxth	r2, r3
 8009562:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009566:	801a      	strh	r2, [r3, #0]
 8009568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800956c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	691b      	ldr	r3, [r3, #16]
 8009574:	2b3e      	cmp	r3, #62	@ 0x3e
 8009576:	d92b      	bls.n	80095d0 <USB_EPStartXfer+0x1008>
 8009578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800957c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	095b      	lsrs	r3, r3, #5
 8009586:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800958a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800958e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	f003 031f 	and.w	r3, r3, #31
 800959a:	2b00      	cmp	r3, #0
 800959c:	d104      	bne.n	80095a8 <USB_EPStartXfer+0xfe0>
 800959e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095a2:	3b01      	subs	r3, #1
 80095a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80095a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80095ac:	881b      	ldrh	r3, [r3, #0]
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	029b      	lsls	r3, r3, #10
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	4313      	orrs	r3, r2
 80095bc:	b29b      	uxth	r3, r3
 80095be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095c6:	b29a      	uxth	r2, r3
 80095c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80095cc:	801a      	strh	r2, [r3, #0]
 80095ce:	e070      	b.n	80096b2 <USB_EPStartXfer+0x10ea>
 80095d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d10c      	bne.n	80095fa <USB_EPStartXfer+0x1032>
 80095e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80095e4:	881b      	ldrh	r3, [r3, #0]
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80095f6:	801a      	strh	r2, [r3, #0]
 80095f8:	e05b      	b.n	80096b2 <USB_EPStartXfer+0x10ea>
 80095fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	691b      	ldr	r3, [r3, #16]
 8009606:	085b      	lsrs	r3, r3, #1
 8009608:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800960c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	691b      	ldr	r3, [r3, #16]
 8009618:	f003 0301 	and.w	r3, r3, #1
 800961c:	2b00      	cmp	r3, #0
 800961e:	d004      	beq.n	800962a <USB_EPStartXfer+0x1062>
 8009620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009624:	3301      	adds	r3, #1
 8009626:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800962a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800962e:	881b      	ldrh	r3, [r3, #0]
 8009630:	b29a      	uxth	r2, r3
 8009632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009636:	b29b      	uxth	r3, r3
 8009638:	029b      	lsls	r3, r3, #10
 800963a:	b29b      	uxth	r3, r3
 800963c:	4313      	orrs	r3, r2
 800963e:	b29a      	uxth	r2, r3
 8009640:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009644:	801a      	strh	r2, [r3, #0]
 8009646:	e034      	b.n	80096b2 <USB_EPStartXfer+0x10ea>
 8009648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800964c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	785b      	ldrb	r3, [r3, #1]
 8009654:	2b01      	cmp	r3, #1
 8009656:	d12c      	bne.n	80096b2 <USB_EPStartXfer+0x10ea>
 8009658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800965c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800966a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009674:	b29b      	uxth	r3, r3
 8009676:	461a      	mov	r2, r3
 8009678:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800967c:	4413      	add	r3, r2
 800967e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	011a      	lsls	r2, r3, #4
 8009690:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009694:	4413      	add	r3, r2
 8009696:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800969a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800969e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80096b0:	801a      	strh	r2, [r3, #0]
 80096b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80096c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	785b      	ldrb	r3, [r3, #1]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f040 809d 	bne.w	800980c <USB_EPStartXfer+0x1244>
 80096d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80096e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	461a      	mov	r2, r3
 80096f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80096f6:	4413      	add	r3, r2
 80096f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80096fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	011a      	lsls	r2, r3, #4
 800970a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800970e:	4413      	add	r3, r2
 8009710:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009714:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009718:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800971c:	881b      	ldrh	r3, [r3, #0]
 800971e:	b29b      	uxth	r3, r3
 8009720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009724:	b29a      	uxth	r2, r3
 8009726:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800972a:	801a      	strh	r2, [r3, #0]
 800972c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009730:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	691b      	ldr	r3, [r3, #16]
 8009738:	2b3e      	cmp	r3, #62	@ 0x3e
 800973a:	d92b      	bls.n	8009794 <USB_EPStartXfer+0x11cc>
 800973c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	095b      	lsrs	r3, r3, #5
 800974a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800974e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009752:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	f003 031f 	and.w	r3, r3, #31
 800975e:	2b00      	cmp	r3, #0
 8009760:	d104      	bne.n	800976c <USB_EPStartXfer+0x11a4>
 8009762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009766:	3b01      	subs	r3, #1
 8009768:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800976c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009770:	881b      	ldrh	r3, [r3, #0]
 8009772:	b29a      	uxth	r2, r3
 8009774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009778:	b29b      	uxth	r3, r3
 800977a:	029b      	lsls	r3, r3, #10
 800977c:	b29b      	uxth	r3, r3
 800977e:	4313      	orrs	r3, r2
 8009780:	b29b      	uxth	r3, r3
 8009782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800978a:	b29a      	uxth	r2, r3
 800978c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009790:	801a      	strh	r2, [r3, #0]
 8009792:	e069      	b.n	8009868 <USB_EPStartXfer+0x12a0>
 8009794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	691b      	ldr	r3, [r3, #16]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d10c      	bne.n	80097be <USB_EPStartXfer+0x11f6>
 80097a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80097a8:	881b      	ldrh	r3, [r3, #0]
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80097ba:	801a      	strh	r2, [r3, #0]
 80097bc:	e054      	b.n	8009868 <USB_EPStartXfer+0x12a0>
 80097be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	085b      	lsrs	r3, r3, #1
 80097cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80097d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	f003 0301 	and.w	r3, r3, #1
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d004      	beq.n	80097ee <USB_EPStartXfer+0x1226>
 80097e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097e8:	3301      	adds	r3, #1
 80097ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80097ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80097f2:	881b      	ldrh	r3, [r3, #0]
 80097f4:	b29a      	uxth	r2, r3
 80097f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	029b      	lsls	r3, r3, #10
 80097fe:	b29b      	uxth	r3, r3
 8009800:	4313      	orrs	r3, r2
 8009802:	b29a      	uxth	r2, r3
 8009804:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009808:	801a      	strh	r2, [r3, #0]
 800980a:	e02d      	b.n	8009868 <USB_EPStartXfer+0x12a0>
 800980c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009810:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	785b      	ldrb	r3, [r3, #1]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d125      	bne.n	8009868 <USB_EPStartXfer+0x12a0>
 800981c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009820:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800982a:	b29b      	uxth	r3, r3
 800982c:	461a      	mov	r2, r3
 800982e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009832:	4413      	add	r3, r2
 8009834:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800983c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	011a      	lsls	r2, r3, #4
 8009846:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800984a:	4413      	add	r3, r2
 800984c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009850:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	b29a      	uxth	r2, r3
 8009862:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009866:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800986c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	69db      	ldr	r3, [r3, #28]
 8009874:	2b00      	cmp	r3, #0
 8009876:	f000 8218 	beq.w	8009caa <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800987a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800987e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	4413      	add	r3, r2
 8009894:	881b      	ldrh	r3, [r3, #0]
 8009896:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800989a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800989e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d005      	beq.n	80098b2 <USB_EPStartXfer+0x12ea>
 80098a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80098aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10d      	bne.n	80098ce <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80098b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80098b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f040 81f5 	bne.w	8009caa <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80098c0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80098c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f040 81ee 	bne.w	8009caa <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80098ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	4413      	add	r3, r2
 80098e8:	881b      	ldrh	r3, [r3, #0]
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098f4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80098f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	441a      	add	r2, r3
 8009912:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009916:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800991a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800991e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009922:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009926:	b29b      	uxth	r3, r3
 8009928:	8013      	strh	r3, [r2, #0]
 800992a:	e1be      	b.n	8009caa <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800992c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	78db      	ldrb	r3, [r3, #3]
 8009938:	2b01      	cmp	r3, #1
 800993a:	f040 81b4 	bne.w	8009ca6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800993e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	699a      	ldr	r2, [r3, #24]
 800994a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800994e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	429a      	cmp	r2, r3
 8009958:	d917      	bls.n	800998a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800995a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800995e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800996a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800996e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	699a      	ldr	r2, [r3, #24]
 8009976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800997a:	1ad2      	subs	r2, r2, r3
 800997c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	619a      	str	r2, [r3, #24]
 8009988:	e00e      	b.n	80099a8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800998a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800998e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	699b      	ldr	r3, [r3, #24]
 8009996:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800999a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800999e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2200      	movs	r2, #0
 80099a6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80099a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	785b      	ldrb	r3, [r3, #1]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f040 8085 	bne.w	8009ac4 <USB_EPStartXfer+0x14fc>
 80099ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80099c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	461a      	mov	r2, r3
 80099da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80099de:	4413      	add	r3, r2
 80099e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80099e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	011a      	lsls	r2, r3, #4
 80099f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80099f6:	4413      	add	r3, r2
 80099f8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80099fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009a04:	881b      	ldrh	r3, [r3, #0]
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a0c:	b29a      	uxth	r2, r3
 8009a0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009a12:	801a      	strh	r2, [r3, #0]
 8009a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a18:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a1a:	d923      	bls.n	8009a64 <USB_EPStartXfer+0x149c>
 8009a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a20:	095b      	lsrs	r3, r3, #5
 8009a22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a2a:	f003 031f 	and.w	r3, r3, #31
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d104      	bne.n	8009a3c <USB_EPStartXfer+0x1474>
 8009a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a36:	3b01      	subs	r3, #1
 8009a38:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009a3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009a40:	881b      	ldrh	r3, [r3, #0]
 8009a42:	b29a      	uxth	r2, r3
 8009a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	029b      	lsls	r3, r3, #10
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009a60:	801a      	strh	r2, [r3, #0]
 8009a62:	e060      	b.n	8009b26 <USB_EPStartXfer+0x155e>
 8009a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10c      	bne.n	8009a86 <USB_EPStartXfer+0x14be>
 8009a6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009a70:	881b      	ldrh	r3, [r3, #0]
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009a82:	801a      	strh	r2, [r3, #0]
 8009a84:	e04f      	b.n	8009b26 <USB_EPStartXfer+0x155e>
 8009a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a8a:	085b      	lsrs	r3, r3, #1
 8009a8c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a94:	f003 0301 	and.w	r3, r3, #1
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d004      	beq.n	8009aa6 <USB_EPStartXfer+0x14de>
 8009a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009aa6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009aaa:	881b      	ldrh	r3, [r3, #0]
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	029b      	lsls	r3, r3, #10
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	b29a      	uxth	r2, r3
 8009abc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009ac0:	801a      	strh	r2, [r3, #0]
 8009ac2:	e030      	b.n	8009b26 <USB_EPStartXfer+0x155e>
 8009ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	785b      	ldrb	r3, [r3, #1]
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d128      	bne.n	8009b26 <USB_EPStartXfer+0x155e>
 8009ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ad8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ae6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	461a      	mov	r2, r3
 8009af4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009af8:	4413      	add	r3, r2
 8009afa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009afe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	011a      	lsls	r2, r3, #4
 8009b0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009b10:	4413      	add	r3, r2
 8009b12:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009b16:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b1e:	b29a      	uxth	r2, r3
 8009b20:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8009b24:	801a      	strh	r2, [r3, #0]
 8009b26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009b34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	785b      	ldrb	r3, [r3, #1]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f040 8085 	bne.w	8009c50 <USB_EPStartXfer+0x1688>
 8009b46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	461a      	mov	r2, r3
 8009b66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009b6a:	4413      	add	r3, r2
 8009b6c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	011a      	lsls	r2, r3, #4
 8009b7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009b82:	4413      	add	r3, r2
 8009b84:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009b88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009b8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009b90:	881b      	ldrh	r3, [r3, #0]
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009b9e:	801a      	strh	r2, [r3, #0]
 8009ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ba4:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ba6:	d923      	bls.n	8009bf0 <USB_EPStartXfer+0x1628>
 8009ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bac:	095b      	lsrs	r3, r3, #5
 8009bae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bb6:	f003 031f 	and.w	r3, r3, #31
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d104      	bne.n	8009bc8 <USB_EPStartXfer+0x1600>
 8009bbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009bc2:	3b01      	subs	r3, #1
 8009bc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009bc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009bcc:	881b      	ldrh	r3, [r3, #0]
 8009bce:	b29a      	uxth	r2, r3
 8009bd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	029b      	lsls	r3, r3, #10
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009bec:	801a      	strh	r2, [r3, #0]
 8009bee:	e05c      	b.n	8009caa <USB_EPStartXfer+0x16e2>
 8009bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10c      	bne.n	8009c12 <USB_EPStartXfer+0x164a>
 8009bf8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009bfc:	881b      	ldrh	r3, [r3, #0]
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009c0e:	801a      	strh	r2, [r3, #0]
 8009c10:	e04b      	b.n	8009caa <USB_EPStartXfer+0x16e2>
 8009c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c16:	085b      	lsrs	r3, r3, #1
 8009c18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c20:	f003 0301 	and.w	r3, r3, #1
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d004      	beq.n	8009c32 <USB_EPStartXfer+0x166a>
 8009c28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009c32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009c36:	881b      	ldrh	r3, [r3, #0]
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	029b      	lsls	r3, r3, #10
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	4313      	orrs	r3, r2
 8009c46:	b29a      	uxth	r2, r3
 8009c48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009c4c:	801a      	strh	r2, [r3, #0]
 8009c4e:	e02c      	b.n	8009caa <USB_EPStartXfer+0x16e2>
 8009c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	785b      	ldrb	r3, [r3, #1]
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d124      	bne.n	8009caa <USB_EPStartXfer+0x16e2>
 8009c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	461a      	mov	r2, r3
 8009c72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009c76:	4413      	add	r3, r2
 8009c78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	011a      	lsls	r2, r3, #4
 8009c8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009c8e:	4413      	add	r3, r2
 8009c90:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009c94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009ca2:	801a      	strh	r2, [r3, #0]
 8009ca4:	e001      	b.n	8009caa <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e03a      	b.n	8009d20 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009caa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	881b      	ldrh	r3, [r3, #0]
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ccc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cd0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009cd4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009cd8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009cdc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009ce0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009ce4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009ce8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	441a      	add	r2, r3
 8009d06:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009d0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009d1e:	2300      	movs	r3, #0
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009d2a:	b480      	push	{r7}
 8009d2c:	b085      	sub	sp, #20
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
 8009d32:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	785b      	ldrb	r3, [r3, #1]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d020      	beq.n	8009d7e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	4413      	add	r3, r2
 8009d46:	881b      	ldrh	r3, [r3, #0]
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d52:	81bb      	strh	r3, [r7, #12]
 8009d54:	89bb      	ldrh	r3, [r7, #12]
 8009d56:	f083 0310 	eor.w	r3, r3, #16
 8009d5a:	81bb      	strh	r3, [r7, #12]
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	441a      	add	r2, r3
 8009d66:	89bb      	ldrh	r3, [r7, #12]
 8009d68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	8013      	strh	r3, [r2, #0]
 8009d7c:	e01f      	b.n	8009dbe <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	4413      	add	r3, r2
 8009d88:	881b      	ldrh	r3, [r3, #0]
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d94:	81fb      	strh	r3, [r7, #14]
 8009d96:	89fb      	ldrh	r3, [r7, #14]
 8009d98:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009d9c:	81fb      	strh	r3, [r7, #14]
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	441a      	add	r2, r3
 8009da8:	89fb      	ldrh	r3, [r7, #14]
 8009daa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009dae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009db2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3714      	adds	r7, #20
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bc80      	pop	{r7}
 8009dc8:	4770      	bx	lr

08009dca <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b087      	sub	sp, #28
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	7b1b      	ldrb	r3, [r3, #12]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f040 809d 	bne.w	8009f18 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	785b      	ldrb	r3, [r3, #1]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d04c      	beq.n	8009e80 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	4413      	add	r3, r2
 8009df0:	881b      	ldrh	r3, [r3, #0]
 8009df2:	823b      	strh	r3, [r7, #16]
 8009df4:	8a3b      	ldrh	r3, [r7, #16]
 8009df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d01b      	beq.n	8009e36 <USB_EPClearStall+0x6c>
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	4413      	add	r3, r2
 8009e08:	881b      	ldrh	r3, [r3, #0]
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e14:	81fb      	strh	r3, [r7, #14]
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	441a      	add	r2, r3
 8009e20:	89fb      	ldrh	r3, [r7, #14]
 8009e22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e2e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	78db      	ldrb	r3, [r3, #3]
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d06c      	beq.n	8009f18 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4413      	add	r3, r2
 8009e48:	881b      	ldrh	r3, [r3, #0]
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e54:	81bb      	strh	r3, [r7, #12]
 8009e56:	89bb      	ldrh	r3, [r7, #12]
 8009e58:	f083 0320 	eor.w	r3, r3, #32
 8009e5c:	81bb      	strh	r3, [r7, #12]
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	441a      	add	r2, r3
 8009e68:	89bb      	ldrh	r3, [r7, #12]
 8009e6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	8013      	strh	r3, [r2, #0]
 8009e7e:	e04b      	b.n	8009f18 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	4413      	add	r3, r2
 8009e8a:	881b      	ldrh	r3, [r3, #0]
 8009e8c:	82fb      	strh	r3, [r7, #22]
 8009e8e:	8afb      	ldrh	r3, [r7, #22]
 8009e90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d01b      	beq.n	8009ed0 <USB_EPClearStall+0x106>
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4413      	add	r3, r2
 8009ea2:	881b      	ldrh	r3, [r3, #0]
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009eae:	82bb      	strh	r3, [r7, #20]
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	441a      	add	r2, r3
 8009eba:	8abb      	ldrh	r3, [r7, #20]
 8009ebc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ec0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ec4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	881b      	ldrh	r3, [r3, #0]
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ee6:	827b      	strh	r3, [r7, #18]
 8009ee8:	8a7b      	ldrh	r3, [r7, #18]
 8009eea:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009eee:	827b      	strh	r3, [r7, #18]
 8009ef0:	8a7b      	ldrh	r3, [r7, #18]
 8009ef2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009ef6:	827b      	strh	r3, [r7, #18]
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	441a      	add	r2, r3
 8009f02:	8a7b      	ldrh	r3, [r7, #18]
 8009f04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	371c      	adds	r7, #28
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bc80      	pop	{r7}
 8009f22:	4770      	bx	lr

08009f24 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009f30:	78fb      	ldrb	r3, [r7, #3]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d103      	bne.n	8009f3e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2280      	movs	r2, #128	@ 0x80
 8009f3a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bc80      	pop	{r7}
 8009f48:	4770      	bx	lr

08009f4a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009f4a:	b480      	push	{r7}
 8009f4c:	b083      	sub	sp, #12
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bc80      	pop	{r7}
 8009f5c:	4770      	bx	lr

08009f5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009f5e:	b480      	push	{r7}
 8009f60:	b083      	sub	sp, #12
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bc80      	pop	{r7}
 8009f70:	4770      	bx	lr

08009f72 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009f72:	b480      	push	{r7}
 8009f74:	b085      	sub	sp, #20
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009f84:	68fb      	ldr	r3, [r7, #12]
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3714      	adds	r7, #20
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bc80      	pop	{r7}
 8009f8e:	4770      	bx	lr

08009f90 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bc80      	pop	{r7}
 8009fa4:	4770      	bx	lr

08009fa6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009fa6:	b480      	push	{r7}
 8009fa8:	b08b      	sub	sp, #44	@ 0x2c
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	60f8      	str	r0, [r7, #12]
 8009fae:	60b9      	str	r1, [r7, #8]
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	80fb      	strh	r3, [r7, #6]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009fbc:	88bb      	ldrh	r3, [r7, #4]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	085b      	lsrs	r3, r3, #1
 8009fc2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009fcc:	88fb      	ldrh	r3, [r7, #6]
 8009fce:	005a      	lsls	r2, r3, #1
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009fd8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fde:	e01f      	b.n	800a020 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009fe6:	69fb      	ldr	r3, [r7, #28]
 8009fe8:	3301      	adds	r3, #1
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	b21b      	sxth	r3, r3
 8009fee:	021b      	lsls	r3, r3, #8
 8009ff0:	b21a      	sxth	r2, r3
 8009ff2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	b21b      	sxth	r3, r3
 8009ffa:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009ffc:	6a3b      	ldr	r3, [r7, #32]
 8009ffe:	8a7a      	ldrh	r2, [r7, #18]
 800a000:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a002:	6a3b      	ldr	r3, [r7, #32]
 800a004:	3302      	adds	r3, #2
 800a006:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a008:	6a3b      	ldr	r3, [r7, #32]
 800a00a:	3302      	adds	r3, #2
 800a00c:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800a00e:	69fb      	ldr	r3, [r7, #28]
 800a010:	3301      	adds	r3, #1
 800a012:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	3301      	adds	r3, #1
 800a018:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a01c:	3b01      	subs	r3, #1
 800a01e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1dc      	bne.n	8009fe0 <USB_WritePMA+0x3a>
  }
}
 800a026:	bf00      	nop
 800a028:	bf00      	nop
 800a02a:	372c      	adds	r7, #44	@ 0x2c
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bc80      	pop	{r7}
 800a030:	4770      	bx	lr

0800a032 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a032:	b480      	push	{r7}
 800a034:	b08b      	sub	sp, #44	@ 0x2c
 800a036:	af00      	add	r7, sp, #0
 800a038:	60f8      	str	r0, [r7, #12]
 800a03a:	60b9      	str	r1, [r7, #8]
 800a03c:	4611      	mov	r1, r2
 800a03e:	461a      	mov	r2, r3
 800a040:	460b      	mov	r3, r1
 800a042:	80fb      	strh	r3, [r7, #6]
 800a044:	4613      	mov	r3, r2
 800a046:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a048:	88bb      	ldrh	r3, [r7, #4]
 800a04a:	085b      	lsrs	r3, r3, #1
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a058:	88fb      	ldrh	r3, [r7, #6]
 800a05a:	005a      	lsls	r2, r3, #1
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	4413      	add	r3, r2
 800a060:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a064:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	627b      	str	r3, [r7, #36]	@ 0x24
 800a06a:	e01b      	b.n	800a0a4 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a06c:	6a3b      	ldr	r3, [r7, #32]
 800a06e:	881b      	ldrh	r3, [r3, #0]
 800a070:	b29b      	uxth	r3, r3
 800a072:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a074:	6a3b      	ldr	r3, [r7, #32]
 800a076:	3302      	adds	r3, #2
 800a078:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	b2da      	uxtb	r2, r3
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	3301      	adds	r3, #1
 800a086:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	0a1b      	lsrs	r3, r3, #8
 800a08c:	b2da      	uxtb	r2, r3
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	3301      	adds	r3, #1
 800a096:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a098:	6a3b      	ldr	r3, [r7, #32]
 800a09a:	3302      	adds	r3, #2
 800a09c:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800a09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1e0      	bne.n	800a06c <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a0aa:	88bb      	ldrh	r3, [r7, #4]
 800a0ac:	f003 0301 	and.w	r3, r3, #1
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d007      	beq.n	800a0c6 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800a0b6:	6a3b      	ldr	r3, [r7, #32]
 800a0b8:	881b      	ldrh	r3, [r3, #0]
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	b2da      	uxtb	r2, r3
 800a0c2:	69fb      	ldr	r3, [r7, #28]
 800a0c4:	701a      	strb	r2, [r3, #0]
  }
}
 800a0c6:	bf00      	nop
 800a0c8:	372c      	adds	r7, #44	@ 0x2c
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bc80      	pop	{r7}
 800a0ce:	4770      	bx	lr

0800a0d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	460b      	mov	r3, r1
 800a0da:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	7c1b      	ldrb	r3, [r3, #16]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d115      	bne.n	800a114 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a0e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a0ec:	2202      	movs	r2, #2
 800a0ee:	2181      	movs	r1, #129	@ 0x81
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f001 fe96 	bl	800be22 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a0fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a100:	2202      	movs	r2, #2
 800a102:	2101      	movs	r1, #1
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f001 fe8c 	bl	800be22 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2201      	movs	r2, #1
 800a10e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800a112:	e012      	b.n	800a13a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a114:	2340      	movs	r3, #64	@ 0x40
 800a116:	2202      	movs	r2, #2
 800a118:	2181      	movs	r1, #129	@ 0x81
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f001 fe81 	bl	800be22 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a126:	2340      	movs	r3, #64	@ 0x40
 800a128:	2202      	movs	r2, #2
 800a12a:	2101      	movs	r1, #1
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f001 fe78 	bl	800be22 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2201      	movs	r2, #1
 800a136:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a13a:	2308      	movs	r3, #8
 800a13c:	2203      	movs	r2, #3
 800a13e:	2182      	movs	r1, #130	@ 0x82
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f001 fe6e 	bl	800be22 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2201      	movs	r2, #1
 800a14a:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a14c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a150:	f001 ff8e 	bl	800c070 <USBD_static_malloc>
 800a154:	4602      	mov	r2, r0
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a162:	2b00      	cmp	r3, #0
 800a164:	d102      	bne.n	800a16c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a166:	2301      	movs	r3, #1
 800a168:	73fb      	strb	r3, [r7, #15]
 800a16a:	e026      	b.n	800a1ba <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a172:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	2200      	movs	r2, #0
 800a182:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	2200      	movs	r2, #0
 800a18a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	7c1b      	ldrb	r3, [r3, #16]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d109      	bne.n	800a1aa <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a19c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a1a0:	2101      	movs	r1, #1
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f001 ff2d 	bl	800c002 <USBD_LL_PrepareReceive>
 800a1a8:	e007      	b.n	800a1ba <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a1b0:	2340      	movs	r3, #64	@ 0x40
 800a1b2:	2101      	movs	r1, #1
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f001 ff24 	bl	800c002 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a1ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a1d4:	2181      	movs	r1, #129	@ 0x81
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f001 fe49 	bl	800be6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a1e2:	2101      	movs	r1, #1
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f001 fe42 	bl	800be6e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a1f2:	2182      	movs	r1, #130	@ 0x82
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f001 fe3a 	bl	800be6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00e      	beq.n	800a228 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a21a:	4618      	mov	r0, r3
 800a21c:	f001 ff34 	bl	800c088 <USBD_static_free>
    pdev->pClassData = NULL;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800a228:	7bfb      	ldrb	r3, [r7, #15]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b086      	sub	sp, #24
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a242:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a244:	2300      	movs	r3, #0
 800a246:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a248:	2300      	movs	r3, #0
 800a24a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a24c:	2300      	movs	r3, #0
 800a24e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d039      	beq.n	800a2d0 <USBD_CDC_Setup+0x9e>
 800a25c:	2b20      	cmp	r3, #32
 800a25e:	d17f      	bne.n	800a360 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	88db      	ldrh	r3, [r3, #6]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d029      	beq.n	800a2bc <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	b25b      	sxtb	r3, r3
 800a26e:	2b00      	cmp	r3, #0
 800a270:	da11      	bge.n	800a296 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a27e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a280:	683a      	ldr	r2, [r7, #0]
 800a282:	88d2      	ldrh	r2, [r2, #6]
 800a284:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a286:	6939      	ldr	r1, [r7, #16]
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	88db      	ldrh	r3, [r3, #6]
 800a28c:	461a      	mov	r2, r3
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f001 fa06 	bl	800b6a0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a294:	e06b      	b.n	800a36e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	785a      	ldrb	r2, [r3, #1]
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	88db      	ldrh	r3, [r3, #6]
 800a2a4:	b2da      	uxtb	r2, r3
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a2ac:	6939      	ldr	r1, [r7, #16]
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	88db      	ldrh	r3, [r3, #6]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f001 fa21 	bl	800b6fc <USBD_CtlPrepareRx>
      break;
 800a2ba:	e058      	b.n	800a36e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	683a      	ldr	r2, [r7, #0]
 800a2c6:	7850      	ldrb	r0, [r2, #1]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	6839      	ldr	r1, [r7, #0]
 800a2cc:	4798      	blx	r3
      break;
 800a2ce:	e04e      	b.n	800a36e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	785b      	ldrb	r3, [r3, #1]
 800a2d4:	2b0b      	cmp	r3, #11
 800a2d6:	d02e      	beq.n	800a336 <USBD_CDC_Setup+0x104>
 800a2d8:	2b0b      	cmp	r3, #11
 800a2da:	dc38      	bgt.n	800a34e <USBD_CDC_Setup+0x11c>
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d002      	beq.n	800a2e6 <USBD_CDC_Setup+0xb4>
 800a2e0:	2b0a      	cmp	r3, #10
 800a2e2:	d014      	beq.n	800a30e <USBD_CDC_Setup+0xdc>
 800a2e4:	e033      	b.n	800a34e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2ec:	2b03      	cmp	r3, #3
 800a2ee:	d107      	bne.n	800a300 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a2f0:	f107 030c 	add.w	r3, r7, #12
 800a2f4:	2202      	movs	r2, #2
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f001 f9d1 	bl	800b6a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a2fe:	e02e      	b.n	800a35e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a300:	6839      	ldr	r1, [r7, #0]
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f001 f962 	bl	800b5cc <USBD_CtlError>
            ret = USBD_FAIL;
 800a308:	2302      	movs	r3, #2
 800a30a:	75fb      	strb	r3, [r7, #23]
          break;
 800a30c:	e027      	b.n	800a35e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a314:	2b03      	cmp	r3, #3
 800a316:	d107      	bne.n	800a328 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a318:	f107 030f 	add.w	r3, r7, #15
 800a31c:	2201      	movs	r2, #1
 800a31e:	4619      	mov	r1, r3
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f001 f9bd 	bl	800b6a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a326:	e01a      	b.n	800a35e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a328:	6839      	ldr	r1, [r7, #0]
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f001 f94e 	bl	800b5cc <USBD_CtlError>
            ret = USBD_FAIL;
 800a330:	2302      	movs	r3, #2
 800a332:	75fb      	strb	r3, [r7, #23]
          break;
 800a334:	e013      	b.n	800a35e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a33c:	2b03      	cmp	r3, #3
 800a33e:	d00d      	beq.n	800a35c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f001 f942 	bl	800b5cc <USBD_CtlError>
            ret = USBD_FAIL;
 800a348:	2302      	movs	r3, #2
 800a34a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a34c:	e006      	b.n	800a35c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a34e:	6839      	ldr	r1, [r7, #0]
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f001 f93b 	bl	800b5cc <USBD_CtlError>
          ret = USBD_FAIL;
 800a356:	2302      	movs	r3, #2
 800a358:	75fb      	strb	r3, [r7, #23]
          break;
 800a35a:	e000      	b.n	800a35e <USBD_CDC_Setup+0x12c>
          break;
 800a35c:	bf00      	nop
      }
      break;
 800a35e:	e006      	b.n	800a36e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a360:	6839      	ldr	r1, [r7, #0]
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f001 f932 	bl	800b5cc <USBD_CtlError>
      ret = USBD_FAIL;
 800a368:	2302      	movs	r3, #2
 800a36a:	75fb      	strb	r3, [r7, #23]
      break;
 800a36c:	bf00      	nop
  }

  return ret;
 800a36e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3718      	adds	r7, #24
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	460b      	mov	r3, r1
 800a382:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a38a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a392:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d03a      	beq.n	800a414 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a39e:	78fa      	ldrb	r2, [r7, #3]
 800a3a0:	6879      	ldr	r1, [r7, #4]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4413      	add	r3, r2
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	440b      	add	r3, r1
 800a3ac:	331c      	adds	r3, #28
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d029      	beq.n	800a408 <USBD_CDC_DataIn+0x90>
 800a3b4:	78fa      	ldrb	r2, [r7, #3]
 800a3b6:	6879      	ldr	r1, [r7, #4]
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	4413      	add	r3, r2
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	440b      	add	r3, r1
 800a3c2:	331c      	adds	r3, #28
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	78f9      	ldrb	r1, [r7, #3]
 800a3c8:	68b8      	ldr	r0, [r7, #8]
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	440b      	add	r3, r1
 800a3d0:	00db      	lsls	r3, r3, #3
 800a3d2:	4403      	add	r3, r0
 800a3d4:	3320      	adds	r3, #32
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	fbb2 f1f3 	udiv	r1, r2, r3
 800a3dc:	fb01 f303 	mul.w	r3, r1, r3
 800a3e0:	1ad3      	subs	r3, r2, r3
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d110      	bne.n	800a408 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a3e6:	78fa      	ldrb	r2, [r7, #3]
 800a3e8:	6879      	ldr	r1, [r7, #4]
 800a3ea:	4613      	mov	r3, r2
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	4413      	add	r3, r2
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	440b      	add	r3, r1
 800a3f4:	331c      	adds	r3, #28
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a3fa:	78f9      	ldrb	r1, [r7, #3]
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	2200      	movs	r2, #0
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f001 fddb 	bl	800bfbc <USBD_LL_Transmit>
 800a406:	e003      	b.n	800a410 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800a410:	2300      	movs	r3, #0
 800a412:	e000      	b.n	800a416 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a414:	2302      	movs	r3, #2
  }
}
 800a416:	4618      	mov	r0, r3
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b084      	sub	sp, #16
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
 800a426:	460b      	mov	r3, r1
 800a428:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a430:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a432:	78fb      	ldrb	r3, [r7, #3]
 800a434:	4619      	mov	r1, r3
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f001 fe06 	bl	800c048 <USBD_LL_GetRxDataSize>
 800a43c:	4602      	mov	r2, r0
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00d      	beq.n	800a46a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a462:	4611      	mov	r1, r2
 800a464:	4798      	blx	r3

    return USBD_OK;
 800a466:	2300      	movs	r3, #0
 800a468:	e000      	b.n	800a46c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a46a:	2302      	movs	r3, #2
  }
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a482:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d014      	beq.n	800a4b8 <USBD_CDC_EP0_RxReady+0x44>
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a494:	2bff      	cmp	r3, #255	@ 0xff
 800a496:	d00f      	beq.n	800a4b8 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a4a6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a4ae:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	22ff      	movs	r2, #255	@ 0xff
 800a4b4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
	...

0800a4c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2243      	movs	r2, #67	@ 0x43
 800a4d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a4d2:	4b03      	ldr	r3, [pc, #12]	@ (800a4e0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bc80      	pop	{r7}
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	2000009c 	.word	0x2000009c

0800a4e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2243      	movs	r2, #67	@ 0x43
 800a4f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a4f2:	4b03      	ldr	r3, [pc, #12]	@ (800a500 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bc80      	pop	{r7}
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	20000058 	.word	0x20000058

0800a504 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2243      	movs	r2, #67	@ 0x43
 800a510:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a512:	4b03      	ldr	r3, [pc, #12]	@ (800a520 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a514:	4618      	mov	r0, r3
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	bc80      	pop	{r7}
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop
 800a520:	200000e0 	.word	0x200000e0

0800a524 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	220a      	movs	r2, #10
 800a530:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a532:	4b03      	ldr	r3, [pc, #12]	@ (800a540 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a534:	4618      	mov	r0, r3
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	bc80      	pop	{r7}
 800a53c:	4770      	bx	lr
 800a53e:	bf00      	nop
 800a540:	20000014 	.word	0x20000014

0800a544 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a54e:	2302      	movs	r3, #2
 800a550:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d005      	beq.n	800a564 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	683a      	ldr	r2, [r7, #0]
 800a55c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800a560:	2300      	movs	r3, #0
 800a562:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a564:	7bfb      	ldrb	r3, [r7, #15]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3714      	adds	r7, #20
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bc80      	pop	{r7}
 800a56e:	4770      	bx	lr

0800a570 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a570:	b480      	push	{r7}
 800a572:	b087      	sub	sp, #28
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	4613      	mov	r3, r2
 800a57c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a584:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	68ba      	ldr	r2, [r7, #8]
 800a58a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a58e:	88fa      	ldrh	r2, [r7, #6]
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800a596:	2300      	movs	r3, #0
}
 800a598:	4618      	mov	r0, r3
 800a59a:	371c      	adds	r7, #28
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bc80      	pop	{r7}
 800a5a0:	4770      	bx	lr

0800a5a2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a5a2:	b480      	push	{r7}
 800a5a4:	b085      	sub	sp, #20
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
 800a5aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5b2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	683a      	ldr	r2, [r7, #0]
 800a5b8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800a5bc:	2300      	movs	r3, #0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3714      	adds	r7, #20
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bc80      	pop	{r7}
 800a5c6:	4770      	bx	lr

0800a5c8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d01c      	beq.n	800a61c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d115      	bne.n	800a618 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	2181      	movs	r1, #129	@ 0x81
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f001 fcd4 	bl	800bfbc <USBD_LL_Transmit>

      return USBD_OK;
 800a614:	2300      	movs	r3, #0
 800a616:	e002      	b.n	800a61e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a618:	2301      	movs	r3, #1
 800a61a:	e000      	b.n	800a61e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a61c:	2302      	movs	r3, #2
  }
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b084      	sub	sp, #16
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a634:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d017      	beq.n	800a670 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	7c1b      	ldrb	r3, [r3, #16]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d109      	bne.n	800a65c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a64e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a652:	2101      	movs	r1, #1
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f001 fcd4 	bl	800c002 <USBD_LL_PrepareReceive>
 800a65a:	e007      	b.n	800a66c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a662:	2340      	movs	r3, #64	@ 0x40
 800a664:	2101      	movs	r1, #1
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f001 fccb 	bl	800c002 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a66c:	2300      	movs	r3, #0
 800a66e:	e000      	b.n	800a672 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a670:	2302      	movs	r3, #2
  }
}
 800a672:	4618      	mov	r0, r3
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b084      	sub	sp, #16
 800a67e:	af00      	add	r7, sp, #0
 800a680:	60f8      	str	r0, [r7, #12]
 800a682:	60b9      	str	r1, [r7, #8]
 800a684:	4613      	mov	r3, r2
 800a686:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d101      	bne.n	800a692 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a68e:	2302      	movs	r3, #2
 800a690:	e01a      	b.n	800a6c8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d003      	beq.n	800a6a4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d003      	beq.n	800a6b2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	68ba      	ldr	r2, [r7, #8]
 800a6ae:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	79fa      	ldrb	r2, [r7, #7]
 800a6be:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a6c0:	68f8      	ldr	r0, [r7, #12]
 800a6c2:	f001 fb39 	bl	800bd38 <USBD_LL_Init>

  return USBD_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3710      	adds	r7, #16
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b085      	sub	sp, #20
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d006      	beq.n	800a6f2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	683a      	ldr	r2, [r7, #0]
 800a6e8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	73fb      	strb	r3, [r7, #15]
 800a6f0:	e001      	b.n	800a6f6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a6f2:	2302      	movs	r3, #2
 800a6f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a6f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3714      	adds	r7, #20
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bc80      	pop	{r7}
 800a700:	4770      	bx	lr

0800a702 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b082      	sub	sp, #8
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f001 fb6e 	bl	800bdec <USBD_LL_Start>

  return USBD_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3708      	adds	r7, #8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a71a:	b480      	push	{r7}
 800a71c:	b083      	sub	sp, #12
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	bc80      	pop	{r7}
 800a72c:	4770      	bx	lr

0800a72e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b084      	sub	sp, #16
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
 800a736:	460b      	mov	r3, r1
 800a738:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a73a:	2302      	movs	r3, #2
 800a73c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a744:	2b00      	cmp	r3, #0
 800a746:	d00c      	beq.n	800a762 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	78fa      	ldrb	r2, [r7, #3]
 800a752:	4611      	mov	r1, r2
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	4798      	blx	r3
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d101      	bne.n	800a762 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a75e:	2300      	movs	r3, #0
 800a760:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a762:	7bfb      	ldrb	r3, [r7, #15]
}
 800a764:	4618      	mov	r0, r3
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	460b      	mov	r3, r1
 800a776:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	78fa      	ldrb	r2, [r7, #3]
 800a782:	4611      	mov	r1, r2
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	4798      	blx	r3

  return USBD_OK;
 800a788:	2300      	movs	r3, #0
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3708      	adds	r7, #8
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a792:	b580      	push	{r7, lr}
 800a794:	b082      	sub	sp, #8
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
 800a79a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a7a2:	6839      	ldr	r1, [r7, #0]
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f000 fed8 	bl	800b55a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800a7c6:	f003 031f 	and.w	r3, r3, #31
 800a7ca:	2b02      	cmp	r3, #2
 800a7cc:	d016      	beq.n	800a7fc <USBD_LL_SetupStage+0x6a>
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d81c      	bhi.n	800a80c <USBD_LL_SetupStage+0x7a>
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d002      	beq.n	800a7dc <USBD_LL_SetupStage+0x4a>
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d008      	beq.n	800a7ec <USBD_LL_SetupStage+0x5a>
 800a7da:	e017      	b.n	800a80c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 f9cb 	bl	800ab80 <USBD_StdDevReq>
      break;
 800a7ea:	e01a      	b.n	800a822 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 fa2d 	bl	800ac54 <USBD_StdItfReq>
      break;
 800a7fa:	e012      	b.n	800a822 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a802:	4619      	mov	r1, r3
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 fa6d 	bl	800ace4 <USBD_StdEPReq>
      break;
 800a80a:	e00a      	b.n	800a822 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800a812:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a816:	b2db      	uxtb	r3, r3
 800a818:	4619      	mov	r1, r3
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f001 fb46 	bl	800beac <USBD_LL_StallEP>
      break;
 800a820:	bf00      	nop
  }

  return USBD_OK;
 800a822:	2300      	movs	r3, #0
}
 800a824:	4618      	mov	r0, r3
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b086      	sub	sp, #24
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	460b      	mov	r3, r1
 800a836:	607a      	str	r2, [r7, #4]
 800a838:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a83a:	7afb      	ldrb	r3, [r7, #11]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d14b      	bne.n	800a8d8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a846:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a84e:	2b03      	cmp	r3, #3
 800a850:	d134      	bne.n	800a8bc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	68da      	ldr	r2, [r3, #12]
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d919      	bls.n	800a892 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	68da      	ldr	r2, [r3, #12]
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	691b      	ldr	r3, [r3, #16]
 800a866:	1ad2      	subs	r2, r2, r3
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	68da      	ldr	r2, [r3, #12]
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a874:	429a      	cmp	r2, r3
 800a876:	d203      	bcs.n	800a880 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	e002      	b.n	800a886 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a884:	b29b      	uxth	r3, r3
 800a886:	461a      	mov	r2, r3
 800a888:	6879      	ldr	r1, [r7, #4]
 800a88a:	68f8      	ldr	r0, [r7, #12]
 800a88c:	f000 ff54 	bl	800b738 <USBD_CtlContinueRx>
 800a890:	e038      	b.n	800a904 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a898:	691b      	ldr	r3, [r3, #16]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00a      	beq.n	800a8b4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a8a4:	2b03      	cmp	r3, #3
 800a8a6:	d105      	bne.n	800a8b4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8ae:	691b      	ldr	r3, [r3, #16]
 800a8b0:	68f8      	ldr	r0, [r7, #12]
 800a8b2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a8b4:	68f8      	ldr	r0, [r7, #12]
 800a8b6:	f000 ff51 	bl	800b75c <USBD_CtlSendStatus>
 800a8ba:	e023      	b.n	800a904 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a8c2:	2b05      	cmp	r3, #5
 800a8c4:	d11e      	bne.n	800a904 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a8ce:	2100      	movs	r1, #0
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f001 faeb 	bl	800beac <USBD_LL_StallEP>
 800a8d6:	e015      	b.n	800a904 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8de:	699b      	ldr	r3, [r3, #24]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d00d      	beq.n	800a900 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a8ea:	2b03      	cmp	r3, #3
 800a8ec:	d108      	bne.n	800a900 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8f4:	699b      	ldr	r3, [r3, #24]
 800a8f6:	7afa      	ldrb	r2, [r7, #11]
 800a8f8:	4611      	mov	r1, r2
 800a8fa:	68f8      	ldr	r0, [r7, #12]
 800a8fc:	4798      	blx	r3
 800a8fe:	e001      	b.n	800a904 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a900:	2302      	movs	r3, #2
 800a902:	e000      	b.n	800a906 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3718      	adds	r7, #24
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b086      	sub	sp, #24
 800a912:	af00      	add	r7, sp, #0
 800a914:	60f8      	str	r0, [r7, #12]
 800a916:	460b      	mov	r3, r1
 800a918:	607a      	str	r2, [r7, #4]
 800a91a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a91c:	7afb      	ldrb	r3, [r7, #11]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d17f      	bne.n	800aa22 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	3314      	adds	r3, #20
 800a926:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a92e:	2b02      	cmp	r3, #2
 800a930:	d15c      	bne.n	800a9ec <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	68da      	ldr	r2, [r3, #12]
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	691b      	ldr	r3, [r3, #16]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d915      	bls.n	800a96a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	68da      	ldr	r2, [r3, #12]
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	691b      	ldr	r3, [r3, #16]
 800a946:	1ad2      	subs	r2, r2, r3
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	b29b      	uxth	r3, r3
 800a952:	461a      	mov	r2, r3
 800a954:	6879      	ldr	r1, [r7, #4]
 800a956:	68f8      	ldr	r0, [r7, #12]
 800a958:	f000 febe 	bl	800b6d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a95c:	2300      	movs	r3, #0
 800a95e:	2200      	movs	r2, #0
 800a960:	2100      	movs	r1, #0
 800a962:	68f8      	ldr	r0, [r7, #12]
 800a964:	f001 fb4d 	bl	800c002 <USBD_LL_PrepareReceive>
 800a968:	e04e      	b.n	800aa08 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	697a      	ldr	r2, [r7, #20]
 800a970:	6912      	ldr	r2, [r2, #16]
 800a972:	fbb3 f1f2 	udiv	r1, r3, r2
 800a976:	fb01 f202 	mul.w	r2, r1, r2
 800a97a:	1a9b      	subs	r3, r3, r2
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d11c      	bne.n	800a9ba <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	689a      	ldr	r2, [r3, #8]
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a988:	429a      	cmp	r2, r3
 800a98a:	d316      	bcc.n	800a9ba <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	689a      	ldr	r2, [r3, #8]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a996:	429a      	cmp	r2, r3
 800a998:	d20f      	bcs.n	800a9ba <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a99a:	2200      	movs	r2, #0
 800a99c:	2100      	movs	r1, #0
 800a99e:	68f8      	ldr	r0, [r7, #12]
 800a9a0:	f000 fe9a 	bl	800b6d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	f001 fb25 	bl	800c002 <USBD_LL_PrepareReceive>
 800a9b8:	e026      	b.n	800aa08 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9c0:	68db      	ldr	r3, [r3, #12]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00a      	beq.n	800a9dc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a9cc:	2b03      	cmp	r3, #3
 800a9ce:	d105      	bne.n	800a9dc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a9dc:	2180      	movs	r1, #128	@ 0x80
 800a9de:	68f8      	ldr	r0, [r7, #12]
 800a9e0:	f001 fa64 	bl	800beac <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a9e4:	68f8      	ldr	r0, [r7, #12]
 800a9e6:	f000 fecc 	bl	800b782 <USBD_CtlReceiveStatus>
 800a9ea:	e00d      	b.n	800aa08 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a9f2:	2b04      	cmp	r3, #4
 800a9f4:	d004      	beq.n	800aa00 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d103      	bne.n	800aa08 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800aa00:	2180      	movs	r1, #128	@ 0x80
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f001 fa52 	bl	800beac <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d11d      	bne.n	800aa4e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	f7ff fe81 	bl	800a71a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800aa20:	e015      	b.n	800aa4e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa28:	695b      	ldr	r3, [r3, #20]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00d      	beq.n	800aa4a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800aa34:	2b03      	cmp	r3, #3
 800aa36:	d108      	bne.n	800aa4a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa3e:	695b      	ldr	r3, [r3, #20]
 800aa40:	7afa      	ldrb	r2, [r7, #11]
 800aa42:	4611      	mov	r1, r2
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	4798      	blx	r3
 800aa48:	e001      	b.n	800aa4e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800aa4a:	2302      	movs	r3, #2
 800aa4c:	e000      	b.n	800aa50 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800aa4e:	2300      	movs	r3, #0
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3718      	adds	r7, #24
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa60:	2340      	movs	r3, #64	@ 0x40
 800aa62:	2200      	movs	r2, #0
 800aa64:	2100      	movs	r1, #0
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f001 f9db 	bl	800be22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2240      	movs	r2, #64	@ 0x40
 800aa78:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa7c:	2340      	movs	r3, #64	@ 0x40
 800aa7e:	2200      	movs	r2, #0
 800aa80:	2180      	movs	r1, #128	@ 0x80
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f001 f9cd 	bl	800be22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2240      	movs	r2, #64	@ 0x40
 800aa92:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2201      	movs	r2, #1
 800aa98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d009      	beq.n	800aad0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	6852      	ldr	r2, [r2, #4]
 800aac8:	b2d2      	uxtb	r2, r2
 800aaca:	4611      	mov	r1, r2
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	4798      	blx	r3
  }

  return USBD_OK;
 800aad0:	2300      	movs	r3, #0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aada:	b480      	push	{r7}
 800aadc:	b083      	sub	sp, #12
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
 800aae2:	460b      	mov	r3, r1
 800aae4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	78fa      	ldrb	r2, [r7, #3]
 800aaea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aaec:	2300      	movs	r3, #0
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	370c      	adds	r7, #12
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bc80      	pop	{r7}
 800aaf6:	4770      	bx	lr

0800aaf8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2204      	movs	r2, #4
 800ab10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	370c      	adds	r7, #12
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bc80      	pop	{r7}
 800ab1e:	4770      	bx	lr

0800ab20 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab2e:	2b04      	cmp	r3, #4
 800ab30:	d105      	bne.n	800ab3e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ab3e:	2300      	movs	r3, #0
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	370c      	adds	r7, #12
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bc80      	pop	{r7}
 800ab48:	4770      	bx	lr

0800ab4a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b082      	sub	sp, #8
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab58:	2b03      	cmp	r3, #3
 800ab5a:	d10b      	bne.n	800ab74 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab62:	69db      	ldr	r3, [r3, #28]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d005      	beq.n	800ab74 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab6e:	69db      	ldr	r3, [r3, #28]
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab74:	2300      	movs	r3, #0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3708      	adds	r7, #8
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
	...

0800ab80 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab96:	2b40      	cmp	r3, #64	@ 0x40
 800ab98:	d005      	beq.n	800aba6 <USBD_StdDevReq+0x26>
 800ab9a:	2b40      	cmp	r3, #64	@ 0x40
 800ab9c:	d84f      	bhi.n	800ac3e <USBD_StdDevReq+0xbe>
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d009      	beq.n	800abb6 <USBD_StdDevReq+0x36>
 800aba2:	2b20      	cmp	r3, #32
 800aba4:	d14b      	bne.n	800ac3e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	6839      	ldr	r1, [r7, #0]
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	4798      	blx	r3
      break;
 800abb4:	e048      	b.n	800ac48 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	785b      	ldrb	r3, [r3, #1]
 800abba:	2b09      	cmp	r3, #9
 800abbc:	d839      	bhi.n	800ac32 <USBD_StdDevReq+0xb2>
 800abbe:	a201      	add	r2, pc, #4	@ (adr r2, 800abc4 <USBD_StdDevReq+0x44>)
 800abc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc4:	0800ac15 	.word	0x0800ac15
 800abc8:	0800ac29 	.word	0x0800ac29
 800abcc:	0800ac33 	.word	0x0800ac33
 800abd0:	0800ac1f 	.word	0x0800ac1f
 800abd4:	0800ac33 	.word	0x0800ac33
 800abd8:	0800abf7 	.word	0x0800abf7
 800abdc:	0800abed 	.word	0x0800abed
 800abe0:	0800ac33 	.word	0x0800ac33
 800abe4:	0800ac0b 	.word	0x0800ac0b
 800abe8:	0800ac01 	.word	0x0800ac01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800abec:	6839      	ldr	r1, [r7, #0]
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 f9dc 	bl	800afac <USBD_GetDescriptor>
          break;
 800abf4:	e022      	b.n	800ac3c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800abf6:	6839      	ldr	r1, [r7, #0]
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 fb3f 	bl	800b27c <USBD_SetAddress>
          break;
 800abfe:	e01d      	b.n	800ac3c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ac00:	6839      	ldr	r1, [r7, #0]
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 fb7e 	bl	800b304 <USBD_SetConfig>
          break;
 800ac08:	e018      	b.n	800ac3c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ac0a:	6839      	ldr	r1, [r7, #0]
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f000 fc07 	bl	800b420 <USBD_GetConfig>
          break;
 800ac12:	e013      	b.n	800ac3c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ac14:	6839      	ldr	r1, [r7, #0]
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 fc37 	bl	800b48a <USBD_GetStatus>
          break;
 800ac1c:	e00e      	b.n	800ac3c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ac1e:	6839      	ldr	r1, [r7, #0]
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 fc65 	bl	800b4f0 <USBD_SetFeature>
          break;
 800ac26:	e009      	b.n	800ac3c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ac28:	6839      	ldr	r1, [r7, #0]
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fc74 	bl	800b518 <USBD_ClrFeature>
          break;
 800ac30:	e004      	b.n	800ac3c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800ac32:	6839      	ldr	r1, [r7, #0]
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 fcc9 	bl	800b5cc <USBD_CtlError>
          break;
 800ac3a:	bf00      	nop
      }
      break;
 800ac3c:	e004      	b.n	800ac48 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800ac3e:	6839      	ldr	r1, [r7, #0]
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 fcc3 	bl	800b5cc <USBD_CtlError>
      break;
 800ac46:	bf00      	nop
  }

  return ret;
 800ac48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop

0800ac54 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ac6a:	2b40      	cmp	r3, #64	@ 0x40
 800ac6c:	d005      	beq.n	800ac7a <USBD_StdItfReq+0x26>
 800ac6e:	2b40      	cmp	r3, #64	@ 0x40
 800ac70:	d82e      	bhi.n	800acd0 <USBD_StdItfReq+0x7c>
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d001      	beq.n	800ac7a <USBD_StdItfReq+0x26>
 800ac76:	2b20      	cmp	r3, #32
 800ac78:	d12a      	bne.n	800acd0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac80:	3b01      	subs	r3, #1
 800ac82:	2b02      	cmp	r3, #2
 800ac84:	d81d      	bhi.n	800acc2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	889b      	ldrh	r3, [r3, #4]
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d813      	bhi.n	800acb8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	6839      	ldr	r1, [r7, #0]
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	4798      	blx	r3
 800ac9e:	4603      	mov	r3, r0
 800aca0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	88db      	ldrh	r3, [r3, #6]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d110      	bne.n	800accc <USBD_StdItfReq+0x78>
 800acaa:	7bfb      	ldrb	r3, [r7, #15]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d10d      	bne.n	800accc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 fd53 	bl	800b75c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800acb6:	e009      	b.n	800accc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800acb8:	6839      	ldr	r1, [r7, #0]
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 fc86 	bl	800b5cc <USBD_CtlError>
          break;
 800acc0:	e004      	b.n	800accc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800acc2:	6839      	ldr	r1, [r7, #0]
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 fc81 	bl	800b5cc <USBD_CtlError>
          break;
 800acca:	e000      	b.n	800acce <USBD_StdItfReq+0x7a>
          break;
 800accc:	bf00      	nop
      }
      break;
 800acce:	e004      	b.n	800acda <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800acd0:	6839      	ldr	r1, [r7, #0]
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 fc7a 	bl	800b5cc <USBD_CtlError>
      break;
 800acd8:	bf00      	nop
  }

  return USBD_OK;
 800acda:	2300      	movs	r3, #0
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3710      	adds	r7, #16
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800acee:	2300      	movs	r3, #0
 800acf0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	889b      	ldrh	r3, [r3, #4]
 800acf6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad00:	2b40      	cmp	r3, #64	@ 0x40
 800ad02:	d007      	beq.n	800ad14 <USBD_StdEPReq+0x30>
 800ad04:	2b40      	cmp	r3, #64	@ 0x40
 800ad06:	f200 8146 	bhi.w	800af96 <USBD_StdEPReq+0x2b2>
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d00a      	beq.n	800ad24 <USBD_StdEPReq+0x40>
 800ad0e:	2b20      	cmp	r3, #32
 800ad10:	f040 8141 	bne.w	800af96 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	6839      	ldr	r1, [r7, #0]
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	4798      	blx	r3
      break;
 800ad22:	e13d      	b.n	800afa0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad2c:	2b20      	cmp	r3, #32
 800ad2e:	d10a      	bne.n	800ad46 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	6839      	ldr	r1, [r7, #0]
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	4798      	blx	r3
 800ad3e:	4603      	mov	r3, r0
 800ad40:	73fb      	strb	r3, [r7, #15]

        return ret;
 800ad42:	7bfb      	ldrb	r3, [r7, #15]
 800ad44:	e12d      	b.n	800afa2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	785b      	ldrb	r3, [r3, #1]
 800ad4a:	2b03      	cmp	r3, #3
 800ad4c:	d007      	beq.n	800ad5e <USBD_StdEPReq+0x7a>
 800ad4e:	2b03      	cmp	r3, #3
 800ad50:	f300 811b 	bgt.w	800af8a <USBD_StdEPReq+0x2a6>
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d072      	beq.n	800ae3e <USBD_StdEPReq+0x15a>
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d03a      	beq.n	800add2 <USBD_StdEPReq+0xee>
 800ad5c:	e115      	b.n	800af8a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad64:	2b02      	cmp	r3, #2
 800ad66:	d002      	beq.n	800ad6e <USBD_StdEPReq+0x8a>
 800ad68:	2b03      	cmp	r3, #3
 800ad6a:	d015      	beq.n	800ad98 <USBD_StdEPReq+0xb4>
 800ad6c:	e02b      	b.n	800adc6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad6e:	7bbb      	ldrb	r3, [r7, #14]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d00c      	beq.n	800ad8e <USBD_StdEPReq+0xaa>
 800ad74:	7bbb      	ldrb	r3, [r7, #14]
 800ad76:	2b80      	cmp	r3, #128	@ 0x80
 800ad78:	d009      	beq.n	800ad8e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ad7a:	7bbb      	ldrb	r3, [r7, #14]
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f001 f894 	bl	800beac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ad84:	2180      	movs	r1, #128	@ 0x80
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f001 f890 	bl	800beac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad8c:	e020      	b.n	800add0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800ad8e:	6839      	ldr	r1, [r7, #0]
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 fc1b 	bl	800b5cc <USBD_CtlError>
              break;
 800ad96:	e01b      	b.n	800add0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	885b      	ldrh	r3, [r3, #2]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10e      	bne.n	800adbe <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800ada0:	7bbb      	ldrb	r3, [r7, #14]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00b      	beq.n	800adbe <USBD_StdEPReq+0xda>
 800ada6:	7bbb      	ldrb	r3, [r7, #14]
 800ada8:	2b80      	cmp	r3, #128	@ 0x80
 800adaa:	d008      	beq.n	800adbe <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	88db      	ldrh	r3, [r3, #6]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d104      	bne.n	800adbe <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800adb4:	7bbb      	ldrb	r3, [r7, #14]
 800adb6:	4619      	mov	r1, r3
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f001 f877 	bl	800beac <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 fccc 	bl	800b75c <USBD_CtlSendStatus>

              break;
 800adc4:	e004      	b.n	800add0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800adc6:	6839      	ldr	r1, [r7, #0]
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 fbff 	bl	800b5cc <USBD_CtlError>
              break;
 800adce:	bf00      	nop
          }
          break;
 800add0:	e0e0      	b.n	800af94 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800add8:	2b02      	cmp	r3, #2
 800adda:	d002      	beq.n	800ade2 <USBD_StdEPReq+0xfe>
 800addc:	2b03      	cmp	r3, #3
 800adde:	d015      	beq.n	800ae0c <USBD_StdEPReq+0x128>
 800ade0:	e026      	b.n	800ae30 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ade2:	7bbb      	ldrb	r3, [r7, #14]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d00c      	beq.n	800ae02 <USBD_StdEPReq+0x11e>
 800ade8:	7bbb      	ldrb	r3, [r7, #14]
 800adea:	2b80      	cmp	r3, #128	@ 0x80
 800adec:	d009      	beq.n	800ae02 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800adee:	7bbb      	ldrb	r3, [r7, #14]
 800adf0:	4619      	mov	r1, r3
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f001 f85a 	bl	800beac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800adf8:	2180      	movs	r1, #128	@ 0x80
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f001 f856 	bl	800beac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae00:	e01c      	b.n	800ae3c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800ae02:	6839      	ldr	r1, [r7, #0]
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 fbe1 	bl	800b5cc <USBD_CtlError>
              break;
 800ae0a:	e017      	b.n	800ae3c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	885b      	ldrh	r3, [r3, #2]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d112      	bne.n	800ae3a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ae14:	7bbb      	ldrb	r3, [r7, #14]
 800ae16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d004      	beq.n	800ae28 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800ae1e:	7bbb      	ldrb	r3, [r7, #14]
 800ae20:	4619      	mov	r1, r3
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f001 f861 	bl	800beea <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 fc97 	bl	800b75c <USBD_CtlSendStatus>
              }
              break;
 800ae2e:	e004      	b.n	800ae3a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800ae30:	6839      	ldr	r1, [r7, #0]
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 fbca 	bl	800b5cc <USBD_CtlError>
              break;
 800ae38:	e000      	b.n	800ae3c <USBD_StdEPReq+0x158>
              break;
 800ae3a:	bf00      	nop
          }
          break;
 800ae3c:	e0aa      	b.n	800af94 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	d002      	beq.n	800ae4e <USBD_StdEPReq+0x16a>
 800ae48:	2b03      	cmp	r3, #3
 800ae4a:	d032      	beq.n	800aeb2 <USBD_StdEPReq+0x1ce>
 800ae4c:	e097      	b.n	800af7e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae4e:	7bbb      	ldrb	r3, [r7, #14]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d007      	beq.n	800ae64 <USBD_StdEPReq+0x180>
 800ae54:	7bbb      	ldrb	r3, [r7, #14]
 800ae56:	2b80      	cmp	r3, #128	@ 0x80
 800ae58:	d004      	beq.n	800ae64 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800ae5a:	6839      	ldr	r1, [r7, #0]
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 fbb5 	bl	800b5cc <USBD_CtlError>
                break;
 800ae62:	e091      	b.n	800af88 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	da0b      	bge.n	800ae84 <USBD_StdEPReq+0x1a0>
 800ae6c:	7bbb      	ldrb	r3, [r7, #14]
 800ae6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae72:	4613      	mov	r3, r2
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	4413      	add	r3, r2
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	3310      	adds	r3, #16
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	4413      	add	r3, r2
 800ae80:	3304      	adds	r3, #4
 800ae82:	e00b      	b.n	800ae9c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae84:	7bbb      	ldrb	r3, [r7, #14]
 800ae86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae8a:	4613      	mov	r3, r2
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	4413      	add	r3, r2
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	4413      	add	r3, r2
 800ae9a:	3304      	adds	r3, #4
 800ae9c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	2200      	movs	r2, #0
 800aea2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	2202      	movs	r2, #2
 800aea8:	4619      	mov	r1, r3
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 fbf8 	bl	800b6a0 <USBD_CtlSendData>
              break;
 800aeb0:	e06a      	b.n	800af88 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aeb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	da11      	bge.n	800aede <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aeba:	7bbb      	ldrb	r3, [r7, #14]
 800aebc:	f003 020f 	and.w	r2, r3, #15
 800aec0:	6879      	ldr	r1, [r7, #4]
 800aec2:	4613      	mov	r3, r2
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	4413      	add	r3, r2
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	440b      	add	r3, r1
 800aecc:	3318      	adds	r3, #24
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d117      	bne.n	800af04 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fb78 	bl	800b5cc <USBD_CtlError>
                  break;
 800aedc:	e054      	b.n	800af88 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aede:	7bbb      	ldrb	r3, [r7, #14]
 800aee0:	f003 020f 	and.w	r2, r3, #15
 800aee4:	6879      	ldr	r1, [r7, #4]
 800aee6:	4613      	mov	r3, r2
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	4413      	add	r3, r2
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	440b      	add	r3, r1
 800aef0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d104      	bne.n	800af04 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800aefa:	6839      	ldr	r1, [r7, #0]
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 fb65 	bl	800b5cc <USBD_CtlError>
                  break;
 800af02:	e041      	b.n	800af88 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	da0b      	bge.n	800af24 <USBD_StdEPReq+0x240>
 800af0c:	7bbb      	ldrb	r3, [r7, #14]
 800af0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af12:	4613      	mov	r3, r2
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	4413      	add	r3, r2
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	3310      	adds	r3, #16
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	4413      	add	r3, r2
 800af20:	3304      	adds	r3, #4
 800af22:	e00b      	b.n	800af3c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af24:	7bbb      	ldrb	r3, [r7, #14]
 800af26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af2a:	4613      	mov	r3, r2
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	4413      	add	r3, r2
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	4413      	add	r3, r2
 800af3a:	3304      	adds	r3, #4
 800af3c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800af3e:	7bbb      	ldrb	r3, [r7, #14]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d002      	beq.n	800af4a <USBD_StdEPReq+0x266>
 800af44:	7bbb      	ldrb	r3, [r7, #14]
 800af46:	2b80      	cmp	r3, #128	@ 0x80
 800af48:	d103      	bne.n	800af52 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	2200      	movs	r2, #0
 800af4e:	601a      	str	r2, [r3, #0]
 800af50:	e00e      	b.n	800af70 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800af52:	7bbb      	ldrb	r3, [r7, #14]
 800af54:	4619      	mov	r1, r3
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 ffe6 	bl	800bf28 <USBD_LL_IsStallEP>
 800af5c:	4603      	mov	r3, r0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d003      	beq.n	800af6a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	2201      	movs	r2, #1
 800af66:	601a      	str	r2, [r3, #0]
 800af68:	e002      	b.n	800af70 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	2200      	movs	r2, #0
 800af6e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	2202      	movs	r2, #2
 800af74:	4619      	mov	r1, r3
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 fb92 	bl	800b6a0 <USBD_CtlSendData>
              break;
 800af7c:	e004      	b.n	800af88 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800af7e:	6839      	ldr	r1, [r7, #0]
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 fb23 	bl	800b5cc <USBD_CtlError>
              break;
 800af86:	bf00      	nop
          }
          break;
 800af88:	e004      	b.n	800af94 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800af8a:	6839      	ldr	r1, [r7, #0]
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 fb1d 	bl	800b5cc <USBD_CtlError>
          break;
 800af92:	bf00      	nop
      }
      break;
 800af94:	e004      	b.n	800afa0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800af96:	6839      	ldr	r1, [r7, #0]
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 fb17 	bl	800b5cc <USBD_CtlError>
      break;
 800af9e:	bf00      	nop
  }

  return ret;
 800afa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
	...

0800afac <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800afb6:	2300      	movs	r3, #0
 800afb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800afba:	2300      	movs	r3, #0
 800afbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800afbe:	2300      	movs	r3, #0
 800afc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	885b      	ldrh	r3, [r3, #2]
 800afc6:	0a1b      	lsrs	r3, r3, #8
 800afc8:	b29b      	uxth	r3, r3
 800afca:	3b01      	subs	r3, #1
 800afcc:	2b06      	cmp	r3, #6
 800afce:	f200 8128 	bhi.w	800b222 <USBD_GetDescriptor+0x276>
 800afd2:	a201      	add	r2, pc, #4	@ (adr r2, 800afd8 <USBD_GetDescriptor+0x2c>)
 800afd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd8:	0800aff5 	.word	0x0800aff5
 800afdc:	0800b00d 	.word	0x0800b00d
 800afe0:	0800b04d 	.word	0x0800b04d
 800afe4:	0800b223 	.word	0x0800b223
 800afe8:	0800b223 	.word	0x0800b223
 800afec:	0800b1c3 	.word	0x0800b1c3
 800aff0:	0800b1ef 	.word	0x0800b1ef
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	7c12      	ldrb	r2, [r2, #16]
 800b000:	f107 0108 	add.w	r1, r7, #8
 800b004:	4610      	mov	r0, r2
 800b006:	4798      	blx	r3
 800b008:	60f8      	str	r0, [r7, #12]
      break;
 800b00a:	e112      	b.n	800b232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	7c1b      	ldrb	r3, [r3, #16]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d10d      	bne.n	800b030 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b01a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b01c:	f107 0208 	add.w	r2, r7, #8
 800b020:	4610      	mov	r0, r2
 800b022:	4798      	blx	r3
 800b024:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	3301      	adds	r3, #1
 800b02a:	2202      	movs	r2, #2
 800b02c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b02e:	e100      	b.n	800b232 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b038:	f107 0208 	add.w	r2, r7, #8
 800b03c:	4610      	mov	r0, r2
 800b03e:	4798      	blx	r3
 800b040:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	3301      	adds	r3, #1
 800b046:	2202      	movs	r2, #2
 800b048:	701a      	strb	r2, [r3, #0]
      break;
 800b04a:	e0f2      	b.n	800b232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	885b      	ldrh	r3, [r3, #2]
 800b050:	b2db      	uxtb	r3, r3
 800b052:	2b05      	cmp	r3, #5
 800b054:	f200 80ac 	bhi.w	800b1b0 <USBD_GetDescriptor+0x204>
 800b058:	a201      	add	r2, pc, #4	@ (adr r2, 800b060 <USBD_GetDescriptor+0xb4>)
 800b05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b05e:	bf00      	nop
 800b060:	0800b079 	.word	0x0800b079
 800b064:	0800b0ad 	.word	0x0800b0ad
 800b068:	0800b0e1 	.word	0x0800b0e1
 800b06c:	0800b115 	.word	0x0800b115
 800b070:	0800b149 	.word	0x0800b149
 800b074:	0800b17d 	.word	0x0800b17d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d00b      	beq.n	800b09c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	7c12      	ldrb	r2, [r2, #16]
 800b090:	f107 0108 	add.w	r1, r7, #8
 800b094:	4610      	mov	r0, r2
 800b096:	4798      	blx	r3
 800b098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b09a:	e091      	b.n	800b1c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b09c:	6839      	ldr	r1, [r7, #0]
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 fa94 	bl	800b5cc <USBD_CtlError>
            err++;
 800b0a4:	7afb      	ldrb	r3, [r7, #11]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	72fb      	strb	r3, [r7, #11]
          break;
 800b0aa:	e089      	b.n	800b1c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b0b2:	689b      	ldr	r3, [r3, #8]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d00b      	beq.n	800b0d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	7c12      	ldrb	r2, [r2, #16]
 800b0c4:	f107 0108 	add.w	r1, r7, #8
 800b0c8:	4610      	mov	r0, r2
 800b0ca:	4798      	blx	r3
 800b0cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0ce:	e077      	b.n	800b1c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0d0:	6839      	ldr	r1, [r7, #0]
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 fa7a 	bl	800b5cc <USBD_CtlError>
            err++;
 800b0d8:	7afb      	ldrb	r3, [r7, #11]
 800b0da:	3301      	adds	r3, #1
 800b0dc:	72fb      	strb	r3, [r7, #11]
          break;
 800b0de:	e06f      	b.n	800b1c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d00b      	beq.n	800b104 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b0f2:	68db      	ldr	r3, [r3, #12]
 800b0f4:	687a      	ldr	r2, [r7, #4]
 800b0f6:	7c12      	ldrb	r2, [r2, #16]
 800b0f8:	f107 0108 	add.w	r1, r7, #8
 800b0fc:	4610      	mov	r0, r2
 800b0fe:	4798      	blx	r3
 800b100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b102:	e05d      	b.n	800b1c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b104:	6839      	ldr	r1, [r7, #0]
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 fa60 	bl	800b5cc <USBD_CtlError>
            err++;
 800b10c:	7afb      	ldrb	r3, [r7, #11]
 800b10e:	3301      	adds	r3, #1
 800b110:	72fb      	strb	r3, [r7, #11]
          break;
 800b112:	e055      	b.n	800b1c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b11a:	691b      	ldr	r3, [r3, #16]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00b      	beq.n	800b138 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b126:	691b      	ldr	r3, [r3, #16]
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	7c12      	ldrb	r2, [r2, #16]
 800b12c:	f107 0108 	add.w	r1, r7, #8
 800b130:	4610      	mov	r0, r2
 800b132:	4798      	blx	r3
 800b134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b136:	e043      	b.n	800b1c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b138:	6839      	ldr	r1, [r7, #0]
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 fa46 	bl	800b5cc <USBD_CtlError>
            err++;
 800b140:	7afb      	ldrb	r3, [r7, #11]
 800b142:	3301      	adds	r3, #1
 800b144:	72fb      	strb	r3, [r7, #11]
          break;
 800b146:	e03b      	b.n	800b1c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b14e:	695b      	ldr	r3, [r3, #20]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d00b      	beq.n	800b16c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b15a:	695b      	ldr	r3, [r3, #20]
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	7c12      	ldrb	r2, [r2, #16]
 800b160:	f107 0108 	add.w	r1, r7, #8
 800b164:	4610      	mov	r0, r2
 800b166:	4798      	blx	r3
 800b168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b16a:	e029      	b.n	800b1c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b16c:	6839      	ldr	r1, [r7, #0]
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 fa2c 	bl	800b5cc <USBD_CtlError>
            err++;
 800b174:	7afb      	ldrb	r3, [r7, #11]
 800b176:	3301      	adds	r3, #1
 800b178:	72fb      	strb	r3, [r7, #11]
          break;
 800b17a:	e021      	b.n	800b1c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b182:	699b      	ldr	r3, [r3, #24]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d00b      	beq.n	800b1a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b18e:	699b      	ldr	r3, [r3, #24]
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	7c12      	ldrb	r2, [r2, #16]
 800b194:	f107 0108 	add.w	r1, r7, #8
 800b198:	4610      	mov	r0, r2
 800b19a:	4798      	blx	r3
 800b19c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b19e:	e00f      	b.n	800b1c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1a0:	6839      	ldr	r1, [r7, #0]
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 fa12 	bl	800b5cc <USBD_CtlError>
            err++;
 800b1a8:	7afb      	ldrb	r3, [r7, #11]
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	72fb      	strb	r3, [r7, #11]
          break;
 800b1ae:	e007      	b.n	800b1c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b1b0:	6839      	ldr	r1, [r7, #0]
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 fa0a 	bl	800b5cc <USBD_CtlError>
          err++;
 800b1b8:	7afb      	ldrb	r3, [r7, #11]
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b1be:	e038      	b.n	800b232 <USBD_GetDescriptor+0x286>
 800b1c0:	e037      	b.n	800b232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	7c1b      	ldrb	r3, [r3, #16]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d109      	bne.n	800b1de <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1d2:	f107 0208 	add.w	r2, r7, #8
 800b1d6:	4610      	mov	r0, r2
 800b1d8:	4798      	blx	r3
 800b1da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b1dc:	e029      	b.n	800b232 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b1de:	6839      	ldr	r1, [r7, #0]
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 f9f3 	bl	800b5cc <USBD_CtlError>
        err++;
 800b1e6:	7afb      	ldrb	r3, [r7, #11]
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	72fb      	strb	r3, [r7, #11]
      break;
 800b1ec:	e021      	b.n	800b232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	7c1b      	ldrb	r3, [r3, #16]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d10d      	bne.n	800b212 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1fe:	f107 0208 	add.w	r2, r7, #8
 800b202:	4610      	mov	r0, r2
 800b204:	4798      	blx	r3
 800b206:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	3301      	adds	r3, #1
 800b20c:	2207      	movs	r2, #7
 800b20e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b210:	e00f      	b.n	800b232 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b212:	6839      	ldr	r1, [r7, #0]
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 f9d9 	bl	800b5cc <USBD_CtlError>
        err++;
 800b21a:	7afb      	ldrb	r3, [r7, #11]
 800b21c:	3301      	adds	r3, #1
 800b21e:	72fb      	strb	r3, [r7, #11]
      break;
 800b220:	e007      	b.n	800b232 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b222:	6839      	ldr	r1, [r7, #0]
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 f9d1 	bl	800b5cc <USBD_CtlError>
      err++;
 800b22a:	7afb      	ldrb	r3, [r7, #11]
 800b22c:	3301      	adds	r3, #1
 800b22e:	72fb      	strb	r3, [r7, #11]
      break;
 800b230:	bf00      	nop
  }

  if (err != 0U)
 800b232:	7afb      	ldrb	r3, [r7, #11]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d11c      	bne.n	800b272 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b238:	893b      	ldrh	r3, [r7, #8]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d011      	beq.n	800b262 <USBD_GetDescriptor+0x2b6>
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	88db      	ldrh	r3, [r3, #6]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d00d      	beq.n	800b262 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	88da      	ldrh	r2, [r3, #6]
 800b24a:	893b      	ldrh	r3, [r7, #8]
 800b24c:	4293      	cmp	r3, r2
 800b24e:	bf28      	it	cs
 800b250:	4613      	movcs	r3, r2
 800b252:	b29b      	uxth	r3, r3
 800b254:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b256:	893b      	ldrh	r3, [r7, #8]
 800b258:	461a      	mov	r2, r3
 800b25a:	68f9      	ldr	r1, [r7, #12]
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f000 fa1f 	bl	800b6a0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	88db      	ldrh	r3, [r3, #6]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d104      	bne.n	800b274 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 fa76 	bl	800b75c <USBD_CtlSendStatus>
 800b270:	e000      	b.n	800b274 <USBD_GetDescriptor+0x2c8>
    return;
 800b272:	bf00      	nop
    }
  }
}
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop

0800b27c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	889b      	ldrh	r3, [r3, #4]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d130      	bne.n	800b2f0 <USBD_SetAddress+0x74>
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	88db      	ldrh	r3, [r3, #6]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d12c      	bne.n	800b2f0 <USBD_SetAddress+0x74>
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	885b      	ldrh	r3, [r3, #2]
 800b29a:	2b7f      	cmp	r3, #127	@ 0x7f
 800b29c:	d828      	bhi.n	800b2f0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	885b      	ldrh	r3, [r3, #2]
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2b0:	2b03      	cmp	r3, #3
 800b2b2:	d104      	bne.n	800b2be <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b2b4:	6839      	ldr	r1, [r7, #0]
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 f988 	bl	800b5cc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2bc:	e01d      	b.n	800b2fa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	7bfa      	ldrb	r2, [r7, #15]
 800b2c2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b2c6:	7bfb      	ldrb	r3, [r7, #15]
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 fe57 	bl	800bf7e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 fa43 	bl	800b75c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b2d6:	7bfb      	ldrb	r3, [r7, #15]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d004      	beq.n	800b2e6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2202      	movs	r2, #2
 800b2e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2e4:	e009      	b.n	800b2fa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2ee:	e004      	b.n	800b2fa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b2f0:	6839      	ldr	r1, [r7, #0]
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 f96a 	bl	800b5cc <USBD_CtlError>
  }
}
 800b2f8:	bf00      	nop
 800b2fa:	bf00      	nop
 800b2fc:	3710      	adds	r7, #16
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
	...

0800b304 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	885b      	ldrh	r3, [r3, #2]
 800b312:	b2da      	uxtb	r2, r3
 800b314:	4b41      	ldr	r3, [pc, #260]	@ (800b41c <USBD_SetConfig+0x118>)
 800b316:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b318:	4b40      	ldr	r3, [pc, #256]	@ (800b41c <USBD_SetConfig+0x118>)
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d904      	bls.n	800b32a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b320:	6839      	ldr	r1, [r7, #0]
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 f952 	bl	800b5cc <USBD_CtlError>
 800b328:	e075      	b.n	800b416 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b330:	2b02      	cmp	r3, #2
 800b332:	d002      	beq.n	800b33a <USBD_SetConfig+0x36>
 800b334:	2b03      	cmp	r3, #3
 800b336:	d023      	beq.n	800b380 <USBD_SetConfig+0x7c>
 800b338:	e062      	b.n	800b400 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b33a:	4b38      	ldr	r3, [pc, #224]	@ (800b41c <USBD_SetConfig+0x118>)
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d01a      	beq.n	800b378 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b342:	4b36      	ldr	r3, [pc, #216]	@ (800b41c <USBD_SetConfig+0x118>)
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	461a      	mov	r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2203      	movs	r2, #3
 800b350:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b354:	4b31      	ldr	r3, [pc, #196]	@ (800b41c <USBD_SetConfig+0x118>)
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	4619      	mov	r1, r3
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f7ff f9e7 	bl	800a72e <USBD_SetClassConfig>
 800b360:	4603      	mov	r3, r0
 800b362:	2b02      	cmp	r3, #2
 800b364:	d104      	bne.n	800b370 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b366:	6839      	ldr	r1, [r7, #0]
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 f92f 	bl	800b5cc <USBD_CtlError>
            return;
 800b36e:	e052      	b.n	800b416 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f000 f9f3 	bl	800b75c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b376:	e04e      	b.n	800b416 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f000 f9ef 	bl	800b75c <USBD_CtlSendStatus>
        break;
 800b37e:	e04a      	b.n	800b416 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b380:	4b26      	ldr	r3, [pc, #152]	@ (800b41c <USBD_SetConfig+0x118>)
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d112      	bne.n	800b3ae <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2202      	movs	r2, #2
 800b38c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800b390:	4b22      	ldr	r3, [pc, #136]	@ (800b41c <USBD_SetConfig+0x118>)
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	461a      	mov	r2, r3
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b39a:	4b20      	ldr	r3, [pc, #128]	@ (800b41c <USBD_SetConfig+0x118>)
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	4619      	mov	r1, r3
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f7ff f9e3 	bl	800a76c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 f9d8 	bl	800b75c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b3ac:	e033      	b.n	800b416 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b3ae:	4b1b      	ldr	r3, [pc, #108]	@ (800b41c <USBD_SetConfig+0x118>)
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d01d      	beq.n	800b3f8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	b2db      	uxtb	r3, r3
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f7ff f9d1 	bl	800a76c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b3ca:	4b14      	ldr	r3, [pc, #80]	@ (800b41c <USBD_SetConfig+0x118>)
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b3d4:	4b11      	ldr	r3, [pc, #68]	@ (800b41c <USBD_SetConfig+0x118>)
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	4619      	mov	r1, r3
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f7ff f9a7 	bl	800a72e <USBD_SetClassConfig>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	2b02      	cmp	r3, #2
 800b3e4:	d104      	bne.n	800b3f0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b3e6:	6839      	ldr	r1, [r7, #0]
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 f8ef 	bl	800b5cc <USBD_CtlError>
            return;
 800b3ee:	e012      	b.n	800b416 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 f9b3 	bl	800b75c <USBD_CtlSendStatus>
        break;
 800b3f6:	e00e      	b.n	800b416 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 f9af 	bl	800b75c <USBD_CtlSendStatus>
        break;
 800b3fe:	e00a      	b.n	800b416 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b400:	6839      	ldr	r1, [r7, #0]
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 f8e2 	bl	800b5cc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b408:	4b04      	ldr	r3, [pc, #16]	@ (800b41c <USBD_SetConfig+0x118>)
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	4619      	mov	r1, r3
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f7ff f9ac 	bl	800a76c <USBD_ClrClassConfig>
        break;
 800b414:	bf00      	nop
    }
  }
}
 800b416:	3708      	adds	r7, #8
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	20001ef4 	.word	0x20001ef4

0800b420 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	88db      	ldrh	r3, [r3, #6]
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d004      	beq.n	800b43c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b432:	6839      	ldr	r1, [r7, #0]
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 f8c9 	bl	800b5cc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b43a:	e022      	b.n	800b482 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b442:	2b02      	cmp	r3, #2
 800b444:	dc02      	bgt.n	800b44c <USBD_GetConfig+0x2c>
 800b446:	2b00      	cmp	r3, #0
 800b448:	dc03      	bgt.n	800b452 <USBD_GetConfig+0x32>
 800b44a:	e015      	b.n	800b478 <USBD_GetConfig+0x58>
 800b44c:	2b03      	cmp	r3, #3
 800b44e:	d00b      	beq.n	800b468 <USBD_GetConfig+0x48>
 800b450:	e012      	b.n	800b478 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2200      	movs	r2, #0
 800b456:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	3308      	adds	r3, #8
 800b45c:	2201      	movs	r2, #1
 800b45e:	4619      	mov	r1, r3
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f000 f91d 	bl	800b6a0 <USBD_CtlSendData>
        break;
 800b466:	e00c      	b.n	800b482 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	3304      	adds	r3, #4
 800b46c:	2201      	movs	r2, #1
 800b46e:	4619      	mov	r1, r3
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 f915 	bl	800b6a0 <USBD_CtlSendData>
        break;
 800b476:	e004      	b.n	800b482 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b478:	6839      	ldr	r1, [r7, #0]
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 f8a6 	bl	800b5cc <USBD_CtlError>
        break;
 800b480:	bf00      	nop
}
 800b482:	bf00      	nop
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b082      	sub	sp, #8
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b49a:	3b01      	subs	r3, #1
 800b49c:	2b02      	cmp	r3, #2
 800b49e:	d81e      	bhi.n	800b4de <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	88db      	ldrh	r3, [r3, #6]
 800b4a4:	2b02      	cmp	r3, #2
 800b4a6:	d004      	beq.n	800b4b2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b4a8:	6839      	ldr	r1, [r7, #0]
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 f88e 	bl	800b5cc <USBD_CtlError>
        break;
 800b4b0:	e01a      	b.n	800b4e8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d005      	beq.n	800b4ce <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	f043 0202 	orr.w	r2, r3, #2
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	330c      	adds	r3, #12
 800b4d2:	2202      	movs	r2, #2
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 f8e2 	bl	800b6a0 <USBD_CtlSendData>
      break;
 800b4dc:	e004      	b.n	800b4e8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b4de:	6839      	ldr	r1, [r7, #0]
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 f873 	bl	800b5cc <USBD_CtlError>
      break;
 800b4e6:	bf00      	nop
  }
}
 800b4e8:	bf00      	nop
 800b4ea:	3708      	adds	r7, #8
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	885b      	ldrh	r3, [r3, #2]
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d106      	bne.n	800b510 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2201      	movs	r2, #1
 800b506:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 f926 	bl	800b75c <USBD_CtlSendStatus>
  }
}
 800b510:	bf00      	nop
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b528:	3b01      	subs	r3, #1
 800b52a:	2b02      	cmp	r3, #2
 800b52c:	d80b      	bhi.n	800b546 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	885b      	ldrh	r3, [r3, #2]
 800b532:	2b01      	cmp	r3, #1
 800b534:	d10c      	bne.n	800b550 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 f90c 	bl	800b75c <USBD_CtlSendStatus>
      }
      break;
 800b544:	e004      	b.n	800b550 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b546:	6839      	ldr	r1, [r7, #0]
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 f83f 	bl	800b5cc <USBD_CtlError>
      break;
 800b54e:	e000      	b.n	800b552 <USBD_ClrFeature+0x3a>
      break;
 800b550:	bf00      	nop
  }
}
 800b552:	bf00      	nop
 800b554:	3708      	adds	r7, #8
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}

0800b55a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b55a:	b480      	push	{r7}
 800b55c:	b083      	sub	sp, #12
 800b55e:	af00      	add	r7, sp, #0
 800b560:	6078      	str	r0, [r7, #4]
 800b562:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	781a      	ldrb	r2, [r3, #0]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	785a      	ldrb	r2, [r3, #1]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	3302      	adds	r3, #2
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	461a      	mov	r2, r3
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	3303      	adds	r3, #3
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	021b      	lsls	r3, r3, #8
 800b584:	b29b      	uxth	r3, r3
 800b586:	4413      	add	r3, r2
 800b588:	b29a      	uxth	r2, r3
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	3304      	adds	r3, #4
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	461a      	mov	r2, r3
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	3305      	adds	r3, #5
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	021b      	lsls	r3, r3, #8
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	4413      	add	r3, r2
 800b5a2:	b29a      	uxth	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	3306      	adds	r3, #6
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	3307      	adds	r3, #7
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	021b      	lsls	r3, r3, #8
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	4413      	add	r3, r2
 800b5bc:	b29a      	uxth	r2, r3
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	80da      	strh	r2, [r3, #6]

}
 800b5c2:	bf00      	nop
 800b5c4:	370c      	adds	r7, #12
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bc80      	pop	{r7}
 800b5ca:	4770      	bx	lr

0800b5cc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b5d6:	2180      	movs	r1, #128	@ 0x80
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 fc67 	bl	800beac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b5de:	2100      	movs	r1, #0
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 fc63 	bl	800beac <USBD_LL_StallEP>
}
 800b5e6:	bf00      	nop
 800b5e8:	3708      	adds	r7, #8
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b086      	sub	sp, #24
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	60f8      	str	r0, [r7, #12]
 800b5f6:	60b9      	str	r1, [r7, #8]
 800b5f8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d032      	beq.n	800b66a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b604:	68f8      	ldr	r0, [r7, #12]
 800b606:	f000 f834 	bl	800b672 <USBD_GetLen>
 800b60a:	4603      	mov	r3, r0
 800b60c:	3301      	adds	r3, #1
 800b60e:	b29b      	uxth	r3, r3
 800b610:	005b      	lsls	r3, r3, #1
 800b612:	b29a      	uxth	r2, r3
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b618:	7dfb      	ldrb	r3, [r7, #23]
 800b61a:	1c5a      	adds	r2, r3, #1
 800b61c:	75fa      	strb	r2, [r7, #23]
 800b61e:	461a      	mov	r2, r3
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	4413      	add	r3, r2
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	7812      	ldrb	r2, [r2, #0]
 800b628:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b62a:	7dfb      	ldrb	r3, [r7, #23]
 800b62c:	1c5a      	adds	r2, r3, #1
 800b62e:	75fa      	strb	r2, [r7, #23]
 800b630:	461a      	mov	r2, r3
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	4413      	add	r3, r2
 800b636:	2203      	movs	r2, #3
 800b638:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b63a:	e012      	b.n	800b662 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	1c5a      	adds	r2, r3, #1
 800b640:	60fa      	str	r2, [r7, #12]
 800b642:	7dfa      	ldrb	r2, [r7, #23]
 800b644:	1c51      	adds	r1, r2, #1
 800b646:	75f9      	strb	r1, [r7, #23]
 800b648:	4611      	mov	r1, r2
 800b64a:	68ba      	ldr	r2, [r7, #8]
 800b64c:	440a      	add	r2, r1
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b652:	7dfb      	ldrb	r3, [r7, #23]
 800b654:	1c5a      	adds	r2, r3, #1
 800b656:	75fa      	strb	r2, [r7, #23]
 800b658:	461a      	mov	r2, r3
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	4413      	add	r3, r2
 800b65e:	2200      	movs	r2, #0
 800b660:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d1e8      	bne.n	800b63c <USBD_GetString+0x4e>
    }
  }
}
 800b66a:	bf00      	nop
 800b66c:	3718      	adds	r7, #24
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}

0800b672 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b672:	b480      	push	{r7}
 800b674:	b085      	sub	sp, #20
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b67a:	2300      	movs	r3, #0
 800b67c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b67e:	e005      	b.n	800b68c <USBD_GetLen+0x1a>
  {
    len++;
 800b680:	7bfb      	ldrb	r3, [r7, #15]
 800b682:	3301      	adds	r3, #1
 800b684:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	3301      	adds	r3, #1
 800b68a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d1f5      	bne.n	800b680 <USBD_GetLen+0xe>
  }

  return len;
 800b694:	7bfb      	ldrb	r3, [r7, #15]
}
 800b696:	4618      	mov	r0, r3
 800b698:	3714      	adds	r7, #20
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bc80      	pop	{r7}
 800b69e:	4770      	bx	lr

0800b6a0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	4613      	mov	r3, r2
 800b6ac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2202      	movs	r2, #2
 800b6b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b6b6:	88fa      	ldrh	r2, [r7, #6]
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b6bc:	88fa      	ldrh	r2, [r7, #6]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b6c2:	88fb      	ldrh	r3, [r7, #6]
 800b6c4:	68ba      	ldr	r2, [r7, #8]
 800b6c6:	2100      	movs	r1, #0
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f000 fc77 	bl	800bfbc <USBD_LL_Transmit>

  return USBD_OK;
 800b6ce:	2300      	movs	r3, #0
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3710      	adds	r7, #16
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}

0800b6d8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	4613      	mov	r3, r2
 800b6e4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b6e6:	88fb      	ldrh	r3, [r7, #6]
 800b6e8:	68ba      	ldr	r2, [r7, #8]
 800b6ea:	2100      	movs	r1, #0
 800b6ec:	68f8      	ldr	r0, [r7, #12]
 800b6ee:	f000 fc65 	bl	800bfbc <USBD_LL_Transmit>

  return USBD_OK;
 800b6f2:	2300      	movs	r3, #0
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3710      	adds	r7, #16
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	4613      	mov	r3, r2
 800b708:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2203      	movs	r2, #3
 800b70e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b712:	88fa      	ldrh	r2, [r7, #6]
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b71a:	88fa      	ldrh	r2, [r7, #6]
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b722:	88fb      	ldrh	r3, [r7, #6]
 800b724:	68ba      	ldr	r2, [r7, #8]
 800b726:	2100      	movs	r1, #0
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	f000 fc6a 	bl	800c002 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b72e:	2300      	movs	r3, #0
}
 800b730:	4618      	mov	r0, r3
 800b732:	3710      	adds	r7, #16
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	60b9      	str	r1, [r7, #8]
 800b742:	4613      	mov	r3, r2
 800b744:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b746:	88fb      	ldrh	r3, [r7, #6]
 800b748:	68ba      	ldr	r2, [r7, #8]
 800b74a:	2100      	movs	r1, #0
 800b74c:	68f8      	ldr	r0, [r7, #12]
 800b74e:	f000 fc58 	bl	800c002 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b752:	2300      	movs	r3, #0
}
 800b754:	4618      	mov	r0, r3
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2204      	movs	r2, #4
 800b768:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b76c:	2300      	movs	r3, #0
 800b76e:	2200      	movs	r2, #0
 800b770:	2100      	movs	r1, #0
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 fc22 	bl	800bfbc <USBD_LL_Transmit>

  return USBD_OK;
 800b778:	2300      	movs	r3, #0
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}

0800b782 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b782:	b580      	push	{r7, lr}
 800b784:	b082      	sub	sp, #8
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2205      	movs	r2, #5
 800b78e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b792:	2300      	movs	r3, #0
 800b794:	2200      	movs	r2, #0
 800b796:	2100      	movs	r1, #0
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 fc32 	bl	800c002 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3708      	adds	r7, #8
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	4912      	ldr	r1, [pc, #72]	@ (800b7f8 <MX_USB_DEVICE_Init+0x50>)
 800b7b0:	4812      	ldr	r0, [pc, #72]	@ (800b7fc <MX_USB_DEVICE_Init+0x54>)
 800b7b2:	f7fe ff62 	bl	800a67a <USBD_Init>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d001      	beq.n	800b7c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b7bc:	f7f6 f9c2 	bl	8001b44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b7c0:	490f      	ldr	r1, [pc, #60]	@ (800b800 <MX_USB_DEVICE_Init+0x58>)
 800b7c2:	480e      	ldr	r0, [pc, #56]	@ (800b7fc <MX_USB_DEVICE_Init+0x54>)
 800b7c4:	f7fe ff84 	bl	800a6d0 <USBD_RegisterClass>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d001      	beq.n	800b7d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b7ce:	f7f6 f9b9 	bl	8001b44 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b7d2:	490c      	ldr	r1, [pc, #48]	@ (800b804 <MX_USB_DEVICE_Init+0x5c>)
 800b7d4:	4809      	ldr	r0, [pc, #36]	@ (800b7fc <MX_USB_DEVICE_Init+0x54>)
 800b7d6:	f7fe feb5 	bl	800a544 <USBD_CDC_RegisterInterface>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d001      	beq.n	800b7e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b7e0:	f7f6 f9b0 	bl	8001b44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b7e4:	4805      	ldr	r0, [pc, #20]	@ (800b7fc <MX_USB_DEVICE_Init+0x54>)
 800b7e6:	f7fe ff8c 	bl	800a702 <USBD_Start>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d001      	beq.n	800b7f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b7f0:	f7f6 f9a8 	bl	8001b44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b7f4:	bf00      	nop
 800b7f6:	bd80      	pop	{r7, pc}
 800b7f8:	20000134 	.word	0x20000134
 800b7fc:	20001ef8 	.word	0x20001ef8
 800b800:	20000020 	.word	0x20000020
 800b804:	20000124 	.word	0x20000124

0800b808 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b80c:	2200      	movs	r2, #0
 800b80e:	4905      	ldr	r1, [pc, #20]	@ (800b824 <CDC_Init_FS+0x1c>)
 800b810:	4805      	ldr	r0, [pc, #20]	@ (800b828 <CDC_Init_FS+0x20>)
 800b812:	f7fe fead 	bl	800a570 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b816:	4905      	ldr	r1, [pc, #20]	@ (800b82c <CDC_Init_FS+0x24>)
 800b818:	4803      	ldr	r0, [pc, #12]	@ (800b828 <CDC_Init_FS+0x20>)
 800b81a:	f7fe fec2 	bl	800a5a2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b81e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b820:	4618      	mov	r0, r3
 800b822:	bd80      	pop	{r7, pc}
 800b824:	200025bc 	.word	0x200025bc
 800b828:	20001ef8 	.word	0x20001ef8
 800b82c:	200021bc 	.word	0x200021bc

0800b830 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b830:	b480      	push	{r7}
 800b832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b834:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b836:	4618      	mov	r0, r3
 800b838:	46bd      	mov	sp, r7
 800b83a:	bc80      	pop	{r7}
 800b83c:	4770      	bx	lr
	...

0800b840 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
 800b846:	4603      	mov	r3, r0
 800b848:	6039      	str	r1, [r7, #0]
 800b84a:	71fb      	strb	r3, [r7, #7]
 800b84c:	4613      	mov	r3, r2
 800b84e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b850:	79fb      	ldrb	r3, [r7, #7]
 800b852:	2b23      	cmp	r3, #35	@ 0x23
 800b854:	d84a      	bhi.n	800b8ec <CDC_Control_FS+0xac>
 800b856:	a201      	add	r2, pc, #4	@ (adr r2, 800b85c <CDC_Control_FS+0x1c>)
 800b858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b85c:	0800b8ed 	.word	0x0800b8ed
 800b860:	0800b8ed 	.word	0x0800b8ed
 800b864:	0800b8ed 	.word	0x0800b8ed
 800b868:	0800b8ed 	.word	0x0800b8ed
 800b86c:	0800b8ed 	.word	0x0800b8ed
 800b870:	0800b8ed 	.word	0x0800b8ed
 800b874:	0800b8ed 	.word	0x0800b8ed
 800b878:	0800b8ed 	.word	0x0800b8ed
 800b87c:	0800b8ed 	.word	0x0800b8ed
 800b880:	0800b8ed 	.word	0x0800b8ed
 800b884:	0800b8ed 	.word	0x0800b8ed
 800b888:	0800b8ed 	.word	0x0800b8ed
 800b88c:	0800b8ed 	.word	0x0800b8ed
 800b890:	0800b8ed 	.word	0x0800b8ed
 800b894:	0800b8ed 	.word	0x0800b8ed
 800b898:	0800b8ed 	.word	0x0800b8ed
 800b89c:	0800b8ed 	.word	0x0800b8ed
 800b8a0:	0800b8ed 	.word	0x0800b8ed
 800b8a4:	0800b8ed 	.word	0x0800b8ed
 800b8a8:	0800b8ed 	.word	0x0800b8ed
 800b8ac:	0800b8ed 	.word	0x0800b8ed
 800b8b0:	0800b8ed 	.word	0x0800b8ed
 800b8b4:	0800b8ed 	.word	0x0800b8ed
 800b8b8:	0800b8ed 	.word	0x0800b8ed
 800b8bc:	0800b8ed 	.word	0x0800b8ed
 800b8c0:	0800b8ed 	.word	0x0800b8ed
 800b8c4:	0800b8ed 	.word	0x0800b8ed
 800b8c8:	0800b8ed 	.word	0x0800b8ed
 800b8cc:	0800b8ed 	.word	0x0800b8ed
 800b8d0:	0800b8ed 	.word	0x0800b8ed
 800b8d4:	0800b8ed 	.word	0x0800b8ed
 800b8d8:	0800b8ed 	.word	0x0800b8ed
 800b8dc:	0800b8ed 	.word	0x0800b8ed
 800b8e0:	0800b8ed 	.word	0x0800b8ed
 800b8e4:	0800b8ed 	.word	0x0800b8ed
 800b8e8:	0800b8ed 	.word	0x0800b8ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b8ec:	bf00      	nop
  }

  return (USBD_OK);
 800b8ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bc80      	pop	{r7}
 800b8f8:	4770      	bx	lr
 800b8fa:	bf00      	nop

0800b8fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b906:	6879      	ldr	r1, [r7, #4]
 800b908:	480e      	ldr	r0, [pc, #56]	@ (800b944 <CDC_Receive_FS+0x48>)
 800b90a:	f7fe fe4a 	bl	800a5a2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b90e:	480d      	ldr	r0, [pc, #52]	@ (800b944 <CDC_Receive_FS+0x48>)
 800b910:	f7fe fe89 	bl	800a626 <USBD_CDC_ReceivePacket>

  size_t len = (size_t) *Len;
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	60fb      	str	r3, [r7, #12]
  memset(usb_rx_buffer, 0, sizeof(usb_rx_buffer));
 800b91a:	2280      	movs	r2, #128	@ 0x80
 800b91c:	2100      	movs	r1, #0
 800b91e:	480a      	ldr	r0, [pc, #40]	@ (800b948 <CDC_Receive_FS+0x4c>)
 800b920:	f000 ff3f 	bl	800c7a2 <memset>
  memcpy(usb_rx_buffer, Buf, len);
 800b924:	68fa      	ldr	r2, [r7, #12]
 800b926:	6879      	ldr	r1, [r7, #4]
 800b928:	4807      	ldr	r0, [pc, #28]	@ (800b948 <CDC_Receive_FS+0x4c>)
 800b92a:	f001 f812 	bl	800c952 <memcpy>
  memset(Buf, 0, len);
 800b92e:	68fa      	ldr	r2, [r7, #12]
 800b930:	2100      	movs	r1, #0
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 ff35 	bl	800c7a2 <memset>

  return (USBD_OK);
 800b938:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3710      	adds	r7, #16
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	20001ef8 	.word	0x20001ef8
 800b948:	200029bc 	.word	0x200029bc

0800b94c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	460b      	mov	r3, r1
 800b956:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b958:	2300      	movs	r3, #0
 800b95a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b95c:	4b0d      	ldr	r3, [pc, #52]	@ (800b994 <CDC_Transmit_FS+0x48>)
 800b95e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b962:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d001      	beq.n	800b972 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b96e:	2301      	movs	r3, #1
 800b970:	e00b      	b.n	800b98a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b972:	887b      	ldrh	r3, [r7, #2]
 800b974:	461a      	mov	r2, r3
 800b976:	6879      	ldr	r1, [r7, #4]
 800b978:	4806      	ldr	r0, [pc, #24]	@ (800b994 <CDC_Transmit_FS+0x48>)
 800b97a:	f7fe fdf9 	bl	800a570 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b97e:	4805      	ldr	r0, [pc, #20]	@ (800b994 <CDC_Transmit_FS+0x48>)
 800b980:	f7fe fe22 	bl	800a5c8 <USBD_CDC_TransmitPacket>
 800b984:	4603      	mov	r3, r0
 800b986:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b988:	7bfb      	ldrb	r3, [r7, #15]
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	20001ef8 	.word	0x20001ef8

0800b998 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	4603      	mov	r3, r0
 800b9a0:	6039      	str	r1, [r7, #0]
 800b9a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	2212      	movs	r2, #18
 800b9a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b9aa:	4b03      	ldr	r3, [pc, #12]	@ (800b9b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	370c      	adds	r7, #12
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bc80      	pop	{r7}
 800b9b4:	4770      	bx	lr
 800b9b6:	bf00      	nop
 800b9b8:	20000150 	.word	0x20000150

0800b9bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	6039      	str	r1, [r7, #0]
 800b9c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	2204      	movs	r2, #4
 800b9cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b9ce:	4b03      	ldr	r3, [pc, #12]	@ (800b9dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bc80      	pop	{r7}
 800b9d8:	4770      	bx	lr
 800b9da:	bf00      	nop
 800b9dc:	20000164 	.word	0x20000164

0800b9e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	6039      	str	r1, [r7, #0]
 800b9ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b9ec:	79fb      	ldrb	r3, [r7, #7]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d105      	bne.n	800b9fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b9f2:	683a      	ldr	r2, [r7, #0]
 800b9f4:	4907      	ldr	r1, [pc, #28]	@ (800ba14 <USBD_FS_ProductStrDescriptor+0x34>)
 800b9f6:	4808      	ldr	r0, [pc, #32]	@ (800ba18 <USBD_FS_ProductStrDescriptor+0x38>)
 800b9f8:	f7ff fdf9 	bl	800b5ee <USBD_GetString>
 800b9fc:	e004      	b.n	800ba08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b9fe:	683a      	ldr	r2, [r7, #0]
 800ba00:	4904      	ldr	r1, [pc, #16]	@ (800ba14 <USBD_FS_ProductStrDescriptor+0x34>)
 800ba02:	4805      	ldr	r0, [pc, #20]	@ (800ba18 <USBD_FS_ProductStrDescriptor+0x38>)
 800ba04:	f7ff fdf3 	bl	800b5ee <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba08:	4b02      	ldr	r3, [pc, #8]	@ (800ba14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3708      	adds	r7, #8
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	20002a3c 	.word	0x20002a3c
 800ba18:	0800da60 	.word	0x0800da60

0800ba1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	4603      	mov	r3, r0
 800ba24:	6039      	str	r1, [r7, #0]
 800ba26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ba28:	683a      	ldr	r2, [r7, #0]
 800ba2a:	4904      	ldr	r1, [pc, #16]	@ (800ba3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ba2c:	4804      	ldr	r0, [pc, #16]	@ (800ba40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ba2e:	f7ff fdde 	bl	800b5ee <USBD_GetString>
  return USBD_StrDesc;
 800ba32:	4b02      	ldr	r3, [pc, #8]	@ (800ba3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3708      	adds	r7, #8
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	20002a3c 	.word	0x20002a3c
 800ba40:	0800da78 	.word	0x0800da78

0800ba44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	6039      	str	r1, [r7, #0]
 800ba4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	221a      	movs	r2, #26
 800ba54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ba56:	f000 f843 	bl	800bae0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ba5a:	4b02      	ldr	r3, [pc, #8]	@ (800ba64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3708      	adds	r7, #8
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	20000168 	.word	0x20000168

0800ba68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	4603      	mov	r3, r0
 800ba70:	6039      	str	r1, [r7, #0]
 800ba72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ba74:	79fb      	ldrb	r3, [r7, #7]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d105      	bne.n	800ba86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ba7a:	683a      	ldr	r2, [r7, #0]
 800ba7c:	4907      	ldr	r1, [pc, #28]	@ (800ba9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ba7e:	4808      	ldr	r0, [pc, #32]	@ (800baa0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ba80:	f7ff fdb5 	bl	800b5ee <USBD_GetString>
 800ba84:	e004      	b.n	800ba90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ba86:	683a      	ldr	r2, [r7, #0]
 800ba88:	4904      	ldr	r1, [pc, #16]	@ (800ba9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ba8a:	4805      	ldr	r0, [pc, #20]	@ (800baa0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ba8c:	f7ff fdaf 	bl	800b5ee <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba90:	4b02      	ldr	r3, [pc, #8]	@ (800ba9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3708      	adds	r7, #8
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	20002a3c 	.word	0x20002a3c
 800baa0:	0800da8c 	.word	0x0800da8c

0800baa4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b082      	sub	sp, #8
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	4603      	mov	r3, r0
 800baac:	6039      	str	r1, [r7, #0]
 800baae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bab0:	79fb      	ldrb	r3, [r7, #7]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d105      	bne.n	800bac2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bab6:	683a      	ldr	r2, [r7, #0]
 800bab8:	4907      	ldr	r1, [pc, #28]	@ (800bad8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800baba:	4808      	ldr	r0, [pc, #32]	@ (800badc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800babc:	f7ff fd97 	bl	800b5ee <USBD_GetString>
 800bac0:	e004      	b.n	800bacc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bac2:	683a      	ldr	r2, [r7, #0]
 800bac4:	4904      	ldr	r1, [pc, #16]	@ (800bad8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bac6:	4805      	ldr	r0, [pc, #20]	@ (800badc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bac8:	f7ff fd91 	bl	800b5ee <USBD_GetString>
  }
  return USBD_StrDesc;
 800bacc:	4b02      	ldr	r3, [pc, #8]	@ (800bad8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3708      	adds	r7, #8
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	20002a3c 	.word	0x20002a3c
 800badc:	0800da98 	.word	0x0800da98

0800bae0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bae6:	4b0f      	ldr	r3, [pc, #60]	@ (800bb24 <Get_SerialNum+0x44>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800baec:	4b0e      	ldr	r3, [pc, #56]	@ (800bb28 <Get_SerialNum+0x48>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800baf2:	4b0e      	ldr	r3, [pc, #56]	@ (800bb2c <Get_SerialNum+0x4c>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4413      	add	r3, r2
 800bafe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d009      	beq.n	800bb1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bb06:	2208      	movs	r2, #8
 800bb08:	4909      	ldr	r1, [pc, #36]	@ (800bb30 <Get_SerialNum+0x50>)
 800bb0a:	68f8      	ldr	r0, [r7, #12]
 800bb0c:	f000 f814 	bl	800bb38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bb10:	2204      	movs	r2, #4
 800bb12:	4908      	ldr	r1, [pc, #32]	@ (800bb34 <Get_SerialNum+0x54>)
 800bb14:	68b8      	ldr	r0, [r7, #8]
 800bb16:	f000 f80f 	bl	800bb38 <IntToUnicode>
  }
}
 800bb1a:	bf00      	nop
 800bb1c:	3710      	adds	r7, #16
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	1ffff7e8 	.word	0x1ffff7e8
 800bb28:	1ffff7ec 	.word	0x1ffff7ec
 800bb2c:	1ffff7f0 	.word	0x1ffff7f0
 800bb30:	2000016a 	.word	0x2000016a
 800bb34:	2000017a 	.word	0x2000017a

0800bb38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b087      	sub	sp, #28
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	4613      	mov	r3, r2
 800bb44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bb46:	2300      	movs	r3, #0
 800bb48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	75fb      	strb	r3, [r7, #23]
 800bb4e:	e027      	b.n	800bba0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	0f1b      	lsrs	r3, r3, #28
 800bb54:	2b09      	cmp	r3, #9
 800bb56:	d80b      	bhi.n	800bb70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	0f1b      	lsrs	r3, r3, #28
 800bb5c:	b2da      	uxtb	r2, r3
 800bb5e:	7dfb      	ldrb	r3, [r7, #23]
 800bb60:	005b      	lsls	r3, r3, #1
 800bb62:	4619      	mov	r1, r3
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	440b      	add	r3, r1
 800bb68:	3230      	adds	r2, #48	@ 0x30
 800bb6a:	b2d2      	uxtb	r2, r2
 800bb6c:	701a      	strb	r2, [r3, #0]
 800bb6e:	e00a      	b.n	800bb86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	0f1b      	lsrs	r3, r3, #28
 800bb74:	b2da      	uxtb	r2, r3
 800bb76:	7dfb      	ldrb	r3, [r7, #23]
 800bb78:	005b      	lsls	r3, r3, #1
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	440b      	add	r3, r1
 800bb80:	3237      	adds	r2, #55	@ 0x37
 800bb82:	b2d2      	uxtb	r2, r2
 800bb84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	011b      	lsls	r3, r3, #4
 800bb8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bb8c:	7dfb      	ldrb	r3, [r7, #23]
 800bb8e:	005b      	lsls	r3, r3, #1
 800bb90:	3301      	adds	r3, #1
 800bb92:	68ba      	ldr	r2, [r7, #8]
 800bb94:	4413      	add	r3, r2
 800bb96:	2200      	movs	r2, #0
 800bb98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bb9a:	7dfb      	ldrb	r3, [r7, #23]
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	75fb      	strb	r3, [r7, #23]
 800bba0:	7dfa      	ldrb	r2, [r7, #23]
 800bba2:	79fb      	ldrb	r3, [r7, #7]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d3d3      	bcc.n	800bb50 <IntToUnicode+0x18>
  }
}
 800bba8:	bf00      	nop
 800bbaa:	bf00      	nop
 800bbac:	371c      	adds	r7, #28
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bc80      	pop	{r7}
 800bbb2:	4770      	bx	lr

0800bbb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a0d      	ldr	r2, [pc, #52]	@ (800bbf8 <HAL_PCD_MspInit+0x44>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d113      	bne.n	800bbee <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bbc6:	4b0d      	ldr	r3, [pc, #52]	@ (800bbfc <HAL_PCD_MspInit+0x48>)
 800bbc8:	69db      	ldr	r3, [r3, #28]
 800bbca:	4a0c      	ldr	r2, [pc, #48]	@ (800bbfc <HAL_PCD_MspInit+0x48>)
 800bbcc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bbd0:	61d3      	str	r3, [r2, #28]
 800bbd2:	4b0a      	ldr	r3, [pc, #40]	@ (800bbfc <HAL_PCD_MspInit+0x48>)
 800bbd4:	69db      	ldr	r3, [r3, #28]
 800bbd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bbda:	60fb      	str	r3, [r7, #12]
 800bbdc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800bbde:	2200      	movs	r2, #0
 800bbe0:	2100      	movs	r1, #0
 800bbe2:	2014      	movs	r0, #20
 800bbe4:	f7f7 fa2f 	bl	8003046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800bbe8:	2014      	movs	r0, #20
 800bbea:	f7f7 fa48 	bl	800307e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bbee:	bf00      	nop
 800bbf0:	3710      	adds	r7, #16
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	40005c00 	.word	0x40005c00
 800bbfc:	40021000 	.word	0x40021000

0800bc00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b082      	sub	sp, #8
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800bc14:	4619      	mov	r1, r3
 800bc16:	4610      	mov	r0, r2
 800bc18:	f7fe fdbb 	bl	800a792 <USBD_LL_SetupStage>
}
 800bc1c:	bf00      	nop
 800bc1e:	3708      	adds	r7, #8
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800bc36:	78fa      	ldrb	r2, [r7, #3]
 800bc38:	6879      	ldr	r1, [r7, #4]
 800bc3a:	4613      	mov	r3, r2
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	4413      	add	r3, r2
 800bc40:	00db      	lsls	r3, r3, #3
 800bc42:	440b      	add	r3, r1
 800bc44:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bc48:	681a      	ldr	r2, [r3, #0]
 800bc4a:	78fb      	ldrb	r3, [r7, #3]
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	f7fe fded 	bl	800a82c <USBD_LL_DataOutStage>
}
 800bc52:	bf00      	nop
 800bc54:	3708      	adds	r7, #8
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}

0800bc5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc5a:	b580      	push	{r7, lr}
 800bc5c:	b082      	sub	sp, #8
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
 800bc62:	460b      	mov	r3, r1
 800bc64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800bc6c:	78fa      	ldrb	r2, [r7, #3]
 800bc6e:	6879      	ldr	r1, [r7, #4]
 800bc70:	4613      	mov	r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	4413      	add	r3, r2
 800bc76:	00db      	lsls	r3, r3, #3
 800bc78:	440b      	add	r3, r1
 800bc7a:	3324      	adds	r3, #36	@ 0x24
 800bc7c:	681a      	ldr	r2, [r3, #0]
 800bc7e:	78fb      	ldrb	r3, [r7, #3]
 800bc80:	4619      	mov	r1, r3
 800bc82:	f7fe fe44 	bl	800a90e <USBD_LL_DataInStage>
}
 800bc86:	bf00      	nop
 800bc88:	3708      	adds	r7, #8
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}

0800bc8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc8e:	b580      	push	{r7, lr}
 800bc90:	b082      	sub	sp, #8
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f7fe ff54 	bl	800ab4a <USBD_LL_SOF>
}
 800bca2:	bf00      	nop
 800bca4:	3708      	adds	r7, #8
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}

0800bcaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcaa:	b580      	push	{r7, lr}
 800bcac:	b084      	sub	sp, #16
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	799b      	ldrb	r3, [r3, #6]
 800bcba:	2b02      	cmp	r3, #2
 800bcbc:	d001      	beq.n	800bcc2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bcbe:	f7f5 ff41 	bl	8001b44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bcc8:	7bfa      	ldrb	r2, [r7, #15]
 800bcca:	4611      	mov	r1, r2
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7fe ff04 	bl	800aada <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7fe febd 	bl	800aa58 <USBD_LL_Reset>
}
 800bcde:	bf00      	nop
 800bce0:	3710      	adds	r7, #16
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
	...

0800bce8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7fe fefe 	bl	800aaf8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	7a9b      	ldrb	r3, [r3, #10]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d005      	beq.n	800bd10 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd04:	4b04      	ldr	r3, [pc, #16]	@ (800bd18 <HAL_PCD_SuspendCallback+0x30>)
 800bd06:	691b      	ldr	r3, [r3, #16]
 800bd08:	4a03      	ldr	r2, [pc, #12]	@ (800bd18 <HAL_PCD_SuspendCallback+0x30>)
 800bd0a:	f043 0306 	orr.w	r3, r3, #6
 800bd0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bd10:	bf00      	nop
 800bd12:	3708      	adds	r7, #8
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	e000ed00 	.word	0xe000ed00

0800bd1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7fe fef8 	bl	800ab20 <USBD_LL_Resume>
}
 800bd30:	bf00      	nop
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bd40:	4a28      	ldr	r2, [pc, #160]	@ (800bde4 <USBD_LL_Init+0xac>)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	4a26      	ldr	r2, [pc, #152]	@ (800bde4 <USBD_LL_Init+0xac>)
 800bd4c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800bd50:	4b24      	ldr	r3, [pc, #144]	@ (800bde4 <USBD_LL_Init+0xac>)
 800bd52:	4a25      	ldr	r2, [pc, #148]	@ (800bde8 <USBD_LL_Init+0xb0>)
 800bd54:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bd56:	4b23      	ldr	r3, [pc, #140]	@ (800bde4 <USBD_LL_Init+0xac>)
 800bd58:	2208      	movs	r2, #8
 800bd5a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bd5c:	4b21      	ldr	r3, [pc, #132]	@ (800bde4 <USBD_LL_Init+0xac>)
 800bd5e:	2202      	movs	r2, #2
 800bd60:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bd62:	4b20      	ldr	r3, [pc, #128]	@ (800bde4 <USBD_LL_Init+0xac>)
 800bd64:	2200      	movs	r2, #0
 800bd66:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bd68:	4b1e      	ldr	r3, [pc, #120]	@ (800bde4 <USBD_LL_Init+0xac>)
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bd6e:	4b1d      	ldr	r3, [pc, #116]	@ (800bde4 <USBD_LL_Init+0xac>)
 800bd70:	2200      	movs	r2, #0
 800bd72:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bd74:	481b      	ldr	r0, [pc, #108]	@ (800bde4 <USBD_LL_Init+0xac>)
 800bd76:	f7f7 fdb6 	bl	80038e6 <HAL_PCD_Init>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d001      	beq.n	800bd84 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800bd80:	f7f5 fee0 	bl	8001b44 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bd8a:	2318      	movs	r3, #24
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	2100      	movs	r1, #0
 800bd90:	f7f9 fac7 	bl	8005322 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bd9a:	2358      	movs	r3, #88	@ 0x58
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	2180      	movs	r1, #128	@ 0x80
 800bda0:	f7f9 fabf 	bl	8005322 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bdaa:	23c0      	movs	r3, #192	@ 0xc0
 800bdac:	2200      	movs	r2, #0
 800bdae:	2181      	movs	r1, #129	@ 0x81
 800bdb0:	f7f9 fab7 	bl	8005322 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bdba:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	2101      	movs	r1, #1
 800bdc2:	f7f9 faae 	bl	8005322 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bdcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	2182      	movs	r1, #130	@ 0x82
 800bdd4:	f7f9 faa5 	bl	8005322 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bdd8:	2300      	movs	r3, #0
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3708      	adds	r7, #8
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	20002c3c 	.word	0x20002c3c
 800bde8:	40005c00 	.word	0x40005c00

0800bdec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800be02:	4618      	mov	r0, r3
 800be04:	f7f7 fe65 	bl	8003ad2 <HAL_PCD_Start>
 800be08:	4603      	mov	r3, r0
 800be0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be0c:	7bfb      	ldrb	r3, [r7, #15]
 800be0e:	4618      	mov	r0, r3
 800be10:	f000 f94e 	bl	800c0b0 <USBD_Get_USB_Status>
 800be14:	4603      	mov	r3, r0
 800be16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be18:	7bbb      	ldrb	r3, [r7, #14]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3710      	adds	r7, #16
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}

0800be22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800be22:	b580      	push	{r7, lr}
 800be24:	b084      	sub	sp, #16
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
 800be2a:	4608      	mov	r0, r1
 800be2c:	4611      	mov	r1, r2
 800be2e:	461a      	mov	r2, r3
 800be30:	4603      	mov	r3, r0
 800be32:	70fb      	strb	r3, [r7, #3]
 800be34:	460b      	mov	r3, r1
 800be36:	70bb      	strb	r3, [r7, #2]
 800be38:	4613      	mov	r3, r2
 800be3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be3c:	2300      	movs	r3, #0
 800be3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be40:	2300      	movs	r3, #0
 800be42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800be4a:	78bb      	ldrb	r3, [r7, #2]
 800be4c:	883a      	ldrh	r2, [r7, #0]
 800be4e:	78f9      	ldrb	r1, [r7, #3]
 800be50:	f7f7 ffb9 	bl	8003dc6 <HAL_PCD_EP_Open>
 800be54:	4603      	mov	r3, r0
 800be56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be58:	7bfb      	ldrb	r3, [r7, #15]
 800be5a:	4618      	mov	r0, r3
 800be5c:	f000 f928 	bl	800c0b0 <USBD_Get_USB_Status>
 800be60:	4603      	mov	r3, r0
 800be62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be64:	7bbb      	ldrb	r3, [r7, #14]
}
 800be66:	4618      	mov	r0, r3
 800be68:	3710      	adds	r7, #16
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}

0800be6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be6e:	b580      	push	{r7, lr}
 800be70:	b084      	sub	sp, #16
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
 800be76:	460b      	mov	r3, r1
 800be78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be7a:	2300      	movs	r3, #0
 800be7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be7e:	2300      	movs	r3, #0
 800be80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800be88:	78fa      	ldrb	r2, [r7, #3]
 800be8a:	4611      	mov	r1, r2
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7f7 fff7 	bl	8003e80 <HAL_PCD_EP_Close>
 800be92:	4603      	mov	r3, r0
 800be94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be96:	7bfb      	ldrb	r3, [r7, #15]
 800be98:	4618      	mov	r0, r3
 800be9a:	f000 f909 	bl	800c0b0 <USBD_Get_USB_Status>
 800be9e:	4603      	mov	r3, r0
 800bea0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bea2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3710      	adds	r7, #16
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	460b      	mov	r3, r1
 800beb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800beb8:	2300      	movs	r3, #0
 800beba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bebc:	2300      	movs	r3, #0
 800bebe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bec6:	78fa      	ldrb	r2, [r7, #3]
 800bec8:	4611      	mov	r1, r2
 800beca:	4618      	mov	r0, r3
 800becc:	f7f8 f89f 	bl	800400e <HAL_PCD_EP_SetStall>
 800bed0:	4603      	mov	r3, r0
 800bed2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bed4:	7bfb      	ldrb	r3, [r7, #15]
 800bed6:	4618      	mov	r0, r3
 800bed8:	f000 f8ea 	bl	800c0b0 <USBD_Get_USB_Status>
 800bedc:	4603      	mov	r3, r0
 800bede:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bee0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3710      	adds	r7, #16
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}

0800beea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800beea:	b580      	push	{r7, lr}
 800beec:	b084      	sub	sp, #16
 800beee:	af00      	add	r7, sp, #0
 800bef0:	6078      	str	r0, [r7, #4]
 800bef2:	460b      	mov	r3, r1
 800bef4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bef6:	2300      	movs	r3, #0
 800bef8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800befa:	2300      	movs	r3, #0
 800befc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bf04:	78fa      	ldrb	r2, [r7, #3]
 800bf06:	4611      	mov	r1, r2
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7f8 f8e0 	bl	80040ce <HAL_PCD_EP_ClrStall>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf12:	7bfb      	ldrb	r3, [r7, #15]
 800bf14:	4618      	mov	r0, r3
 800bf16:	f000 f8cb 	bl	800c0b0 <USBD_Get_USB_Status>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3710      	adds	r7, #16
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b085      	sub	sp, #20
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	460b      	mov	r3, r1
 800bf32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bf3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bf3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	da0b      	bge.n	800bf5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bf44:	78fb      	ldrb	r3, [r7, #3]
 800bf46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bf4a:	68f9      	ldr	r1, [r7, #12]
 800bf4c:	4613      	mov	r3, r2
 800bf4e:	009b      	lsls	r3, r3, #2
 800bf50:	4413      	add	r3, r2
 800bf52:	00db      	lsls	r3, r3, #3
 800bf54:	440b      	add	r3, r1
 800bf56:	3312      	adds	r3, #18
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	e00b      	b.n	800bf74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bf5c:	78fb      	ldrb	r3, [r7, #3]
 800bf5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bf62:	68f9      	ldr	r1, [r7, #12]
 800bf64:	4613      	mov	r3, r2
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	4413      	add	r3, r2
 800bf6a:	00db      	lsls	r3, r3, #3
 800bf6c:	440b      	add	r3, r1
 800bf6e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800bf72:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3714      	adds	r7, #20
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bc80      	pop	{r7}
 800bf7c:	4770      	bx	lr

0800bf7e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bf7e:	b580      	push	{r7, lr}
 800bf80:	b084      	sub	sp, #16
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
 800bf86:	460b      	mov	r3, r1
 800bf88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bf98:	78fa      	ldrb	r2, [r7, #3]
 800bf9a:	4611      	mov	r1, r2
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f7f7 feee 	bl	8003d7e <HAL_PCD_SetAddress>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfa6:	7bfb      	ldrb	r3, [r7, #15]
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f000 f881 	bl	800c0b0 <USBD_Get_USB_Status>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3710      	adds	r7, #16
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b086      	sub	sp, #24
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	607a      	str	r2, [r7, #4]
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	460b      	mov	r3, r1
 800bfca:	72fb      	strb	r3, [r7, #11]
 800bfcc:	4613      	mov	r3, r2
 800bfce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bfde:	893b      	ldrh	r3, [r7, #8]
 800bfe0:	7af9      	ldrb	r1, [r7, #11]
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	f7f7 ffdc 	bl	8003fa0 <HAL_PCD_EP_Transmit>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfec:	7dfb      	ldrb	r3, [r7, #23]
 800bfee:	4618      	mov	r0, r3
 800bff0:	f000 f85e 	bl	800c0b0 <USBD_Get_USB_Status>
 800bff4:	4603      	mov	r3, r0
 800bff6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bff8:	7dbb      	ldrb	r3, [r7, #22]
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3718      	adds	r7, #24
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c002:	b580      	push	{r7, lr}
 800c004:	b086      	sub	sp, #24
 800c006:	af00      	add	r7, sp, #0
 800c008:	60f8      	str	r0, [r7, #12]
 800c00a:	607a      	str	r2, [r7, #4]
 800c00c:	461a      	mov	r2, r3
 800c00e:	460b      	mov	r3, r1
 800c010:	72fb      	strb	r3, [r7, #11]
 800c012:	4613      	mov	r3, r2
 800c014:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c016:	2300      	movs	r3, #0
 800c018:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c01a:	2300      	movs	r3, #0
 800c01c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c024:	893b      	ldrh	r3, [r7, #8]
 800c026:	7af9      	ldrb	r1, [r7, #11]
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	f7f7 ff71 	bl	8003f10 <HAL_PCD_EP_Receive>
 800c02e:	4603      	mov	r3, r0
 800c030:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c032:	7dfb      	ldrb	r3, [r7, #23]
 800c034:	4618      	mov	r0, r3
 800c036:	f000 f83b 	bl	800c0b0 <USBD_Get_USB_Status>
 800c03a:	4603      	mov	r3, r0
 800c03c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c03e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c040:	4618      	mov	r0, r3
 800c042:	3718      	adds	r7, #24
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	460b      	mov	r3, r1
 800c052:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c05a:	78fa      	ldrb	r2, [r7, #3]
 800c05c:	4611      	mov	r1, r2
 800c05e:	4618      	mov	r0, r3
 800c060:	f7f7 ff87 	bl	8003f72 <HAL_PCD_EP_GetRxCount>
 800c064:	4603      	mov	r3, r0
}
 800c066:	4618      	mov	r0, r3
 800c068:	3708      	adds	r7, #8
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
	...

0800c070 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c078:	4b02      	ldr	r3, [pc, #8]	@ (800c084 <USBD_static_malloc+0x14>)
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	370c      	adds	r7, #12
 800c07e:	46bd      	mov	sp, r7
 800c080:	bc80      	pop	{r7}
 800c082:	4770      	bx	lr
 800c084:	20002f14 	.word	0x20002f14

0800c088 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c088:	b480      	push	{r7}
 800c08a:	b083      	sub	sp, #12
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]

}
 800c090:	bf00      	nop
 800c092:	370c      	adds	r7, #12
 800c094:	46bd      	mov	sp, r7
 800c096:	bc80      	pop	{r7}
 800c098:	4770      	bx	lr

0800c09a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c09a:	b480      	push	{r7}
 800c09c:	b083      	sub	sp, #12
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c0a6:	bf00      	nop
 800c0a8:	370c      	adds	r7, #12
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bc80      	pop	{r7}
 800c0ae:	4770      	bx	lr

0800c0b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b085      	sub	sp, #20
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c0be:	79fb      	ldrb	r3, [r7, #7]
 800c0c0:	2b03      	cmp	r3, #3
 800c0c2:	d817      	bhi.n	800c0f4 <USBD_Get_USB_Status+0x44>
 800c0c4:	a201      	add	r2, pc, #4	@ (adr r2, 800c0cc <USBD_Get_USB_Status+0x1c>)
 800c0c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ca:	bf00      	nop
 800c0cc:	0800c0dd 	.word	0x0800c0dd
 800c0d0:	0800c0e3 	.word	0x0800c0e3
 800c0d4:	0800c0e9 	.word	0x0800c0e9
 800c0d8:	0800c0ef 	.word	0x0800c0ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	73fb      	strb	r3, [r7, #15]
    break;
 800c0e0:	e00b      	b.n	800c0fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c0e2:	2302      	movs	r3, #2
 800c0e4:	73fb      	strb	r3, [r7, #15]
    break;
 800c0e6:	e008      	b.n	800c0fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	73fb      	strb	r3, [r7, #15]
    break;
 800c0ec:	e005      	b.n	800c0fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c0ee:	2302      	movs	r3, #2
 800c0f0:	73fb      	strb	r3, [r7, #15]
    break;
 800c0f2:	e002      	b.n	800c0fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c0f4:	2302      	movs	r3, #2
 800c0f6:	73fb      	strb	r3, [r7, #15]
    break;
 800c0f8:	bf00      	nop
  }
  return usb_status;
 800c0fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3714      	adds	r7, #20
 800c100:	46bd      	mov	sp, r7
 800c102:	bc80      	pop	{r7}
 800c104:	4770      	bx	lr
 800c106:	bf00      	nop

0800c108 <atoi>:
 800c108:	220a      	movs	r2, #10
 800c10a:	2100      	movs	r1, #0
 800c10c:	f000 b87a 	b.w	800c204 <strtol>

0800c110 <_strtol_l.isra.0>:
 800c110:	2b24      	cmp	r3, #36	@ 0x24
 800c112:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c116:	4686      	mov	lr, r0
 800c118:	4690      	mov	r8, r2
 800c11a:	d801      	bhi.n	800c120 <_strtol_l.isra.0+0x10>
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	d106      	bne.n	800c12e <_strtol_l.isra.0+0x1e>
 800c120:	f000 fbea 	bl	800c8f8 <__errno>
 800c124:	2316      	movs	r3, #22
 800c126:	6003      	str	r3, [r0, #0]
 800c128:	2000      	movs	r0, #0
 800c12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c12e:	460d      	mov	r5, r1
 800c130:	4833      	ldr	r0, [pc, #204]	@ (800c200 <_strtol_l.isra.0+0xf0>)
 800c132:	462a      	mov	r2, r5
 800c134:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c138:	5d06      	ldrb	r6, [r0, r4]
 800c13a:	f016 0608 	ands.w	r6, r6, #8
 800c13e:	d1f8      	bne.n	800c132 <_strtol_l.isra.0+0x22>
 800c140:	2c2d      	cmp	r4, #45	@ 0x2d
 800c142:	d110      	bne.n	800c166 <_strtol_l.isra.0+0x56>
 800c144:	2601      	movs	r6, #1
 800c146:	782c      	ldrb	r4, [r5, #0]
 800c148:	1c95      	adds	r5, r2, #2
 800c14a:	f033 0210 	bics.w	r2, r3, #16
 800c14e:	d115      	bne.n	800c17c <_strtol_l.isra.0+0x6c>
 800c150:	2c30      	cmp	r4, #48	@ 0x30
 800c152:	d10d      	bne.n	800c170 <_strtol_l.isra.0+0x60>
 800c154:	782a      	ldrb	r2, [r5, #0]
 800c156:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c15a:	2a58      	cmp	r2, #88	@ 0x58
 800c15c:	d108      	bne.n	800c170 <_strtol_l.isra.0+0x60>
 800c15e:	786c      	ldrb	r4, [r5, #1]
 800c160:	3502      	adds	r5, #2
 800c162:	2310      	movs	r3, #16
 800c164:	e00a      	b.n	800c17c <_strtol_l.isra.0+0x6c>
 800c166:	2c2b      	cmp	r4, #43	@ 0x2b
 800c168:	bf04      	itt	eq
 800c16a:	782c      	ldrbeq	r4, [r5, #0]
 800c16c:	1c95      	addeq	r5, r2, #2
 800c16e:	e7ec      	b.n	800c14a <_strtol_l.isra.0+0x3a>
 800c170:	2b00      	cmp	r3, #0
 800c172:	d1f6      	bne.n	800c162 <_strtol_l.isra.0+0x52>
 800c174:	2c30      	cmp	r4, #48	@ 0x30
 800c176:	bf14      	ite	ne
 800c178:	230a      	movne	r3, #10
 800c17a:	2308      	moveq	r3, #8
 800c17c:	2200      	movs	r2, #0
 800c17e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c182:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c186:	fbbc f9f3 	udiv	r9, ip, r3
 800c18a:	4610      	mov	r0, r2
 800c18c:	fb03 ca19 	mls	sl, r3, r9, ip
 800c190:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c194:	2f09      	cmp	r7, #9
 800c196:	d80f      	bhi.n	800c1b8 <_strtol_l.isra.0+0xa8>
 800c198:	463c      	mov	r4, r7
 800c19a:	42a3      	cmp	r3, r4
 800c19c:	dd1b      	ble.n	800c1d6 <_strtol_l.isra.0+0xc6>
 800c19e:	1c57      	adds	r7, r2, #1
 800c1a0:	d007      	beq.n	800c1b2 <_strtol_l.isra.0+0xa2>
 800c1a2:	4581      	cmp	r9, r0
 800c1a4:	d314      	bcc.n	800c1d0 <_strtol_l.isra.0+0xc0>
 800c1a6:	d101      	bne.n	800c1ac <_strtol_l.isra.0+0x9c>
 800c1a8:	45a2      	cmp	sl, r4
 800c1aa:	db11      	blt.n	800c1d0 <_strtol_l.isra.0+0xc0>
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	fb00 4003 	mla	r0, r0, r3, r4
 800c1b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1b6:	e7eb      	b.n	800c190 <_strtol_l.isra.0+0x80>
 800c1b8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c1bc:	2f19      	cmp	r7, #25
 800c1be:	d801      	bhi.n	800c1c4 <_strtol_l.isra.0+0xb4>
 800c1c0:	3c37      	subs	r4, #55	@ 0x37
 800c1c2:	e7ea      	b.n	800c19a <_strtol_l.isra.0+0x8a>
 800c1c4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c1c8:	2f19      	cmp	r7, #25
 800c1ca:	d804      	bhi.n	800c1d6 <_strtol_l.isra.0+0xc6>
 800c1cc:	3c57      	subs	r4, #87	@ 0x57
 800c1ce:	e7e4      	b.n	800c19a <_strtol_l.isra.0+0x8a>
 800c1d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c1d4:	e7ed      	b.n	800c1b2 <_strtol_l.isra.0+0xa2>
 800c1d6:	1c53      	adds	r3, r2, #1
 800c1d8:	d108      	bne.n	800c1ec <_strtol_l.isra.0+0xdc>
 800c1da:	2322      	movs	r3, #34	@ 0x22
 800c1dc:	4660      	mov	r0, ip
 800c1de:	f8ce 3000 	str.w	r3, [lr]
 800c1e2:	f1b8 0f00 	cmp.w	r8, #0
 800c1e6:	d0a0      	beq.n	800c12a <_strtol_l.isra.0+0x1a>
 800c1e8:	1e69      	subs	r1, r5, #1
 800c1ea:	e006      	b.n	800c1fa <_strtol_l.isra.0+0xea>
 800c1ec:	b106      	cbz	r6, 800c1f0 <_strtol_l.isra.0+0xe0>
 800c1ee:	4240      	negs	r0, r0
 800c1f0:	f1b8 0f00 	cmp.w	r8, #0
 800c1f4:	d099      	beq.n	800c12a <_strtol_l.isra.0+0x1a>
 800c1f6:	2a00      	cmp	r2, #0
 800c1f8:	d1f6      	bne.n	800c1e8 <_strtol_l.isra.0+0xd8>
 800c1fa:	f8c8 1000 	str.w	r1, [r8]
 800c1fe:	e794      	b.n	800c12a <_strtol_l.isra.0+0x1a>
 800c200:	0800dc33 	.word	0x0800dc33

0800c204 <strtol>:
 800c204:	4613      	mov	r3, r2
 800c206:	460a      	mov	r2, r1
 800c208:	4601      	mov	r1, r0
 800c20a:	4802      	ldr	r0, [pc, #8]	@ (800c214 <strtol+0x10>)
 800c20c:	6800      	ldr	r0, [r0, #0]
 800c20e:	f7ff bf7f 	b.w	800c110 <_strtol_l.isra.0>
 800c212:	bf00      	nop
 800c214:	20000190 	.word	0x20000190

0800c218 <swapfunc>:
 800c218:	2b02      	cmp	r3, #2
 800c21a:	b510      	push	{r4, lr}
 800c21c:	d00a      	beq.n	800c234 <swapfunc+0x1c>
 800c21e:	0892      	lsrs	r2, r2, #2
 800c220:	6803      	ldr	r3, [r0, #0]
 800c222:	680c      	ldr	r4, [r1, #0]
 800c224:	3a01      	subs	r2, #1
 800c226:	2a00      	cmp	r2, #0
 800c228:	f840 4b04 	str.w	r4, [r0], #4
 800c22c:	f841 3b04 	str.w	r3, [r1], #4
 800c230:	dcf6      	bgt.n	800c220 <swapfunc+0x8>
 800c232:	bd10      	pop	{r4, pc}
 800c234:	4402      	add	r2, r0
 800c236:	780c      	ldrb	r4, [r1, #0]
 800c238:	7803      	ldrb	r3, [r0, #0]
 800c23a:	f800 4b01 	strb.w	r4, [r0], #1
 800c23e:	f801 3b01 	strb.w	r3, [r1], #1
 800c242:	1a13      	subs	r3, r2, r0
 800c244:	2b00      	cmp	r3, #0
 800c246:	dcf6      	bgt.n	800c236 <swapfunc+0x1e>
 800c248:	e7f3      	b.n	800c232 <swapfunc+0x1a>

0800c24a <med3.constprop.0>:
 800c24a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24c:	460f      	mov	r7, r1
 800c24e:	4616      	mov	r6, r2
 800c250:	4604      	mov	r4, r0
 800c252:	461d      	mov	r5, r3
 800c254:	4798      	blx	r3
 800c256:	2800      	cmp	r0, #0
 800c258:	4631      	mov	r1, r6
 800c25a:	4638      	mov	r0, r7
 800c25c:	da0c      	bge.n	800c278 <med3.constprop.0+0x2e>
 800c25e:	47a8      	blx	r5
 800c260:	2800      	cmp	r0, #0
 800c262:	da02      	bge.n	800c26a <med3.constprop.0+0x20>
 800c264:	463c      	mov	r4, r7
 800c266:	4620      	mov	r0, r4
 800c268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c26a:	4631      	mov	r1, r6
 800c26c:	4620      	mov	r0, r4
 800c26e:	47a8      	blx	r5
 800c270:	2800      	cmp	r0, #0
 800c272:	daf8      	bge.n	800c266 <med3.constprop.0+0x1c>
 800c274:	4634      	mov	r4, r6
 800c276:	e7f6      	b.n	800c266 <med3.constprop.0+0x1c>
 800c278:	47a8      	blx	r5
 800c27a:	2800      	cmp	r0, #0
 800c27c:	dcf2      	bgt.n	800c264 <med3.constprop.0+0x1a>
 800c27e:	4631      	mov	r1, r6
 800c280:	4620      	mov	r0, r4
 800c282:	47a8      	blx	r5
 800c284:	2800      	cmp	r0, #0
 800c286:	daf5      	bge.n	800c274 <med3.constprop.0+0x2a>
 800c288:	e7ed      	b.n	800c266 <med3.constprop.0+0x1c>

0800c28a <qsort>:
 800c28a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c28e:	b095      	sub	sp, #84	@ 0x54
 800c290:	9300      	str	r3, [sp, #0]
 800c292:	ea40 0302 	orr.w	r3, r0, r2
 800c296:	079b      	lsls	r3, r3, #30
 800c298:	4607      	mov	r7, r0
 800c29a:	4615      	mov	r5, r2
 800c29c:	d119      	bne.n	800c2d2 <qsort+0x48>
 800c29e:	f1b2 0804 	subs.w	r8, r2, #4
 800c2a2:	bf18      	it	ne
 800c2a4:	f04f 0801 	movne.w	r8, #1
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	9301      	str	r3, [sp, #4]
 800c2ac:	fb05 f401 	mul.w	r4, r5, r1
 800c2b0:	2906      	cmp	r1, #6
 800c2b2:	eb07 0304 	add.w	r3, r7, r4
 800c2b6:	eb07 0b05 	add.w	fp, r7, r5
 800c2ba:	9302      	str	r3, [sp, #8]
 800c2bc:	d828      	bhi.n	800c310 <qsort+0x86>
 800c2be:	9b02      	ldr	r3, [sp, #8]
 800c2c0:	459b      	cmp	fp, r3
 800c2c2:	d310      	bcc.n	800c2e6 <qsort+0x5c>
 800c2c4:	9b01      	ldr	r3, [sp, #4]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	f040 8118 	bne.w	800c4fc <qsort+0x272>
 800c2cc:	b015      	add	sp, #84	@ 0x54
 800c2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d2:	f04f 0802 	mov.w	r8, #2
 800c2d6:	e7e7      	b.n	800c2a8 <qsort+0x1e>
 800c2d8:	4643      	mov	r3, r8
 800c2da:	462a      	mov	r2, r5
 800c2dc:	4631      	mov	r1, r6
 800c2de:	4620      	mov	r0, r4
 800c2e0:	f7ff ff9a 	bl	800c218 <swapfunc>
 800c2e4:	e00f      	b.n	800c306 <qsort+0x7c>
 800c2e6:	465c      	mov	r4, fp
 800c2e8:	e00e      	b.n	800c308 <qsort+0x7e>
 800c2ea:	1b66      	subs	r6, r4, r5
 800c2ec:	4621      	mov	r1, r4
 800c2ee:	4630      	mov	r0, r6
 800c2f0:	9b00      	ldr	r3, [sp, #0]
 800c2f2:	4798      	blx	r3
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	dd09      	ble.n	800c30c <qsort+0x82>
 800c2f8:	f1b8 0f00 	cmp.w	r8, #0
 800c2fc:	d1ec      	bne.n	800c2d8 <qsort+0x4e>
 800c2fe:	6823      	ldr	r3, [r4, #0]
 800c300:	6832      	ldr	r2, [r6, #0]
 800c302:	6022      	str	r2, [r4, #0]
 800c304:	6033      	str	r3, [r6, #0]
 800c306:	4634      	mov	r4, r6
 800c308:	42a7      	cmp	r7, r4
 800c30a:	d3ee      	bcc.n	800c2ea <qsort+0x60>
 800c30c:	44ab      	add	fp, r5
 800c30e:	e7d6      	b.n	800c2be <qsort+0x34>
 800c310:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800c314:	1b64      	subs	r4, r4, r5
 800c316:	2907      	cmp	r1, #7
 800c318:	fb05 7909 	mla	r9, r5, r9, r7
 800c31c:	443c      	add	r4, r7
 800c31e:	d021      	beq.n	800c364 <qsort+0xda>
 800c320:	2928      	cmp	r1, #40	@ 0x28
 800c322:	d944      	bls.n	800c3ae <qsort+0x124>
 800c324:	08ce      	lsrs	r6, r1, #3
 800c326:	436e      	muls	r6, r5
 800c328:	9b00      	ldr	r3, [sp, #0]
 800c32a:	eb07 0246 	add.w	r2, r7, r6, lsl #1
 800c32e:	19b9      	adds	r1, r7, r6
 800c330:	4638      	mov	r0, r7
 800c332:	f7ff ff8a 	bl	800c24a <med3.constprop.0>
 800c336:	4649      	mov	r1, r9
 800c338:	eb09 0206 	add.w	r2, r9, r6
 800c33c:	9b00      	ldr	r3, [sp, #0]
 800c33e:	4682      	mov	sl, r0
 800c340:	1b88      	subs	r0, r1, r6
 800c342:	f7ff ff82 	bl	800c24a <med3.constprop.0>
 800c346:	4622      	mov	r2, r4
 800c348:	4681      	mov	r9, r0
 800c34a:	9b00      	ldr	r3, [sp, #0]
 800c34c:	1ba1      	subs	r1, r4, r6
 800c34e:	eba4 0046 	sub.w	r0, r4, r6, lsl #1
 800c352:	f7ff ff7a 	bl	800c24a <med3.constprop.0>
 800c356:	4602      	mov	r2, r0
 800c358:	4649      	mov	r1, r9
 800c35a:	4650      	mov	r0, sl
 800c35c:	9b00      	ldr	r3, [sp, #0]
 800c35e:	f7ff ff74 	bl	800c24a <med3.constprop.0>
 800c362:	4681      	mov	r9, r0
 800c364:	f1b8 0f00 	cmp.w	r8, #0
 800c368:	d124      	bne.n	800c3b4 <qsort+0x12a>
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	f8d9 2000 	ldr.w	r2, [r9]
 800c370:	603a      	str	r2, [r7, #0]
 800c372:	f8c9 3000 	str.w	r3, [r9]
 800c376:	46d9      	mov	r9, fp
 800c378:	46a2      	mov	sl, r4
 800c37a:	465e      	mov	r6, fp
 800c37c:	2300      	movs	r3, #0
 800c37e:	45a1      	cmp	r9, r4
 800c380:	d836      	bhi.n	800c3f0 <qsort+0x166>
 800c382:	9303      	str	r3, [sp, #12]
 800c384:	4639      	mov	r1, r7
 800c386:	9b00      	ldr	r3, [sp, #0]
 800c388:	4648      	mov	r0, r9
 800c38a:	4798      	blx	r3
 800c38c:	2800      	cmp	r0, #0
 800c38e:	9b03      	ldr	r3, [sp, #12]
 800c390:	dc2c      	bgt.n	800c3ec <qsort+0x162>
 800c392:	d10a      	bne.n	800c3aa <qsort+0x120>
 800c394:	f1b8 0f00 	cmp.w	r8, #0
 800c398:	d113      	bne.n	800c3c2 <qsort+0x138>
 800c39a:	6833      	ldr	r3, [r6, #0]
 800c39c:	f8d9 2000 	ldr.w	r2, [r9]
 800c3a0:	6032      	str	r2, [r6, #0]
 800c3a2:	f8c9 3000 	str.w	r3, [r9]
 800c3a6:	442e      	add	r6, r5
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	44a9      	add	r9, r5
 800c3ac:	e7e7      	b.n	800c37e <qsort+0xf4>
 800c3ae:	4622      	mov	r2, r4
 800c3b0:	46ba      	mov	sl, r7
 800c3b2:	e7d1      	b.n	800c358 <qsort+0xce>
 800c3b4:	4643      	mov	r3, r8
 800c3b6:	462a      	mov	r2, r5
 800c3b8:	4649      	mov	r1, r9
 800c3ba:	4638      	mov	r0, r7
 800c3bc:	f7ff ff2c 	bl	800c218 <swapfunc>
 800c3c0:	e7d9      	b.n	800c376 <qsort+0xec>
 800c3c2:	4643      	mov	r3, r8
 800c3c4:	462a      	mov	r2, r5
 800c3c6:	4649      	mov	r1, r9
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	f7ff ff25 	bl	800c218 <swapfunc>
 800c3ce:	e7ea      	b.n	800c3a6 <qsort+0x11c>
 800c3d0:	d10b      	bne.n	800c3ea <qsort+0x160>
 800c3d2:	f1b8 0f00 	cmp.w	r8, #0
 800c3d6:	d113      	bne.n	800c400 <qsort+0x176>
 800c3d8:	6823      	ldr	r3, [r4, #0]
 800c3da:	f8da 2000 	ldr.w	r2, [sl]
 800c3de:	6022      	str	r2, [r4, #0]
 800c3e0:	f8ca 3000 	str.w	r3, [sl]
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	ebaa 0a05 	sub.w	sl, sl, r5
 800c3ea:	1b64      	subs	r4, r4, r5
 800c3ec:	45a1      	cmp	r9, r4
 800c3ee:	d90e      	bls.n	800c40e <qsort+0x184>
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d140      	bne.n	800c476 <qsort+0x1ec>
 800c3f4:	9b02      	ldr	r3, [sp, #8]
 800c3f6:	459b      	cmp	fp, r3
 800c3f8:	f4bf af64 	bcs.w	800c2c4 <qsort+0x3a>
 800c3fc:	465c      	mov	r4, fp
 800c3fe:	e036      	b.n	800c46e <qsort+0x1e4>
 800c400:	4643      	mov	r3, r8
 800c402:	462a      	mov	r2, r5
 800c404:	4651      	mov	r1, sl
 800c406:	4620      	mov	r0, r4
 800c408:	f7ff ff06 	bl	800c218 <swapfunc>
 800c40c:	e7ea      	b.n	800c3e4 <qsort+0x15a>
 800c40e:	9303      	str	r3, [sp, #12]
 800c410:	4639      	mov	r1, r7
 800c412:	9b00      	ldr	r3, [sp, #0]
 800c414:	4620      	mov	r0, r4
 800c416:	4798      	blx	r3
 800c418:	2800      	cmp	r0, #0
 800c41a:	9b03      	ldr	r3, [sp, #12]
 800c41c:	dad8      	bge.n	800c3d0 <qsort+0x146>
 800c41e:	f1b8 0f00 	cmp.w	r8, #0
 800c422:	d107      	bne.n	800c434 <qsort+0x1aa>
 800c424:	f8d9 3000 	ldr.w	r3, [r9]
 800c428:	6822      	ldr	r2, [r4, #0]
 800c42a:	f8c9 2000 	str.w	r2, [r9]
 800c42e:	6023      	str	r3, [r4, #0]
 800c430:	1b64      	subs	r4, r4, r5
 800c432:	e7b9      	b.n	800c3a8 <qsort+0x11e>
 800c434:	4643      	mov	r3, r8
 800c436:	462a      	mov	r2, r5
 800c438:	4621      	mov	r1, r4
 800c43a:	4648      	mov	r0, r9
 800c43c:	f7ff feec 	bl	800c218 <swapfunc>
 800c440:	e7f6      	b.n	800c430 <qsort+0x1a6>
 800c442:	4643      	mov	r3, r8
 800c444:	462a      	mov	r2, r5
 800c446:	4631      	mov	r1, r6
 800c448:	4620      	mov	r0, r4
 800c44a:	f7ff fee5 	bl	800c218 <swapfunc>
 800c44e:	e00d      	b.n	800c46c <qsort+0x1e2>
 800c450:	1b66      	subs	r6, r4, r5
 800c452:	4621      	mov	r1, r4
 800c454:	4630      	mov	r0, r6
 800c456:	9b00      	ldr	r3, [sp, #0]
 800c458:	4798      	blx	r3
 800c45a:	2800      	cmp	r0, #0
 800c45c:	dd09      	ble.n	800c472 <qsort+0x1e8>
 800c45e:	f1b8 0f00 	cmp.w	r8, #0
 800c462:	d1ee      	bne.n	800c442 <qsort+0x1b8>
 800c464:	6823      	ldr	r3, [r4, #0]
 800c466:	6832      	ldr	r2, [r6, #0]
 800c468:	6022      	str	r2, [r4, #0]
 800c46a:	6033      	str	r3, [r6, #0]
 800c46c:	4634      	mov	r4, r6
 800c46e:	42a7      	cmp	r7, r4
 800c470:	d3ee      	bcc.n	800c450 <qsort+0x1c6>
 800c472:	44ab      	add	fp, r5
 800c474:	e7be      	b.n	800c3f4 <qsort+0x16a>
 800c476:	eba9 0b06 	sub.w	fp, r9, r6
 800c47a:	1bf2      	subs	r2, r6, r7
 800c47c:	455a      	cmp	r2, fp
 800c47e:	bfa8      	it	ge
 800c480:	465a      	movge	r2, fp
 800c482:	b12a      	cbz	r2, 800c490 <qsort+0x206>
 800c484:	4643      	mov	r3, r8
 800c486:	4638      	mov	r0, r7
 800c488:	eba9 0102 	sub.w	r1, r9, r2
 800c48c:	f7ff fec4 	bl	800c218 <swapfunc>
 800c490:	9b02      	ldr	r3, [sp, #8]
 800c492:	ebaa 0404 	sub.w	r4, sl, r4
 800c496:	eba3 020a 	sub.w	r2, r3, sl
 800c49a:	1b52      	subs	r2, r2, r5
 800c49c:	42a2      	cmp	r2, r4
 800c49e:	bf28      	it	cs
 800c4a0:	4622      	movcs	r2, r4
 800c4a2:	b12a      	cbz	r2, 800c4b0 <qsort+0x226>
 800c4a4:	9902      	ldr	r1, [sp, #8]
 800c4a6:	4643      	mov	r3, r8
 800c4a8:	4648      	mov	r0, r9
 800c4aa:	1a89      	subs	r1, r1, r2
 800c4ac:	f7ff feb4 	bl	800c218 <swapfunc>
 800c4b0:	9b02      	ldr	r3, [sp, #8]
 800c4b2:	455c      	cmp	r4, fp
 800c4b4:	eba3 0604 	sub.w	r6, r3, r4
 800c4b8:	d805      	bhi.n	800c4c6 <qsort+0x23c>
 800c4ba:	4623      	mov	r3, r4
 800c4bc:	465c      	mov	r4, fp
 800c4be:	469b      	mov	fp, r3
 800c4c0:	4633      	mov	r3, r6
 800c4c2:	463e      	mov	r6, r7
 800c4c4:	461f      	mov	r7, r3
 800c4c6:	45ab      	cmp	fp, r5
 800c4c8:	d922      	bls.n	800c510 <qsort+0x286>
 800c4ca:	9b01      	ldr	r3, [sp, #4]
 800c4cc:	fbbb f1f5 	udiv	r1, fp, r5
 800c4d0:	2b07      	cmp	r3, #7
 800c4d2:	d80c      	bhi.n	800c4ee <qsort+0x264>
 800c4d4:	fbb4 f4f5 	udiv	r4, r4, r5
 800c4d8:	9a01      	ldr	r2, [sp, #4]
 800c4da:	ab14      	add	r3, sp, #80	@ 0x50
 800c4dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4e0:	f843 6c40 	str.w	r6, [r3, #-64]
 800c4e4:	f843 4c3c 	str.w	r4, [r3, #-60]
 800c4e8:	4613      	mov	r3, r2
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	e6dd      	b.n	800c2aa <qsort+0x20>
 800c4ee:	462a      	mov	r2, r5
 800c4f0:	4638      	mov	r0, r7
 800c4f2:	9b00      	ldr	r3, [sp, #0]
 800c4f4:	f7ff fec9 	bl	800c28a <qsort>
 800c4f8:	42ac      	cmp	r4, r5
 800c4fa:	d80c      	bhi.n	800c516 <qsort+0x28c>
 800c4fc:	9b01      	ldr	r3, [sp, #4]
 800c4fe:	3b01      	subs	r3, #1
 800c500:	9301      	str	r3, [sp, #4]
 800c502:	9a01      	ldr	r2, [sp, #4]
 800c504:	ab14      	add	r3, sp, #80	@ 0x50
 800c506:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c50a:	e953 7110 	ldrd	r7, r1, [r3, #-64]	@ 0x40
 800c50e:	e6cd      	b.n	800c2ac <qsort+0x22>
 800c510:	42ac      	cmp	r4, r5
 800c512:	f67f aed7 	bls.w	800c2c4 <qsort+0x3a>
 800c516:	fbb4 f1f5 	udiv	r1, r4, r5
 800c51a:	4637      	mov	r7, r6
 800c51c:	e6c6      	b.n	800c2ac <qsort+0x22>
	...

0800c520 <std>:
 800c520:	2300      	movs	r3, #0
 800c522:	b510      	push	{r4, lr}
 800c524:	4604      	mov	r4, r0
 800c526:	e9c0 3300 	strd	r3, r3, [r0]
 800c52a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c52e:	6083      	str	r3, [r0, #8]
 800c530:	8181      	strh	r1, [r0, #12]
 800c532:	6643      	str	r3, [r0, #100]	@ 0x64
 800c534:	81c2      	strh	r2, [r0, #14]
 800c536:	6183      	str	r3, [r0, #24]
 800c538:	4619      	mov	r1, r3
 800c53a:	2208      	movs	r2, #8
 800c53c:	305c      	adds	r0, #92	@ 0x5c
 800c53e:	f000 f930 	bl	800c7a2 <memset>
 800c542:	4b0d      	ldr	r3, [pc, #52]	@ (800c578 <std+0x58>)
 800c544:	6224      	str	r4, [r4, #32]
 800c546:	6263      	str	r3, [r4, #36]	@ 0x24
 800c548:	4b0c      	ldr	r3, [pc, #48]	@ (800c57c <std+0x5c>)
 800c54a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c54c:	4b0c      	ldr	r3, [pc, #48]	@ (800c580 <std+0x60>)
 800c54e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c550:	4b0c      	ldr	r3, [pc, #48]	@ (800c584 <std+0x64>)
 800c552:	6323      	str	r3, [r4, #48]	@ 0x30
 800c554:	4b0c      	ldr	r3, [pc, #48]	@ (800c588 <std+0x68>)
 800c556:	429c      	cmp	r4, r3
 800c558:	d006      	beq.n	800c568 <std+0x48>
 800c55a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c55e:	4294      	cmp	r4, r2
 800c560:	d002      	beq.n	800c568 <std+0x48>
 800c562:	33d0      	adds	r3, #208	@ 0xd0
 800c564:	429c      	cmp	r4, r3
 800c566:	d105      	bne.n	800c574 <std+0x54>
 800c568:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c570:	f000 b9ec 	b.w	800c94c <__retarget_lock_init_recursive>
 800c574:	bd10      	pop	{r4, pc}
 800c576:	bf00      	nop
 800c578:	0800c6e9 	.word	0x0800c6e9
 800c57c:	0800c70b 	.word	0x0800c70b
 800c580:	0800c743 	.word	0x0800c743
 800c584:	0800c767 	.word	0x0800c767
 800c588:	20003134 	.word	0x20003134

0800c58c <stdio_exit_handler>:
 800c58c:	4a02      	ldr	r2, [pc, #8]	@ (800c598 <stdio_exit_handler+0xc>)
 800c58e:	4903      	ldr	r1, [pc, #12]	@ (800c59c <stdio_exit_handler+0x10>)
 800c590:	4803      	ldr	r0, [pc, #12]	@ (800c5a0 <stdio_exit_handler+0x14>)
 800c592:	f000 b869 	b.w	800c668 <_fwalk_sglue>
 800c596:	bf00      	nop
 800c598:	20000184 	.word	0x20000184
 800c59c:	0800d279 	.word	0x0800d279
 800c5a0:	20000194 	.word	0x20000194

0800c5a4 <cleanup_stdio>:
 800c5a4:	6841      	ldr	r1, [r0, #4]
 800c5a6:	4b0c      	ldr	r3, [pc, #48]	@ (800c5d8 <cleanup_stdio+0x34>)
 800c5a8:	b510      	push	{r4, lr}
 800c5aa:	4299      	cmp	r1, r3
 800c5ac:	4604      	mov	r4, r0
 800c5ae:	d001      	beq.n	800c5b4 <cleanup_stdio+0x10>
 800c5b0:	f000 fe62 	bl	800d278 <_fflush_r>
 800c5b4:	68a1      	ldr	r1, [r4, #8]
 800c5b6:	4b09      	ldr	r3, [pc, #36]	@ (800c5dc <cleanup_stdio+0x38>)
 800c5b8:	4299      	cmp	r1, r3
 800c5ba:	d002      	beq.n	800c5c2 <cleanup_stdio+0x1e>
 800c5bc:	4620      	mov	r0, r4
 800c5be:	f000 fe5b 	bl	800d278 <_fflush_r>
 800c5c2:	68e1      	ldr	r1, [r4, #12]
 800c5c4:	4b06      	ldr	r3, [pc, #24]	@ (800c5e0 <cleanup_stdio+0x3c>)
 800c5c6:	4299      	cmp	r1, r3
 800c5c8:	d004      	beq.n	800c5d4 <cleanup_stdio+0x30>
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5d0:	f000 be52 	b.w	800d278 <_fflush_r>
 800c5d4:	bd10      	pop	{r4, pc}
 800c5d6:	bf00      	nop
 800c5d8:	20003134 	.word	0x20003134
 800c5dc:	2000319c 	.word	0x2000319c
 800c5e0:	20003204 	.word	0x20003204

0800c5e4 <global_stdio_init.part.0>:
 800c5e4:	b510      	push	{r4, lr}
 800c5e6:	4b0b      	ldr	r3, [pc, #44]	@ (800c614 <global_stdio_init.part.0+0x30>)
 800c5e8:	4c0b      	ldr	r4, [pc, #44]	@ (800c618 <global_stdio_init.part.0+0x34>)
 800c5ea:	4a0c      	ldr	r2, [pc, #48]	@ (800c61c <global_stdio_init.part.0+0x38>)
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	601a      	str	r2, [r3, #0]
 800c5f0:	2104      	movs	r1, #4
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f7ff ff94 	bl	800c520 <std>
 800c5f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	2109      	movs	r1, #9
 800c600:	f7ff ff8e 	bl	800c520 <std>
 800c604:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c608:	2202      	movs	r2, #2
 800c60a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c60e:	2112      	movs	r1, #18
 800c610:	f7ff bf86 	b.w	800c520 <std>
 800c614:	2000326c 	.word	0x2000326c
 800c618:	20003134 	.word	0x20003134
 800c61c:	0800c58d 	.word	0x0800c58d

0800c620 <__sfp_lock_acquire>:
 800c620:	4801      	ldr	r0, [pc, #4]	@ (800c628 <__sfp_lock_acquire+0x8>)
 800c622:	f000 b994 	b.w	800c94e <__retarget_lock_acquire_recursive>
 800c626:	bf00      	nop
 800c628:	20003275 	.word	0x20003275

0800c62c <__sfp_lock_release>:
 800c62c:	4801      	ldr	r0, [pc, #4]	@ (800c634 <__sfp_lock_release+0x8>)
 800c62e:	f000 b98f 	b.w	800c950 <__retarget_lock_release_recursive>
 800c632:	bf00      	nop
 800c634:	20003275 	.word	0x20003275

0800c638 <__sinit>:
 800c638:	b510      	push	{r4, lr}
 800c63a:	4604      	mov	r4, r0
 800c63c:	f7ff fff0 	bl	800c620 <__sfp_lock_acquire>
 800c640:	6a23      	ldr	r3, [r4, #32]
 800c642:	b11b      	cbz	r3, 800c64c <__sinit+0x14>
 800c644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c648:	f7ff bff0 	b.w	800c62c <__sfp_lock_release>
 800c64c:	4b04      	ldr	r3, [pc, #16]	@ (800c660 <__sinit+0x28>)
 800c64e:	6223      	str	r3, [r4, #32]
 800c650:	4b04      	ldr	r3, [pc, #16]	@ (800c664 <__sinit+0x2c>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d1f5      	bne.n	800c644 <__sinit+0xc>
 800c658:	f7ff ffc4 	bl	800c5e4 <global_stdio_init.part.0>
 800c65c:	e7f2      	b.n	800c644 <__sinit+0xc>
 800c65e:	bf00      	nop
 800c660:	0800c5a5 	.word	0x0800c5a5
 800c664:	2000326c 	.word	0x2000326c

0800c668 <_fwalk_sglue>:
 800c668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c66c:	4607      	mov	r7, r0
 800c66e:	4688      	mov	r8, r1
 800c670:	4614      	mov	r4, r2
 800c672:	2600      	movs	r6, #0
 800c674:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c678:	f1b9 0901 	subs.w	r9, r9, #1
 800c67c:	d505      	bpl.n	800c68a <_fwalk_sglue+0x22>
 800c67e:	6824      	ldr	r4, [r4, #0]
 800c680:	2c00      	cmp	r4, #0
 800c682:	d1f7      	bne.n	800c674 <_fwalk_sglue+0xc>
 800c684:	4630      	mov	r0, r6
 800c686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c68a:	89ab      	ldrh	r3, [r5, #12]
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	d907      	bls.n	800c6a0 <_fwalk_sglue+0x38>
 800c690:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c694:	3301      	adds	r3, #1
 800c696:	d003      	beq.n	800c6a0 <_fwalk_sglue+0x38>
 800c698:	4629      	mov	r1, r5
 800c69a:	4638      	mov	r0, r7
 800c69c:	47c0      	blx	r8
 800c69e:	4306      	orrs	r6, r0
 800c6a0:	3568      	adds	r5, #104	@ 0x68
 800c6a2:	e7e9      	b.n	800c678 <_fwalk_sglue+0x10>

0800c6a4 <siprintf>:
 800c6a4:	b40e      	push	{r1, r2, r3}
 800c6a6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c6aa:	b510      	push	{r4, lr}
 800c6ac:	2400      	movs	r4, #0
 800c6ae:	b09d      	sub	sp, #116	@ 0x74
 800c6b0:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c6b2:	9002      	str	r0, [sp, #8]
 800c6b4:	9006      	str	r0, [sp, #24]
 800c6b6:	9107      	str	r1, [sp, #28]
 800c6b8:	9104      	str	r1, [sp, #16]
 800c6ba:	4809      	ldr	r0, [pc, #36]	@ (800c6e0 <siprintf+0x3c>)
 800c6bc:	4909      	ldr	r1, [pc, #36]	@ (800c6e4 <siprintf+0x40>)
 800c6be:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6c2:	9105      	str	r1, [sp, #20]
 800c6c4:	6800      	ldr	r0, [r0, #0]
 800c6c6:	a902      	add	r1, sp, #8
 800c6c8:	9301      	str	r3, [sp, #4]
 800c6ca:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c6cc:	f000 fac8 	bl	800cc60 <_svfiprintf_r>
 800c6d0:	9b02      	ldr	r3, [sp, #8]
 800c6d2:	701c      	strb	r4, [r3, #0]
 800c6d4:	b01d      	add	sp, #116	@ 0x74
 800c6d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6da:	b003      	add	sp, #12
 800c6dc:	4770      	bx	lr
 800c6de:	bf00      	nop
 800c6e0:	20000190 	.word	0x20000190
 800c6e4:	ffff0208 	.word	0xffff0208

0800c6e8 <__sread>:
 800c6e8:	b510      	push	{r4, lr}
 800c6ea:	460c      	mov	r4, r1
 800c6ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6f0:	f000 f8de 	bl	800c8b0 <_read_r>
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	bfab      	itete	ge
 800c6f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c6fa:	89a3      	ldrhlt	r3, [r4, #12]
 800c6fc:	181b      	addge	r3, r3, r0
 800c6fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c702:	bfac      	ite	ge
 800c704:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c706:	81a3      	strhlt	r3, [r4, #12]
 800c708:	bd10      	pop	{r4, pc}

0800c70a <__swrite>:
 800c70a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c70e:	461f      	mov	r7, r3
 800c710:	898b      	ldrh	r3, [r1, #12]
 800c712:	4605      	mov	r5, r0
 800c714:	05db      	lsls	r3, r3, #23
 800c716:	460c      	mov	r4, r1
 800c718:	4616      	mov	r6, r2
 800c71a:	d505      	bpl.n	800c728 <__swrite+0x1e>
 800c71c:	2302      	movs	r3, #2
 800c71e:	2200      	movs	r2, #0
 800c720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c724:	f000 f8b2 	bl	800c88c <_lseek_r>
 800c728:	89a3      	ldrh	r3, [r4, #12]
 800c72a:	4632      	mov	r2, r6
 800c72c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c730:	81a3      	strh	r3, [r4, #12]
 800c732:	4628      	mov	r0, r5
 800c734:	463b      	mov	r3, r7
 800c736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c73a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c73e:	f000 b8c9 	b.w	800c8d4 <_write_r>

0800c742 <__sseek>:
 800c742:	b510      	push	{r4, lr}
 800c744:	460c      	mov	r4, r1
 800c746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c74a:	f000 f89f 	bl	800c88c <_lseek_r>
 800c74e:	1c43      	adds	r3, r0, #1
 800c750:	89a3      	ldrh	r3, [r4, #12]
 800c752:	bf15      	itete	ne
 800c754:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c756:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c75a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c75e:	81a3      	strheq	r3, [r4, #12]
 800c760:	bf18      	it	ne
 800c762:	81a3      	strhne	r3, [r4, #12]
 800c764:	bd10      	pop	{r4, pc}

0800c766 <__sclose>:
 800c766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c76a:	f000 b87f 	b.w	800c86c <_close_r>

0800c76e <memmove>:
 800c76e:	4288      	cmp	r0, r1
 800c770:	b510      	push	{r4, lr}
 800c772:	eb01 0402 	add.w	r4, r1, r2
 800c776:	d902      	bls.n	800c77e <memmove+0x10>
 800c778:	4284      	cmp	r4, r0
 800c77a:	4623      	mov	r3, r4
 800c77c:	d807      	bhi.n	800c78e <memmove+0x20>
 800c77e:	1e43      	subs	r3, r0, #1
 800c780:	42a1      	cmp	r1, r4
 800c782:	d008      	beq.n	800c796 <memmove+0x28>
 800c784:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c788:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c78c:	e7f8      	b.n	800c780 <memmove+0x12>
 800c78e:	4601      	mov	r1, r0
 800c790:	4402      	add	r2, r0
 800c792:	428a      	cmp	r2, r1
 800c794:	d100      	bne.n	800c798 <memmove+0x2a>
 800c796:	bd10      	pop	{r4, pc}
 800c798:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c79c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c7a0:	e7f7      	b.n	800c792 <memmove+0x24>

0800c7a2 <memset>:
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	4402      	add	r2, r0
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d100      	bne.n	800c7ac <memset+0xa>
 800c7aa:	4770      	bx	lr
 800c7ac:	f803 1b01 	strb.w	r1, [r3], #1
 800c7b0:	e7f9      	b.n	800c7a6 <memset+0x4>
	...

0800c7b4 <strtok>:
 800c7b4:	4b16      	ldr	r3, [pc, #88]	@ (800c810 <strtok+0x5c>)
 800c7b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ba:	681f      	ldr	r7, [r3, #0]
 800c7bc:	4605      	mov	r5, r0
 800c7be:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800c7c0:	460e      	mov	r6, r1
 800c7c2:	b9ec      	cbnz	r4, 800c800 <strtok+0x4c>
 800c7c4:	2050      	movs	r0, #80	@ 0x50
 800c7c6:	f000 f939 	bl	800ca3c <malloc>
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	6478      	str	r0, [r7, #68]	@ 0x44
 800c7ce:	b920      	cbnz	r0, 800c7da <strtok+0x26>
 800c7d0:	215b      	movs	r1, #91	@ 0x5b
 800c7d2:	4b10      	ldr	r3, [pc, #64]	@ (800c814 <strtok+0x60>)
 800c7d4:	4810      	ldr	r0, [pc, #64]	@ (800c818 <strtok+0x64>)
 800c7d6:	f000 f8cb 	bl	800c970 <__assert_func>
 800c7da:	e9c0 4400 	strd	r4, r4, [r0]
 800c7de:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c7e2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c7e6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800c7ea:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800c7ee:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800c7f2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800c7f6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800c7fa:	6184      	str	r4, [r0, #24]
 800c7fc:	7704      	strb	r4, [r0, #28]
 800c7fe:	6244      	str	r4, [r0, #36]	@ 0x24
 800c800:	4631      	mov	r1, r6
 800c802:	4628      	mov	r0, r5
 800c804:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c806:	2301      	movs	r3, #1
 800c808:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c80c:	f000 b806 	b.w	800c81c <__strtok_r>
 800c810:	20000190 	.word	0x20000190
 800c814:	0800dd33 	.word	0x0800dd33
 800c818:	0800dd4a 	.word	0x0800dd4a

0800c81c <__strtok_r>:
 800c81c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c81e:	4604      	mov	r4, r0
 800c820:	b908      	cbnz	r0, 800c826 <__strtok_r+0xa>
 800c822:	6814      	ldr	r4, [r2, #0]
 800c824:	b144      	cbz	r4, 800c838 <__strtok_r+0x1c>
 800c826:	460f      	mov	r7, r1
 800c828:	4620      	mov	r0, r4
 800c82a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c82e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c832:	b91e      	cbnz	r6, 800c83c <__strtok_r+0x20>
 800c834:	b965      	cbnz	r5, 800c850 <__strtok_r+0x34>
 800c836:	6015      	str	r5, [r2, #0]
 800c838:	2000      	movs	r0, #0
 800c83a:	e005      	b.n	800c848 <__strtok_r+0x2c>
 800c83c:	42b5      	cmp	r5, r6
 800c83e:	d1f6      	bne.n	800c82e <__strtok_r+0x12>
 800c840:	2b00      	cmp	r3, #0
 800c842:	d1f0      	bne.n	800c826 <__strtok_r+0xa>
 800c844:	6014      	str	r4, [r2, #0]
 800c846:	7003      	strb	r3, [r0, #0]
 800c848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c84a:	461c      	mov	r4, r3
 800c84c:	e00c      	b.n	800c868 <__strtok_r+0x4c>
 800c84e:	b91d      	cbnz	r5, 800c858 <__strtok_r+0x3c>
 800c850:	460e      	mov	r6, r1
 800c852:	4627      	mov	r7, r4
 800c854:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c858:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c85c:	42ab      	cmp	r3, r5
 800c85e:	d1f6      	bne.n	800c84e <__strtok_r+0x32>
 800c860:	2b00      	cmp	r3, #0
 800c862:	d0f2      	beq.n	800c84a <__strtok_r+0x2e>
 800c864:	2300      	movs	r3, #0
 800c866:	703b      	strb	r3, [r7, #0]
 800c868:	6014      	str	r4, [r2, #0]
 800c86a:	e7ed      	b.n	800c848 <__strtok_r+0x2c>

0800c86c <_close_r>:
 800c86c:	b538      	push	{r3, r4, r5, lr}
 800c86e:	2300      	movs	r3, #0
 800c870:	4d05      	ldr	r5, [pc, #20]	@ (800c888 <_close_r+0x1c>)
 800c872:	4604      	mov	r4, r0
 800c874:	4608      	mov	r0, r1
 800c876:	602b      	str	r3, [r5, #0]
 800c878:	f7f6 f9f5 	bl	8002c66 <_close>
 800c87c:	1c43      	adds	r3, r0, #1
 800c87e:	d102      	bne.n	800c886 <_close_r+0x1a>
 800c880:	682b      	ldr	r3, [r5, #0]
 800c882:	b103      	cbz	r3, 800c886 <_close_r+0x1a>
 800c884:	6023      	str	r3, [r4, #0]
 800c886:	bd38      	pop	{r3, r4, r5, pc}
 800c888:	20003270 	.word	0x20003270

0800c88c <_lseek_r>:
 800c88c:	b538      	push	{r3, r4, r5, lr}
 800c88e:	4604      	mov	r4, r0
 800c890:	4608      	mov	r0, r1
 800c892:	4611      	mov	r1, r2
 800c894:	2200      	movs	r2, #0
 800c896:	4d05      	ldr	r5, [pc, #20]	@ (800c8ac <_lseek_r+0x20>)
 800c898:	602a      	str	r2, [r5, #0]
 800c89a:	461a      	mov	r2, r3
 800c89c:	f7f6 fa07 	bl	8002cae <_lseek>
 800c8a0:	1c43      	adds	r3, r0, #1
 800c8a2:	d102      	bne.n	800c8aa <_lseek_r+0x1e>
 800c8a4:	682b      	ldr	r3, [r5, #0]
 800c8a6:	b103      	cbz	r3, 800c8aa <_lseek_r+0x1e>
 800c8a8:	6023      	str	r3, [r4, #0]
 800c8aa:	bd38      	pop	{r3, r4, r5, pc}
 800c8ac:	20003270 	.word	0x20003270

0800c8b0 <_read_r>:
 800c8b0:	b538      	push	{r3, r4, r5, lr}
 800c8b2:	4604      	mov	r4, r0
 800c8b4:	4608      	mov	r0, r1
 800c8b6:	4611      	mov	r1, r2
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	4d05      	ldr	r5, [pc, #20]	@ (800c8d0 <_read_r+0x20>)
 800c8bc:	602a      	str	r2, [r5, #0]
 800c8be:	461a      	mov	r2, r3
 800c8c0:	f7f6 f998 	bl	8002bf4 <_read>
 800c8c4:	1c43      	adds	r3, r0, #1
 800c8c6:	d102      	bne.n	800c8ce <_read_r+0x1e>
 800c8c8:	682b      	ldr	r3, [r5, #0]
 800c8ca:	b103      	cbz	r3, 800c8ce <_read_r+0x1e>
 800c8cc:	6023      	str	r3, [r4, #0]
 800c8ce:	bd38      	pop	{r3, r4, r5, pc}
 800c8d0:	20003270 	.word	0x20003270

0800c8d4 <_write_r>:
 800c8d4:	b538      	push	{r3, r4, r5, lr}
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	4608      	mov	r0, r1
 800c8da:	4611      	mov	r1, r2
 800c8dc:	2200      	movs	r2, #0
 800c8de:	4d05      	ldr	r5, [pc, #20]	@ (800c8f4 <_write_r+0x20>)
 800c8e0:	602a      	str	r2, [r5, #0]
 800c8e2:	461a      	mov	r2, r3
 800c8e4:	f7f6 f9a3 	bl	8002c2e <_write>
 800c8e8:	1c43      	adds	r3, r0, #1
 800c8ea:	d102      	bne.n	800c8f2 <_write_r+0x1e>
 800c8ec:	682b      	ldr	r3, [r5, #0]
 800c8ee:	b103      	cbz	r3, 800c8f2 <_write_r+0x1e>
 800c8f0:	6023      	str	r3, [r4, #0]
 800c8f2:	bd38      	pop	{r3, r4, r5, pc}
 800c8f4:	20003270 	.word	0x20003270

0800c8f8 <__errno>:
 800c8f8:	4b01      	ldr	r3, [pc, #4]	@ (800c900 <__errno+0x8>)
 800c8fa:	6818      	ldr	r0, [r3, #0]
 800c8fc:	4770      	bx	lr
 800c8fe:	bf00      	nop
 800c900:	20000190 	.word	0x20000190

0800c904 <__libc_init_array>:
 800c904:	b570      	push	{r4, r5, r6, lr}
 800c906:	2600      	movs	r6, #0
 800c908:	4d0c      	ldr	r5, [pc, #48]	@ (800c93c <__libc_init_array+0x38>)
 800c90a:	4c0d      	ldr	r4, [pc, #52]	@ (800c940 <__libc_init_array+0x3c>)
 800c90c:	1b64      	subs	r4, r4, r5
 800c90e:	10a4      	asrs	r4, r4, #2
 800c910:	42a6      	cmp	r6, r4
 800c912:	d109      	bne.n	800c928 <__libc_init_array+0x24>
 800c914:	f000 ffe0 	bl	800d8d8 <_init>
 800c918:	2600      	movs	r6, #0
 800c91a:	4d0a      	ldr	r5, [pc, #40]	@ (800c944 <__libc_init_array+0x40>)
 800c91c:	4c0a      	ldr	r4, [pc, #40]	@ (800c948 <__libc_init_array+0x44>)
 800c91e:	1b64      	subs	r4, r4, r5
 800c920:	10a4      	asrs	r4, r4, #2
 800c922:	42a6      	cmp	r6, r4
 800c924:	d105      	bne.n	800c932 <__libc_init_array+0x2e>
 800c926:	bd70      	pop	{r4, r5, r6, pc}
 800c928:	f855 3b04 	ldr.w	r3, [r5], #4
 800c92c:	4798      	blx	r3
 800c92e:	3601      	adds	r6, #1
 800c930:	e7ee      	b.n	800c910 <__libc_init_array+0xc>
 800c932:	f855 3b04 	ldr.w	r3, [r5], #4
 800c936:	4798      	blx	r3
 800c938:	3601      	adds	r6, #1
 800c93a:	e7f2      	b.n	800c922 <__libc_init_array+0x1e>
 800c93c:	0800de1c 	.word	0x0800de1c
 800c940:	0800de1c 	.word	0x0800de1c
 800c944:	0800de1c 	.word	0x0800de1c
 800c948:	0800de28 	.word	0x0800de28

0800c94c <__retarget_lock_init_recursive>:
 800c94c:	4770      	bx	lr

0800c94e <__retarget_lock_acquire_recursive>:
 800c94e:	4770      	bx	lr

0800c950 <__retarget_lock_release_recursive>:
 800c950:	4770      	bx	lr

0800c952 <memcpy>:
 800c952:	440a      	add	r2, r1
 800c954:	4291      	cmp	r1, r2
 800c956:	f100 33ff 	add.w	r3, r0, #4294967295
 800c95a:	d100      	bne.n	800c95e <memcpy+0xc>
 800c95c:	4770      	bx	lr
 800c95e:	b510      	push	{r4, lr}
 800c960:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c964:	4291      	cmp	r1, r2
 800c966:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c96a:	d1f9      	bne.n	800c960 <memcpy+0xe>
 800c96c:	bd10      	pop	{r4, pc}
	...

0800c970 <__assert_func>:
 800c970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c972:	4614      	mov	r4, r2
 800c974:	461a      	mov	r2, r3
 800c976:	4b09      	ldr	r3, [pc, #36]	@ (800c99c <__assert_func+0x2c>)
 800c978:	4605      	mov	r5, r0
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	68d8      	ldr	r0, [r3, #12]
 800c97e:	b14c      	cbz	r4, 800c994 <__assert_func+0x24>
 800c980:	4b07      	ldr	r3, [pc, #28]	@ (800c9a0 <__assert_func+0x30>)
 800c982:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c986:	9100      	str	r1, [sp, #0]
 800c988:	462b      	mov	r3, r5
 800c98a:	4906      	ldr	r1, [pc, #24]	@ (800c9a4 <__assert_func+0x34>)
 800c98c:	f000 fc9c 	bl	800d2c8 <fiprintf>
 800c990:	f000 fcca 	bl	800d328 <abort>
 800c994:	4b04      	ldr	r3, [pc, #16]	@ (800c9a8 <__assert_func+0x38>)
 800c996:	461c      	mov	r4, r3
 800c998:	e7f3      	b.n	800c982 <__assert_func+0x12>
 800c99a:	bf00      	nop
 800c99c:	20000190 	.word	0x20000190
 800c9a0:	0800dda4 	.word	0x0800dda4
 800c9a4:	0800ddb1 	.word	0x0800ddb1
 800c9a8:	0800dddf 	.word	0x0800dddf

0800c9ac <_free_r>:
 800c9ac:	b538      	push	{r3, r4, r5, lr}
 800c9ae:	4605      	mov	r5, r0
 800c9b0:	2900      	cmp	r1, #0
 800c9b2:	d040      	beq.n	800ca36 <_free_r+0x8a>
 800c9b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9b8:	1f0c      	subs	r4, r1, #4
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	bfb8      	it	lt
 800c9be:	18e4      	addlt	r4, r4, r3
 800c9c0:	f000 f8e6 	bl	800cb90 <__malloc_lock>
 800c9c4:	4a1c      	ldr	r2, [pc, #112]	@ (800ca38 <_free_r+0x8c>)
 800c9c6:	6813      	ldr	r3, [r2, #0]
 800c9c8:	b933      	cbnz	r3, 800c9d8 <_free_r+0x2c>
 800c9ca:	6063      	str	r3, [r4, #4]
 800c9cc:	6014      	str	r4, [r2, #0]
 800c9ce:	4628      	mov	r0, r5
 800c9d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9d4:	f000 b8e2 	b.w	800cb9c <__malloc_unlock>
 800c9d8:	42a3      	cmp	r3, r4
 800c9da:	d908      	bls.n	800c9ee <_free_r+0x42>
 800c9dc:	6820      	ldr	r0, [r4, #0]
 800c9de:	1821      	adds	r1, r4, r0
 800c9e0:	428b      	cmp	r3, r1
 800c9e2:	bf01      	itttt	eq
 800c9e4:	6819      	ldreq	r1, [r3, #0]
 800c9e6:	685b      	ldreq	r3, [r3, #4]
 800c9e8:	1809      	addeq	r1, r1, r0
 800c9ea:	6021      	streq	r1, [r4, #0]
 800c9ec:	e7ed      	b.n	800c9ca <_free_r+0x1e>
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	b10b      	cbz	r3, 800c9f8 <_free_r+0x4c>
 800c9f4:	42a3      	cmp	r3, r4
 800c9f6:	d9fa      	bls.n	800c9ee <_free_r+0x42>
 800c9f8:	6811      	ldr	r1, [r2, #0]
 800c9fa:	1850      	adds	r0, r2, r1
 800c9fc:	42a0      	cmp	r0, r4
 800c9fe:	d10b      	bne.n	800ca18 <_free_r+0x6c>
 800ca00:	6820      	ldr	r0, [r4, #0]
 800ca02:	4401      	add	r1, r0
 800ca04:	1850      	adds	r0, r2, r1
 800ca06:	4283      	cmp	r3, r0
 800ca08:	6011      	str	r1, [r2, #0]
 800ca0a:	d1e0      	bne.n	800c9ce <_free_r+0x22>
 800ca0c:	6818      	ldr	r0, [r3, #0]
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	4408      	add	r0, r1
 800ca12:	6010      	str	r0, [r2, #0]
 800ca14:	6053      	str	r3, [r2, #4]
 800ca16:	e7da      	b.n	800c9ce <_free_r+0x22>
 800ca18:	d902      	bls.n	800ca20 <_free_r+0x74>
 800ca1a:	230c      	movs	r3, #12
 800ca1c:	602b      	str	r3, [r5, #0]
 800ca1e:	e7d6      	b.n	800c9ce <_free_r+0x22>
 800ca20:	6820      	ldr	r0, [r4, #0]
 800ca22:	1821      	adds	r1, r4, r0
 800ca24:	428b      	cmp	r3, r1
 800ca26:	bf01      	itttt	eq
 800ca28:	6819      	ldreq	r1, [r3, #0]
 800ca2a:	685b      	ldreq	r3, [r3, #4]
 800ca2c:	1809      	addeq	r1, r1, r0
 800ca2e:	6021      	streq	r1, [r4, #0]
 800ca30:	6063      	str	r3, [r4, #4]
 800ca32:	6054      	str	r4, [r2, #4]
 800ca34:	e7cb      	b.n	800c9ce <_free_r+0x22>
 800ca36:	bd38      	pop	{r3, r4, r5, pc}
 800ca38:	2000327c 	.word	0x2000327c

0800ca3c <malloc>:
 800ca3c:	4b02      	ldr	r3, [pc, #8]	@ (800ca48 <malloc+0xc>)
 800ca3e:	4601      	mov	r1, r0
 800ca40:	6818      	ldr	r0, [r3, #0]
 800ca42:	f000 b825 	b.w	800ca90 <_malloc_r>
 800ca46:	bf00      	nop
 800ca48:	20000190 	.word	0x20000190

0800ca4c <sbrk_aligned>:
 800ca4c:	b570      	push	{r4, r5, r6, lr}
 800ca4e:	4e0f      	ldr	r6, [pc, #60]	@ (800ca8c <sbrk_aligned+0x40>)
 800ca50:	460c      	mov	r4, r1
 800ca52:	6831      	ldr	r1, [r6, #0]
 800ca54:	4605      	mov	r5, r0
 800ca56:	b911      	cbnz	r1, 800ca5e <sbrk_aligned+0x12>
 800ca58:	f000 fc48 	bl	800d2ec <_sbrk_r>
 800ca5c:	6030      	str	r0, [r6, #0]
 800ca5e:	4621      	mov	r1, r4
 800ca60:	4628      	mov	r0, r5
 800ca62:	f000 fc43 	bl	800d2ec <_sbrk_r>
 800ca66:	1c43      	adds	r3, r0, #1
 800ca68:	d103      	bne.n	800ca72 <sbrk_aligned+0x26>
 800ca6a:	f04f 34ff 	mov.w	r4, #4294967295
 800ca6e:	4620      	mov	r0, r4
 800ca70:	bd70      	pop	{r4, r5, r6, pc}
 800ca72:	1cc4      	adds	r4, r0, #3
 800ca74:	f024 0403 	bic.w	r4, r4, #3
 800ca78:	42a0      	cmp	r0, r4
 800ca7a:	d0f8      	beq.n	800ca6e <sbrk_aligned+0x22>
 800ca7c:	1a21      	subs	r1, r4, r0
 800ca7e:	4628      	mov	r0, r5
 800ca80:	f000 fc34 	bl	800d2ec <_sbrk_r>
 800ca84:	3001      	adds	r0, #1
 800ca86:	d1f2      	bne.n	800ca6e <sbrk_aligned+0x22>
 800ca88:	e7ef      	b.n	800ca6a <sbrk_aligned+0x1e>
 800ca8a:	bf00      	nop
 800ca8c:	20003278 	.word	0x20003278

0800ca90 <_malloc_r>:
 800ca90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca94:	1ccd      	adds	r5, r1, #3
 800ca96:	f025 0503 	bic.w	r5, r5, #3
 800ca9a:	3508      	adds	r5, #8
 800ca9c:	2d0c      	cmp	r5, #12
 800ca9e:	bf38      	it	cc
 800caa0:	250c      	movcc	r5, #12
 800caa2:	2d00      	cmp	r5, #0
 800caa4:	4606      	mov	r6, r0
 800caa6:	db01      	blt.n	800caac <_malloc_r+0x1c>
 800caa8:	42a9      	cmp	r1, r5
 800caaa:	d904      	bls.n	800cab6 <_malloc_r+0x26>
 800caac:	230c      	movs	r3, #12
 800caae:	6033      	str	r3, [r6, #0]
 800cab0:	2000      	movs	r0, #0
 800cab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cab6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cb8c <_malloc_r+0xfc>
 800caba:	f000 f869 	bl	800cb90 <__malloc_lock>
 800cabe:	f8d8 3000 	ldr.w	r3, [r8]
 800cac2:	461c      	mov	r4, r3
 800cac4:	bb44      	cbnz	r4, 800cb18 <_malloc_r+0x88>
 800cac6:	4629      	mov	r1, r5
 800cac8:	4630      	mov	r0, r6
 800caca:	f7ff ffbf 	bl	800ca4c <sbrk_aligned>
 800cace:	1c43      	adds	r3, r0, #1
 800cad0:	4604      	mov	r4, r0
 800cad2:	d158      	bne.n	800cb86 <_malloc_r+0xf6>
 800cad4:	f8d8 4000 	ldr.w	r4, [r8]
 800cad8:	4627      	mov	r7, r4
 800cada:	2f00      	cmp	r7, #0
 800cadc:	d143      	bne.n	800cb66 <_malloc_r+0xd6>
 800cade:	2c00      	cmp	r4, #0
 800cae0:	d04b      	beq.n	800cb7a <_malloc_r+0xea>
 800cae2:	6823      	ldr	r3, [r4, #0]
 800cae4:	4639      	mov	r1, r7
 800cae6:	4630      	mov	r0, r6
 800cae8:	eb04 0903 	add.w	r9, r4, r3
 800caec:	f000 fbfe 	bl	800d2ec <_sbrk_r>
 800caf0:	4581      	cmp	r9, r0
 800caf2:	d142      	bne.n	800cb7a <_malloc_r+0xea>
 800caf4:	6821      	ldr	r1, [r4, #0]
 800caf6:	4630      	mov	r0, r6
 800caf8:	1a6d      	subs	r5, r5, r1
 800cafa:	4629      	mov	r1, r5
 800cafc:	f7ff ffa6 	bl	800ca4c <sbrk_aligned>
 800cb00:	3001      	adds	r0, #1
 800cb02:	d03a      	beq.n	800cb7a <_malloc_r+0xea>
 800cb04:	6823      	ldr	r3, [r4, #0]
 800cb06:	442b      	add	r3, r5
 800cb08:	6023      	str	r3, [r4, #0]
 800cb0a:	f8d8 3000 	ldr.w	r3, [r8]
 800cb0e:	685a      	ldr	r2, [r3, #4]
 800cb10:	bb62      	cbnz	r2, 800cb6c <_malloc_r+0xdc>
 800cb12:	f8c8 7000 	str.w	r7, [r8]
 800cb16:	e00f      	b.n	800cb38 <_malloc_r+0xa8>
 800cb18:	6822      	ldr	r2, [r4, #0]
 800cb1a:	1b52      	subs	r2, r2, r5
 800cb1c:	d420      	bmi.n	800cb60 <_malloc_r+0xd0>
 800cb1e:	2a0b      	cmp	r2, #11
 800cb20:	d917      	bls.n	800cb52 <_malloc_r+0xc2>
 800cb22:	1961      	adds	r1, r4, r5
 800cb24:	42a3      	cmp	r3, r4
 800cb26:	6025      	str	r5, [r4, #0]
 800cb28:	bf18      	it	ne
 800cb2a:	6059      	strne	r1, [r3, #4]
 800cb2c:	6863      	ldr	r3, [r4, #4]
 800cb2e:	bf08      	it	eq
 800cb30:	f8c8 1000 	streq.w	r1, [r8]
 800cb34:	5162      	str	r2, [r4, r5]
 800cb36:	604b      	str	r3, [r1, #4]
 800cb38:	4630      	mov	r0, r6
 800cb3a:	f000 f82f 	bl	800cb9c <__malloc_unlock>
 800cb3e:	f104 000b 	add.w	r0, r4, #11
 800cb42:	1d23      	adds	r3, r4, #4
 800cb44:	f020 0007 	bic.w	r0, r0, #7
 800cb48:	1ac2      	subs	r2, r0, r3
 800cb4a:	bf1c      	itt	ne
 800cb4c:	1a1b      	subne	r3, r3, r0
 800cb4e:	50a3      	strne	r3, [r4, r2]
 800cb50:	e7af      	b.n	800cab2 <_malloc_r+0x22>
 800cb52:	6862      	ldr	r2, [r4, #4]
 800cb54:	42a3      	cmp	r3, r4
 800cb56:	bf0c      	ite	eq
 800cb58:	f8c8 2000 	streq.w	r2, [r8]
 800cb5c:	605a      	strne	r2, [r3, #4]
 800cb5e:	e7eb      	b.n	800cb38 <_malloc_r+0xa8>
 800cb60:	4623      	mov	r3, r4
 800cb62:	6864      	ldr	r4, [r4, #4]
 800cb64:	e7ae      	b.n	800cac4 <_malloc_r+0x34>
 800cb66:	463c      	mov	r4, r7
 800cb68:	687f      	ldr	r7, [r7, #4]
 800cb6a:	e7b6      	b.n	800cada <_malloc_r+0x4a>
 800cb6c:	461a      	mov	r2, r3
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	42a3      	cmp	r3, r4
 800cb72:	d1fb      	bne.n	800cb6c <_malloc_r+0xdc>
 800cb74:	2300      	movs	r3, #0
 800cb76:	6053      	str	r3, [r2, #4]
 800cb78:	e7de      	b.n	800cb38 <_malloc_r+0xa8>
 800cb7a:	230c      	movs	r3, #12
 800cb7c:	4630      	mov	r0, r6
 800cb7e:	6033      	str	r3, [r6, #0]
 800cb80:	f000 f80c 	bl	800cb9c <__malloc_unlock>
 800cb84:	e794      	b.n	800cab0 <_malloc_r+0x20>
 800cb86:	6005      	str	r5, [r0, #0]
 800cb88:	e7d6      	b.n	800cb38 <_malloc_r+0xa8>
 800cb8a:	bf00      	nop
 800cb8c:	2000327c 	.word	0x2000327c

0800cb90 <__malloc_lock>:
 800cb90:	4801      	ldr	r0, [pc, #4]	@ (800cb98 <__malloc_lock+0x8>)
 800cb92:	f7ff bedc 	b.w	800c94e <__retarget_lock_acquire_recursive>
 800cb96:	bf00      	nop
 800cb98:	20003274 	.word	0x20003274

0800cb9c <__malloc_unlock>:
 800cb9c:	4801      	ldr	r0, [pc, #4]	@ (800cba4 <__malloc_unlock+0x8>)
 800cb9e:	f7ff bed7 	b.w	800c950 <__retarget_lock_release_recursive>
 800cba2:	bf00      	nop
 800cba4:	20003274 	.word	0x20003274

0800cba8 <__ssputs_r>:
 800cba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbac:	461f      	mov	r7, r3
 800cbae:	688e      	ldr	r6, [r1, #8]
 800cbb0:	4682      	mov	sl, r0
 800cbb2:	42be      	cmp	r6, r7
 800cbb4:	460c      	mov	r4, r1
 800cbb6:	4690      	mov	r8, r2
 800cbb8:	680b      	ldr	r3, [r1, #0]
 800cbba:	d82d      	bhi.n	800cc18 <__ssputs_r+0x70>
 800cbbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cbc0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cbc4:	d026      	beq.n	800cc14 <__ssputs_r+0x6c>
 800cbc6:	6965      	ldr	r5, [r4, #20]
 800cbc8:	6909      	ldr	r1, [r1, #16]
 800cbca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cbce:	eba3 0901 	sub.w	r9, r3, r1
 800cbd2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cbd6:	1c7b      	adds	r3, r7, #1
 800cbd8:	444b      	add	r3, r9
 800cbda:	106d      	asrs	r5, r5, #1
 800cbdc:	429d      	cmp	r5, r3
 800cbde:	bf38      	it	cc
 800cbe0:	461d      	movcc	r5, r3
 800cbe2:	0553      	lsls	r3, r2, #21
 800cbe4:	d527      	bpl.n	800cc36 <__ssputs_r+0x8e>
 800cbe6:	4629      	mov	r1, r5
 800cbe8:	f7ff ff52 	bl	800ca90 <_malloc_r>
 800cbec:	4606      	mov	r6, r0
 800cbee:	b360      	cbz	r0, 800cc4a <__ssputs_r+0xa2>
 800cbf0:	464a      	mov	r2, r9
 800cbf2:	6921      	ldr	r1, [r4, #16]
 800cbf4:	f7ff fead 	bl	800c952 <memcpy>
 800cbf8:	89a3      	ldrh	r3, [r4, #12]
 800cbfa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cbfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc02:	81a3      	strh	r3, [r4, #12]
 800cc04:	6126      	str	r6, [r4, #16]
 800cc06:	444e      	add	r6, r9
 800cc08:	6026      	str	r6, [r4, #0]
 800cc0a:	463e      	mov	r6, r7
 800cc0c:	6165      	str	r5, [r4, #20]
 800cc0e:	eba5 0509 	sub.w	r5, r5, r9
 800cc12:	60a5      	str	r5, [r4, #8]
 800cc14:	42be      	cmp	r6, r7
 800cc16:	d900      	bls.n	800cc1a <__ssputs_r+0x72>
 800cc18:	463e      	mov	r6, r7
 800cc1a:	4632      	mov	r2, r6
 800cc1c:	4641      	mov	r1, r8
 800cc1e:	6820      	ldr	r0, [r4, #0]
 800cc20:	f7ff fda5 	bl	800c76e <memmove>
 800cc24:	2000      	movs	r0, #0
 800cc26:	68a3      	ldr	r3, [r4, #8]
 800cc28:	1b9b      	subs	r3, r3, r6
 800cc2a:	60a3      	str	r3, [r4, #8]
 800cc2c:	6823      	ldr	r3, [r4, #0]
 800cc2e:	4433      	add	r3, r6
 800cc30:	6023      	str	r3, [r4, #0]
 800cc32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc36:	462a      	mov	r2, r5
 800cc38:	f000 fb7d 	bl	800d336 <_realloc_r>
 800cc3c:	4606      	mov	r6, r0
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	d1e0      	bne.n	800cc04 <__ssputs_r+0x5c>
 800cc42:	4650      	mov	r0, sl
 800cc44:	6921      	ldr	r1, [r4, #16]
 800cc46:	f7ff feb1 	bl	800c9ac <_free_r>
 800cc4a:	230c      	movs	r3, #12
 800cc4c:	f8ca 3000 	str.w	r3, [sl]
 800cc50:	89a3      	ldrh	r3, [r4, #12]
 800cc52:	f04f 30ff 	mov.w	r0, #4294967295
 800cc56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc5a:	81a3      	strh	r3, [r4, #12]
 800cc5c:	e7e9      	b.n	800cc32 <__ssputs_r+0x8a>
	...

0800cc60 <_svfiprintf_r>:
 800cc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc64:	4698      	mov	r8, r3
 800cc66:	898b      	ldrh	r3, [r1, #12]
 800cc68:	4607      	mov	r7, r0
 800cc6a:	061b      	lsls	r3, r3, #24
 800cc6c:	460d      	mov	r5, r1
 800cc6e:	4614      	mov	r4, r2
 800cc70:	b09d      	sub	sp, #116	@ 0x74
 800cc72:	d510      	bpl.n	800cc96 <_svfiprintf_r+0x36>
 800cc74:	690b      	ldr	r3, [r1, #16]
 800cc76:	b973      	cbnz	r3, 800cc96 <_svfiprintf_r+0x36>
 800cc78:	2140      	movs	r1, #64	@ 0x40
 800cc7a:	f7ff ff09 	bl	800ca90 <_malloc_r>
 800cc7e:	6028      	str	r0, [r5, #0]
 800cc80:	6128      	str	r0, [r5, #16]
 800cc82:	b930      	cbnz	r0, 800cc92 <_svfiprintf_r+0x32>
 800cc84:	230c      	movs	r3, #12
 800cc86:	603b      	str	r3, [r7, #0]
 800cc88:	f04f 30ff 	mov.w	r0, #4294967295
 800cc8c:	b01d      	add	sp, #116	@ 0x74
 800cc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc92:	2340      	movs	r3, #64	@ 0x40
 800cc94:	616b      	str	r3, [r5, #20]
 800cc96:	2300      	movs	r3, #0
 800cc98:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc9a:	2320      	movs	r3, #32
 800cc9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cca0:	2330      	movs	r3, #48	@ 0x30
 800cca2:	f04f 0901 	mov.w	r9, #1
 800cca6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccaa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800ce44 <_svfiprintf_r+0x1e4>
 800ccae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ccb2:	4623      	mov	r3, r4
 800ccb4:	469a      	mov	sl, r3
 800ccb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccba:	b10a      	cbz	r2, 800ccc0 <_svfiprintf_r+0x60>
 800ccbc:	2a25      	cmp	r2, #37	@ 0x25
 800ccbe:	d1f9      	bne.n	800ccb4 <_svfiprintf_r+0x54>
 800ccc0:	ebba 0b04 	subs.w	fp, sl, r4
 800ccc4:	d00b      	beq.n	800ccde <_svfiprintf_r+0x7e>
 800ccc6:	465b      	mov	r3, fp
 800ccc8:	4622      	mov	r2, r4
 800ccca:	4629      	mov	r1, r5
 800cccc:	4638      	mov	r0, r7
 800ccce:	f7ff ff6b 	bl	800cba8 <__ssputs_r>
 800ccd2:	3001      	adds	r0, #1
 800ccd4:	f000 80a7 	beq.w	800ce26 <_svfiprintf_r+0x1c6>
 800ccd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccda:	445a      	add	r2, fp
 800ccdc:	9209      	str	r2, [sp, #36]	@ 0x24
 800ccde:	f89a 3000 	ldrb.w	r3, [sl]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	f000 809f 	beq.w	800ce26 <_svfiprintf_r+0x1c6>
 800cce8:	2300      	movs	r3, #0
 800ccea:	f04f 32ff 	mov.w	r2, #4294967295
 800ccee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccf2:	f10a 0a01 	add.w	sl, sl, #1
 800ccf6:	9304      	str	r3, [sp, #16]
 800ccf8:	9307      	str	r3, [sp, #28]
 800ccfa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ccfe:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd00:	4654      	mov	r4, sl
 800cd02:	2205      	movs	r2, #5
 800cd04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd08:	484e      	ldr	r0, [pc, #312]	@ (800ce44 <_svfiprintf_r+0x1e4>)
 800cd0a:	f000 faff 	bl	800d30c <memchr>
 800cd0e:	9a04      	ldr	r2, [sp, #16]
 800cd10:	b9d8      	cbnz	r0, 800cd4a <_svfiprintf_r+0xea>
 800cd12:	06d0      	lsls	r0, r2, #27
 800cd14:	bf44      	itt	mi
 800cd16:	2320      	movmi	r3, #32
 800cd18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd1c:	0711      	lsls	r1, r2, #28
 800cd1e:	bf44      	itt	mi
 800cd20:	232b      	movmi	r3, #43	@ 0x2b
 800cd22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd26:	f89a 3000 	ldrb.w	r3, [sl]
 800cd2a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd2c:	d015      	beq.n	800cd5a <_svfiprintf_r+0xfa>
 800cd2e:	4654      	mov	r4, sl
 800cd30:	2000      	movs	r0, #0
 800cd32:	f04f 0c0a 	mov.w	ip, #10
 800cd36:	9a07      	ldr	r2, [sp, #28]
 800cd38:	4621      	mov	r1, r4
 800cd3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd3e:	3b30      	subs	r3, #48	@ 0x30
 800cd40:	2b09      	cmp	r3, #9
 800cd42:	d94b      	bls.n	800cddc <_svfiprintf_r+0x17c>
 800cd44:	b1b0      	cbz	r0, 800cd74 <_svfiprintf_r+0x114>
 800cd46:	9207      	str	r2, [sp, #28]
 800cd48:	e014      	b.n	800cd74 <_svfiprintf_r+0x114>
 800cd4a:	eba0 0308 	sub.w	r3, r0, r8
 800cd4e:	fa09 f303 	lsl.w	r3, r9, r3
 800cd52:	4313      	orrs	r3, r2
 800cd54:	46a2      	mov	sl, r4
 800cd56:	9304      	str	r3, [sp, #16]
 800cd58:	e7d2      	b.n	800cd00 <_svfiprintf_r+0xa0>
 800cd5a:	9b03      	ldr	r3, [sp, #12]
 800cd5c:	1d19      	adds	r1, r3, #4
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	9103      	str	r1, [sp, #12]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	bfbb      	ittet	lt
 800cd66:	425b      	neglt	r3, r3
 800cd68:	f042 0202 	orrlt.w	r2, r2, #2
 800cd6c:	9307      	strge	r3, [sp, #28]
 800cd6e:	9307      	strlt	r3, [sp, #28]
 800cd70:	bfb8      	it	lt
 800cd72:	9204      	strlt	r2, [sp, #16]
 800cd74:	7823      	ldrb	r3, [r4, #0]
 800cd76:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd78:	d10a      	bne.n	800cd90 <_svfiprintf_r+0x130>
 800cd7a:	7863      	ldrb	r3, [r4, #1]
 800cd7c:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd7e:	d132      	bne.n	800cde6 <_svfiprintf_r+0x186>
 800cd80:	9b03      	ldr	r3, [sp, #12]
 800cd82:	3402      	adds	r4, #2
 800cd84:	1d1a      	adds	r2, r3, #4
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	9203      	str	r2, [sp, #12]
 800cd8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cd8e:	9305      	str	r3, [sp, #20]
 800cd90:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800ce48 <_svfiprintf_r+0x1e8>
 800cd94:	2203      	movs	r2, #3
 800cd96:	4650      	mov	r0, sl
 800cd98:	7821      	ldrb	r1, [r4, #0]
 800cd9a:	f000 fab7 	bl	800d30c <memchr>
 800cd9e:	b138      	cbz	r0, 800cdb0 <_svfiprintf_r+0x150>
 800cda0:	2240      	movs	r2, #64	@ 0x40
 800cda2:	9b04      	ldr	r3, [sp, #16]
 800cda4:	eba0 000a 	sub.w	r0, r0, sl
 800cda8:	4082      	lsls	r2, r0
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	3401      	adds	r4, #1
 800cdae:	9304      	str	r3, [sp, #16]
 800cdb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdb4:	2206      	movs	r2, #6
 800cdb6:	4825      	ldr	r0, [pc, #148]	@ (800ce4c <_svfiprintf_r+0x1ec>)
 800cdb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cdbc:	f000 faa6 	bl	800d30c <memchr>
 800cdc0:	2800      	cmp	r0, #0
 800cdc2:	d036      	beq.n	800ce32 <_svfiprintf_r+0x1d2>
 800cdc4:	4b22      	ldr	r3, [pc, #136]	@ (800ce50 <_svfiprintf_r+0x1f0>)
 800cdc6:	bb1b      	cbnz	r3, 800ce10 <_svfiprintf_r+0x1b0>
 800cdc8:	9b03      	ldr	r3, [sp, #12]
 800cdca:	3307      	adds	r3, #7
 800cdcc:	f023 0307 	bic.w	r3, r3, #7
 800cdd0:	3308      	adds	r3, #8
 800cdd2:	9303      	str	r3, [sp, #12]
 800cdd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdd6:	4433      	add	r3, r6
 800cdd8:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdda:	e76a      	b.n	800ccb2 <_svfiprintf_r+0x52>
 800cddc:	460c      	mov	r4, r1
 800cdde:	2001      	movs	r0, #1
 800cde0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cde4:	e7a8      	b.n	800cd38 <_svfiprintf_r+0xd8>
 800cde6:	2300      	movs	r3, #0
 800cde8:	f04f 0c0a 	mov.w	ip, #10
 800cdec:	4619      	mov	r1, r3
 800cdee:	3401      	adds	r4, #1
 800cdf0:	9305      	str	r3, [sp, #20]
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdf8:	3a30      	subs	r2, #48	@ 0x30
 800cdfa:	2a09      	cmp	r2, #9
 800cdfc:	d903      	bls.n	800ce06 <_svfiprintf_r+0x1a6>
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d0c6      	beq.n	800cd90 <_svfiprintf_r+0x130>
 800ce02:	9105      	str	r1, [sp, #20]
 800ce04:	e7c4      	b.n	800cd90 <_svfiprintf_r+0x130>
 800ce06:	4604      	mov	r4, r0
 800ce08:	2301      	movs	r3, #1
 800ce0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce0e:	e7f0      	b.n	800cdf2 <_svfiprintf_r+0x192>
 800ce10:	ab03      	add	r3, sp, #12
 800ce12:	9300      	str	r3, [sp, #0]
 800ce14:	462a      	mov	r2, r5
 800ce16:	4638      	mov	r0, r7
 800ce18:	4b0e      	ldr	r3, [pc, #56]	@ (800ce54 <_svfiprintf_r+0x1f4>)
 800ce1a:	a904      	add	r1, sp, #16
 800ce1c:	f3af 8000 	nop.w
 800ce20:	1c42      	adds	r2, r0, #1
 800ce22:	4606      	mov	r6, r0
 800ce24:	d1d6      	bne.n	800cdd4 <_svfiprintf_r+0x174>
 800ce26:	89ab      	ldrh	r3, [r5, #12]
 800ce28:	065b      	lsls	r3, r3, #25
 800ce2a:	f53f af2d 	bmi.w	800cc88 <_svfiprintf_r+0x28>
 800ce2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce30:	e72c      	b.n	800cc8c <_svfiprintf_r+0x2c>
 800ce32:	ab03      	add	r3, sp, #12
 800ce34:	9300      	str	r3, [sp, #0]
 800ce36:	462a      	mov	r2, r5
 800ce38:	4638      	mov	r0, r7
 800ce3a:	4b06      	ldr	r3, [pc, #24]	@ (800ce54 <_svfiprintf_r+0x1f4>)
 800ce3c:	a904      	add	r1, sp, #16
 800ce3e:	f000 f87d 	bl	800cf3c <_printf_i>
 800ce42:	e7ed      	b.n	800ce20 <_svfiprintf_r+0x1c0>
 800ce44:	0800dde0 	.word	0x0800dde0
 800ce48:	0800dde6 	.word	0x0800dde6
 800ce4c:	0800ddea 	.word	0x0800ddea
 800ce50:	00000000 	.word	0x00000000
 800ce54:	0800cba9 	.word	0x0800cba9

0800ce58 <_printf_common>:
 800ce58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce5c:	4616      	mov	r6, r2
 800ce5e:	4698      	mov	r8, r3
 800ce60:	688a      	ldr	r2, [r1, #8]
 800ce62:	690b      	ldr	r3, [r1, #16]
 800ce64:	4607      	mov	r7, r0
 800ce66:	4293      	cmp	r3, r2
 800ce68:	bfb8      	it	lt
 800ce6a:	4613      	movlt	r3, r2
 800ce6c:	6033      	str	r3, [r6, #0]
 800ce6e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ce72:	460c      	mov	r4, r1
 800ce74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ce78:	b10a      	cbz	r2, 800ce7e <_printf_common+0x26>
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	6033      	str	r3, [r6, #0]
 800ce7e:	6823      	ldr	r3, [r4, #0]
 800ce80:	0699      	lsls	r1, r3, #26
 800ce82:	bf42      	ittt	mi
 800ce84:	6833      	ldrmi	r3, [r6, #0]
 800ce86:	3302      	addmi	r3, #2
 800ce88:	6033      	strmi	r3, [r6, #0]
 800ce8a:	6825      	ldr	r5, [r4, #0]
 800ce8c:	f015 0506 	ands.w	r5, r5, #6
 800ce90:	d106      	bne.n	800cea0 <_printf_common+0x48>
 800ce92:	f104 0a19 	add.w	sl, r4, #25
 800ce96:	68e3      	ldr	r3, [r4, #12]
 800ce98:	6832      	ldr	r2, [r6, #0]
 800ce9a:	1a9b      	subs	r3, r3, r2
 800ce9c:	42ab      	cmp	r3, r5
 800ce9e:	dc2b      	bgt.n	800cef8 <_printf_common+0xa0>
 800cea0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cea4:	6822      	ldr	r2, [r4, #0]
 800cea6:	3b00      	subs	r3, #0
 800cea8:	bf18      	it	ne
 800ceaa:	2301      	movne	r3, #1
 800ceac:	0692      	lsls	r2, r2, #26
 800ceae:	d430      	bmi.n	800cf12 <_printf_common+0xba>
 800ceb0:	4641      	mov	r1, r8
 800ceb2:	4638      	mov	r0, r7
 800ceb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ceb8:	47c8      	blx	r9
 800ceba:	3001      	adds	r0, #1
 800cebc:	d023      	beq.n	800cf06 <_printf_common+0xae>
 800cebe:	6823      	ldr	r3, [r4, #0]
 800cec0:	6922      	ldr	r2, [r4, #16]
 800cec2:	f003 0306 	and.w	r3, r3, #6
 800cec6:	2b04      	cmp	r3, #4
 800cec8:	bf14      	ite	ne
 800ceca:	2500      	movne	r5, #0
 800cecc:	6833      	ldreq	r3, [r6, #0]
 800cece:	f04f 0600 	mov.w	r6, #0
 800ced2:	bf08      	it	eq
 800ced4:	68e5      	ldreq	r5, [r4, #12]
 800ced6:	f104 041a 	add.w	r4, r4, #26
 800ceda:	bf08      	it	eq
 800cedc:	1aed      	subeq	r5, r5, r3
 800cede:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cee2:	bf08      	it	eq
 800cee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cee8:	4293      	cmp	r3, r2
 800ceea:	bfc4      	itt	gt
 800ceec:	1a9b      	subgt	r3, r3, r2
 800ceee:	18ed      	addgt	r5, r5, r3
 800cef0:	42b5      	cmp	r5, r6
 800cef2:	d11a      	bne.n	800cf2a <_printf_common+0xd2>
 800cef4:	2000      	movs	r0, #0
 800cef6:	e008      	b.n	800cf0a <_printf_common+0xb2>
 800cef8:	2301      	movs	r3, #1
 800cefa:	4652      	mov	r2, sl
 800cefc:	4641      	mov	r1, r8
 800cefe:	4638      	mov	r0, r7
 800cf00:	47c8      	blx	r9
 800cf02:	3001      	adds	r0, #1
 800cf04:	d103      	bne.n	800cf0e <_printf_common+0xb6>
 800cf06:	f04f 30ff 	mov.w	r0, #4294967295
 800cf0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf0e:	3501      	adds	r5, #1
 800cf10:	e7c1      	b.n	800ce96 <_printf_common+0x3e>
 800cf12:	2030      	movs	r0, #48	@ 0x30
 800cf14:	18e1      	adds	r1, r4, r3
 800cf16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cf1a:	1c5a      	adds	r2, r3, #1
 800cf1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cf20:	4422      	add	r2, r4
 800cf22:	3302      	adds	r3, #2
 800cf24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cf28:	e7c2      	b.n	800ceb0 <_printf_common+0x58>
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	4622      	mov	r2, r4
 800cf2e:	4641      	mov	r1, r8
 800cf30:	4638      	mov	r0, r7
 800cf32:	47c8      	blx	r9
 800cf34:	3001      	adds	r0, #1
 800cf36:	d0e6      	beq.n	800cf06 <_printf_common+0xae>
 800cf38:	3601      	adds	r6, #1
 800cf3a:	e7d9      	b.n	800cef0 <_printf_common+0x98>

0800cf3c <_printf_i>:
 800cf3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf40:	7e0f      	ldrb	r7, [r1, #24]
 800cf42:	4691      	mov	r9, r2
 800cf44:	2f78      	cmp	r7, #120	@ 0x78
 800cf46:	4680      	mov	r8, r0
 800cf48:	460c      	mov	r4, r1
 800cf4a:	469a      	mov	sl, r3
 800cf4c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cf4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cf52:	d807      	bhi.n	800cf64 <_printf_i+0x28>
 800cf54:	2f62      	cmp	r7, #98	@ 0x62
 800cf56:	d80a      	bhi.n	800cf6e <_printf_i+0x32>
 800cf58:	2f00      	cmp	r7, #0
 800cf5a:	f000 80d1 	beq.w	800d100 <_printf_i+0x1c4>
 800cf5e:	2f58      	cmp	r7, #88	@ 0x58
 800cf60:	f000 80b8 	beq.w	800d0d4 <_printf_i+0x198>
 800cf64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cf68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cf6c:	e03a      	b.n	800cfe4 <_printf_i+0xa8>
 800cf6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cf72:	2b15      	cmp	r3, #21
 800cf74:	d8f6      	bhi.n	800cf64 <_printf_i+0x28>
 800cf76:	a101      	add	r1, pc, #4	@ (adr r1, 800cf7c <_printf_i+0x40>)
 800cf78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cf7c:	0800cfd5 	.word	0x0800cfd5
 800cf80:	0800cfe9 	.word	0x0800cfe9
 800cf84:	0800cf65 	.word	0x0800cf65
 800cf88:	0800cf65 	.word	0x0800cf65
 800cf8c:	0800cf65 	.word	0x0800cf65
 800cf90:	0800cf65 	.word	0x0800cf65
 800cf94:	0800cfe9 	.word	0x0800cfe9
 800cf98:	0800cf65 	.word	0x0800cf65
 800cf9c:	0800cf65 	.word	0x0800cf65
 800cfa0:	0800cf65 	.word	0x0800cf65
 800cfa4:	0800cf65 	.word	0x0800cf65
 800cfa8:	0800d0e7 	.word	0x0800d0e7
 800cfac:	0800d013 	.word	0x0800d013
 800cfb0:	0800d0a1 	.word	0x0800d0a1
 800cfb4:	0800cf65 	.word	0x0800cf65
 800cfb8:	0800cf65 	.word	0x0800cf65
 800cfbc:	0800d109 	.word	0x0800d109
 800cfc0:	0800cf65 	.word	0x0800cf65
 800cfc4:	0800d013 	.word	0x0800d013
 800cfc8:	0800cf65 	.word	0x0800cf65
 800cfcc:	0800cf65 	.word	0x0800cf65
 800cfd0:	0800d0a9 	.word	0x0800d0a9
 800cfd4:	6833      	ldr	r3, [r6, #0]
 800cfd6:	1d1a      	adds	r2, r3, #4
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	6032      	str	r2, [r6, #0]
 800cfdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cfe0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	e09c      	b.n	800d122 <_printf_i+0x1e6>
 800cfe8:	6833      	ldr	r3, [r6, #0]
 800cfea:	6820      	ldr	r0, [r4, #0]
 800cfec:	1d19      	adds	r1, r3, #4
 800cfee:	6031      	str	r1, [r6, #0]
 800cff0:	0606      	lsls	r6, r0, #24
 800cff2:	d501      	bpl.n	800cff8 <_printf_i+0xbc>
 800cff4:	681d      	ldr	r5, [r3, #0]
 800cff6:	e003      	b.n	800d000 <_printf_i+0xc4>
 800cff8:	0645      	lsls	r5, r0, #25
 800cffa:	d5fb      	bpl.n	800cff4 <_printf_i+0xb8>
 800cffc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d000:	2d00      	cmp	r5, #0
 800d002:	da03      	bge.n	800d00c <_printf_i+0xd0>
 800d004:	232d      	movs	r3, #45	@ 0x2d
 800d006:	426d      	negs	r5, r5
 800d008:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d00c:	230a      	movs	r3, #10
 800d00e:	4858      	ldr	r0, [pc, #352]	@ (800d170 <_printf_i+0x234>)
 800d010:	e011      	b.n	800d036 <_printf_i+0xfa>
 800d012:	6821      	ldr	r1, [r4, #0]
 800d014:	6833      	ldr	r3, [r6, #0]
 800d016:	0608      	lsls	r0, r1, #24
 800d018:	f853 5b04 	ldr.w	r5, [r3], #4
 800d01c:	d402      	bmi.n	800d024 <_printf_i+0xe8>
 800d01e:	0649      	lsls	r1, r1, #25
 800d020:	bf48      	it	mi
 800d022:	b2ad      	uxthmi	r5, r5
 800d024:	2f6f      	cmp	r7, #111	@ 0x6f
 800d026:	6033      	str	r3, [r6, #0]
 800d028:	bf14      	ite	ne
 800d02a:	230a      	movne	r3, #10
 800d02c:	2308      	moveq	r3, #8
 800d02e:	4850      	ldr	r0, [pc, #320]	@ (800d170 <_printf_i+0x234>)
 800d030:	2100      	movs	r1, #0
 800d032:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d036:	6866      	ldr	r6, [r4, #4]
 800d038:	2e00      	cmp	r6, #0
 800d03a:	60a6      	str	r6, [r4, #8]
 800d03c:	db05      	blt.n	800d04a <_printf_i+0x10e>
 800d03e:	6821      	ldr	r1, [r4, #0]
 800d040:	432e      	orrs	r6, r5
 800d042:	f021 0104 	bic.w	r1, r1, #4
 800d046:	6021      	str	r1, [r4, #0]
 800d048:	d04b      	beq.n	800d0e2 <_printf_i+0x1a6>
 800d04a:	4616      	mov	r6, r2
 800d04c:	fbb5 f1f3 	udiv	r1, r5, r3
 800d050:	fb03 5711 	mls	r7, r3, r1, r5
 800d054:	5dc7      	ldrb	r7, [r0, r7]
 800d056:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d05a:	462f      	mov	r7, r5
 800d05c:	42bb      	cmp	r3, r7
 800d05e:	460d      	mov	r5, r1
 800d060:	d9f4      	bls.n	800d04c <_printf_i+0x110>
 800d062:	2b08      	cmp	r3, #8
 800d064:	d10b      	bne.n	800d07e <_printf_i+0x142>
 800d066:	6823      	ldr	r3, [r4, #0]
 800d068:	07df      	lsls	r7, r3, #31
 800d06a:	d508      	bpl.n	800d07e <_printf_i+0x142>
 800d06c:	6923      	ldr	r3, [r4, #16]
 800d06e:	6861      	ldr	r1, [r4, #4]
 800d070:	4299      	cmp	r1, r3
 800d072:	bfde      	ittt	le
 800d074:	2330      	movle	r3, #48	@ 0x30
 800d076:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d07a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d07e:	1b92      	subs	r2, r2, r6
 800d080:	6122      	str	r2, [r4, #16]
 800d082:	464b      	mov	r3, r9
 800d084:	4621      	mov	r1, r4
 800d086:	4640      	mov	r0, r8
 800d088:	f8cd a000 	str.w	sl, [sp]
 800d08c:	aa03      	add	r2, sp, #12
 800d08e:	f7ff fee3 	bl	800ce58 <_printf_common>
 800d092:	3001      	adds	r0, #1
 800d094:	d14a      	bne.n	800d12c <_printf_i+0x1f0>
 800d096:	f04f 30ff 	mov.w	r0, #4294967295
 800d09a:	b004      	add	sp, #16
 800d09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0a0:	6823      	ldr	r3, [r4, #0]
 800d0a2:	f043 0320 	orr.w	r3, r3, #32
 800d0a6:	6023      	str	r3, [r4, #0]
 800d0a8:	2778      	movs	r7, #120	@ 0x78
 800d0aa:	4832      	ldr	r0, [pc, #200]	@ (800d174 <_printf_i+0x238>)
 800d0ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d0b0:	6823      	ldr	r3, [r4, #0]
 800d0b2:	6831      	ldr	r1, [r6, #0]
 800d0b4:	061f      	lsls	r7, r3, #24
 800d0b6:	f851 5b04 	ldr.w	r5, [r1], #4
 800d0ba:	d402      	bmi.n	800d0c2 <_printf_i+0x186>
 800d0bc:	065f      	lsls	r7, r3, #25
 800d0be:	bf48      	it	mi
 800d0c0:	b2ad      	uxthmi	r5, r5
 800d0c2:	6031      	str	r1, [r6, #0]
 800d0c4:	07d9      	lsls	r1, r3, #31
 800d0c6:	bf44      	itt	mi
 800d0c8:	f043 0320 	orrmi.w	r3, r3, #32
 800d0cc:	6023      	strmi	r3, [r4, #0]
 800d0ce:	b11d      	cbz	r5, 800d0d8 <_printf_i+0x19c>
 800d0d0:	2310      	movs	r3, #16
 800d0d2:	e7ad      	b.n	800d030 <_printf_i+0xf4>
 800d0d4:	4826      	ldr	r0, [pc, #152]	@ (800d170 <_printf_i+0x234>)
 800d0d6:	e7e9      	b.n	800d0ac <_printf_i+0x170>
 800d0d8:	6823      	ldr	r3, [r4, #0]
 800d0da:	f023 0320 	bic.w	r3, r3, #32
 800d0de:	6023      	str	r3, [r4, #0]
 800d0e0:	e7f6      	b.n	800d0d0 <_printf_i+0x194>
 800d0e2:	4616      	mov	r6, r2
 800d0e4:	e7bd      	b.n	800d062 <_printf_i+0x126>
 800d0e6:	6833      	ldr	r3, [r6, #0]
 800d0e8:	6825      	ldr	r5, [r4, #0]
 800d0ea:	1d18      	adds	r0, r3, #4
 800d0ec:	6961      	ldr	r1, [r4, #20]
 800d0ee:	6030      	str	r0, [r6, #0]
 800d0f0:	062e      	lsls	r6, r5, #24
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	d501      	bpl.n	800d0fa <_printf_i+0x1be>
 800d0f6:	6019      	str	r1, [r3, #0]
 800d0f8:	e002      	b.n	800d100 <_printf_i+0x1c4>
 800d0fa:	0668      	lsls	r0, r5, #25
 800d0fc:	d5fb      	bpl.n	800d0f6 <_printf_i+0x1ba>
 800d0fe:	8019      	strh	r1, [r3, #0]
 800d100:	2300      	movs	r3, #0
 800d102:	4616      	mov	r6, r2
 800d104:	6123      	str	r3, [r4, #16]
 800d106:	e7bc      	b.n	800d082 <_printf_i+0x146>
 800d108:	6833      	ldr	r3, [r6, #0]
 800d10a:	2100      	movs	r1, #0
 800d10c:	1d1a      	adds	r2, r3, #4
 800d10e:	6032      	str	r2, [r6, #0]
 800d110:	681e      	ldr	r6, [r3, #0]
 800d112:	6862      	ldr	r2, [r4, #4]
 800d114:	4630      	mov	r0, r6
 800d116:	f000 f8f9 	bl	800d30c <memchr>
 800d11a:	b108      	cbz	r0, 800d120 <_printf_i+0x1e4>
 800d11c:	1b80      	subs	r0, r0, r6
 800d11e:	6060      	str	r0, [r4, #4]
 800d120:	6863      	ldr	r3, [r4, #4]
 800d122:	6123      	str	r3, [r4, #16]
 800d124:	2300      	movs	r3, #0
 800d126:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d12a:	e7aa      	b.n	800d082 <_printf_i+0x146>
 800d12c:	4632      	mov	r2, r6
 800d12e:	4649      	mov	r1, r9
 800d130:	4640      	mov	r0, r8
 800d132:	6923      	ldr	r3, [r4, #16]
 800d134:	47d0      	blx	sl
 800d136:	3001      	adds	r0, #1
 800d138:	d0ad      	beq.n	800d096 <_printf_i+0x15a>
 800d13a:	6823      	ldr	r3, [r4, #0]
 800d13c:	079b      	lsls	r3, r3, #30
 800d13e:	d413      	bmi.n	800d168 <_printf_i+0x22c>
 800d140:	68e0      	ldr	r0, [r4, #12]
 800d142:	9b03      	ldr	r3, [sp, #12]
 800d144:	4298      	cmp	r0, r3
 800d146:	bfb8      	it	lt
 800d148:	4618      	movlt	r0, r3
 800d14a:	e7a6      	b.n	800d09a <_printf_i+0x15e>
 800d14c:	2301      	movs	r3, #1
 800d14e:	4632      	mov	r2, r6
 800d150:	4649      	mov	r1, r9
 800d152:	4640      	mov	r0, r8
 800d154:	47d0      	blx	sl
 800d156:	3001      	adds	r0, #1
 800d158:	d09d      	beq.n	800d096 <_printf_i+0x15a>
 800d15a:	3501      	adds	r5, #1
 800d15c:	68e3      	ldr	r3, [r4, #12]
 800d15e:	9903      	ldr	r1, [sp, #12]
 800d160:	1a5b      	subs	r3, r3, r1
 800d162:	42ab      	cmp	r3, r5
 800d164:	dcf2      	bgt.n	800d14c <_printf_i+0x210>
 800d166:	e7eb      	b.n	800d140 <_printf_i+0x204>
 800d168:	2500      	movs	r5, #0
 800d16a:	f104 0619 	add.w	r6, r4, #25
 800d16e:	e7f5      	b.n	800d15c <_printf_i+0x220>
 800d170:	0800ddf1 	.word	0x0800ddf1
 800d174:	0800de02 	.word	0x0800de02

0800d178 <__sflush_r>:
 800d178:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d17e:	0716      	lsls	r6, r2, #28
 800d180:	4605      	mov	r5, r0
 800d182:	460c      	mov	r4, r1
 800d184:	d454      	bmi.n	800d230 <__sflush_r+0xb8>
 800d186:	684b      	ldr	r3, [r1, #4]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	dc02      	bgt.n	800d192 <__sflush_r+0x1a>
 800d18c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d18e:	2b00      	cmp	r3, #0
 800d190:	dd48      	ble.n	800d224 <__sflush_r+0xac>
 800d192:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d194:	2e00      	cmp	r6, #0
 800d196:	d045      	beq.n	800d224 <__sflush_r+0xac>
 800d198:	2300      	movs	r3, #0
 800d19a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d19e:	682f      	ldr	r7, [r5, #0]
 800d1a0:	6a21      	ldr	r1, [r4, #32]
 800d1a2:	602b      	str	r3, [r5, #0]
 800d1a4:	d030      	beq.n	800d208 <__sflush_r+0x90>
 800d1a6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d1a8:	89a3      	ldrh	r3, [r4, #12]
 800d1aa:	0759      	lsls	r1, r3, #29
 800d1ac:	d505      	bpl.n	800d1ba <__sflush_r+0x42>
 800d1ae:	6863      	ldr	r3, [r4, #4]
 800d1b0:	1ad2      	subs	r2, r2, r3
 800d1b2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d1b4:	b10b      	cbz	r3, 800d1ba <__sflush_r+0x42>
 800d1b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d1b8:	1ad2      	subs	r2, r2, r3
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	4628      	mov	r0, r5
 800d1be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d1c0:	6a21      	ldr	r1, [r4, #32]
 800d1c2:	47b0      	blx	r6
 800d1c4:	1c43      	adds	r3, r0, #1
 800d1c6:	89a3      	ldrh	r3, [r4, #12]
 800d1c8:	d106      	bne.n	800d1d8 <__sflush_r+0x60>
 800d1ca:	6829      	ldr	r1, [r5, #0]
 800d1cc:	291d      	cmp	r1, #29
 800d1ce:	d82b      	bhi.n	800d228 <__sflush_r+0xb0>
 800d1d0:	4a28      	ldr	r2, [pc, #160]	@ (800d274 <__sflush_r+0xfc>)
 800d1d2:	40ca      	lsrs	r2, r1
 800d1d4:	07d6      	lsls	r6, r2, #31
 800d1d6:	d527      	bpl.n	800d228 <__sflush_r+0xb0>
 800d1d8:	2200      	movs	r2, #0
 800d1da:	6062      	str	r2, [r4, #4]
 800d1dc:	6922      	ldr	r2, [r4, #16]
 800d1de:	04d9      	lsls	r1, r3, #19
 800d1e0:	6022      	str	r2, [r4, #0]
 800d1e2:	d504      	bpl.n	800d1ee <__sflush_r+0x76>
 800d1e4:	1c42      	adds	r2, r0, #1
 800d1e6:	d101      	bne.n	800d1ec <__sflush_r+0x74>
 800d1e8:	682b      	ldr	r3, [r5, #0]
 800d1ea:	b903      	cbnz	r3, 800d1ee <__sflush_r+0x76>
 800d1ec:	6560      	str	r0, [r4, #84]	@ 0x54
 800d1ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1f0:	602f      	str	r7, [r5, #0]
 800d1f2:	b1b9      	cbz	r1, 800d224 <__sflush_r+0xac>
 800d1f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1f8:	4299      	cmp	r1, r3
 800d1fa:	d002      	beq.n	800d202 <__sflush_r+0x8a>
 800d1fc:	4628      	mov	r0, r5
 800d1fe:	f7ff fbd5 	bl	800c9ac <_free_r>
 800d202:	2300      	movs	r3, #0
 800d204:	6363      	str	r3, [r4, #52]	@ 0x34
 800d206:	e00d      	b.n	800d224 <__sflush_r+0xac>
 800d208:	2301      	movs	r3, #1
 800d20a:	4628      	mov	r0, r5
 800d20c:	47b0      	blx	r6
 800d20e:	4602      	mov	r2, r0
 800d210:	1c50      	adds	r0, r2, #1
 800d212:	d1c9      	bne.n	800d1a8 <__sflush_r+0x30>
 800d214:	682b      	ldr	r3, [r5, #0]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d0c6      	beq.n	800d1a8 <__sflush_r+0x30>
 800d21a:	2b1d      	cmp	r3, #29
 800d21c:	d001      	beq.n	800d222 <__sflush_r+0xaa>
 800d21e:	2b16      	cmp	r3, #22
 800d220:	d11d      	bne.n	800d25e <__sflush_r+0xe6>
 800d222:	602f      	str	r7, [r5, #0]
 800d224:	2000      	movs	r0, #0
 800d226:	e021      	b.n	800d26c <__sflush_r+0xf4>
 800d228:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d22c:	b21b      	sxth	r3, r3
 800d22e:	e01a      	b.n	800d266 <__sflush_r+0xee>
 800d230:	690f      	ldr	r7, [r1, #16]
 800d232:	2f00      	cmp	r7, #0
 800d234:	d0f6      	beq.n	800d224 <__sflush_r+0xac>
 800d236:	0793      	lsls	r3, r2, #30
 800d238:	bf18      	it	ne
 800d23a:	2300      	movne	r3, #0
 800d23c:	680e      	ldr	r6, [r1, #0]
 800d23e:	bf08      	it	eq
 800d240:	694b      	ldreq	r3, [r1, #20]
 800d242:	1bf6      	subs	r6, r6, r7
 800d244:	600f      	str	r7, [r1, #0]
 800d246:	608b      	str	r3, [r1, #8]
 800d248:	2e00      	cmp	r6, #0
 800d24a:	ddeb      	ble.n	800d224 <__sflush_r+0xac>
 800d24c:	4633      	mov	r3, r6
 800d24e:	463a      	mov	r2, r7
 800d250:	4628      	mov	r0, r5
 800d252:	6a21      	ldr	r1, [r4, #32]
 800d254:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d258:	47e0      	blx	ip
 800d25a:	2800      	cmp	r0, #0
 800d25c:	dc07      	bgt.n	800d26e <__sflush_r+0xf6>
 800d25e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d262:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d266:	f04f 30ff 	mov.w	r0, #4294967295
 800d26a:	81a3      	strh	r3, [r4, #12]
 800d26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d26e:	4407      	add	r7, r0
 800d270:	1a36      	subs	r6, r6, r0
 800d272:	e7e9      	b.n	800d248 <__sflush_r+0xd0>
 800d274:	20400001 	.word	0x20400001

0800d278 <_fflush_r>:
 800d278:	b538      	push	{r3, r4, r5, lr}
 800d27a:	690b      	ldr	r3, [r1, #16]
 800d27c:	4605      	mov	r5, r0
 800d27e:	460c      	mov	r4, r1
 800d280:	b913      	cbnz	r3, 800d288 <_fflush_r+0x10>
 800d282:	2500      	movs	r5, #0
 800d284:	4628      	mov	r0, r5
 800d286:	bd38      	pop	{r3, r4, r5, pc}
 800d288:	b118      	cbz	r0, 800d292 <_fflush_r+0x1a>
 800d28a:	6a03      	ldr	r3, [r0, #32]
 800d28c:	b90b      	cbnz	r3, 800d292 <_fflush_r+0x1a>
 800d28e:	f7ff f9d3 	bl	800c638 <__sinit>
 800d292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d0f3      	beq.n	800d282 <_fflush_r+0xa>
 800d29a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d29c:	07d0      	lsls	r0, r2, #31
 800d29e:	d404      	bmi.n	800d2aa <_fflush_r+0x32>
 800d2a0:	0599      	lsls	r1, r3, #22
 800d2a2:	d402      	bmi.n	800d2aa <_fflush_r+0x32>
 800d2a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2a6:	f7ff fb52 	bl	800c94e <__retarget_lock_acquire_recursive>
 800d2aa:	4628      	mov	r0, r5
 800d2ac:	4621      	mov	r1, r4
 800d2ae:	f7ff ff63 	bl	800d178 <__sflush_r>
 800d2b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d2b4:	4605      	mov	r5, r0
 800d2b6:	07da      	lsls	r2, r3, #31
 800d2b8:	d4e4      	bmi.n	800d284 <_fflush_r+0xc>
 800d2ba:	89a3      	ldrh	r3, [r4, #12]
 800d2bc:	059b      	lsls	r3, r3, #22
 800d2be:	d4e1      	bmi.n	800d284 <_fflush_r+0xc>
 800d2c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2c2:	f7ff fb45 	bl	800c950 <__retarget_lock_release_recursive>
 800d2c6:	e7dd      	b.n	800d284 <_fflush_r+0xc>

0800d2c8 <fiprintf>:
 800d2c8:	b40e      	push	{r1, r2, r3}
 800d2ca:	b503      	push	{r0, r1, lr}
 800d2cc:	4601      	mov	r1, r0
 800d2ce:	ab03      	add	r3, sp, #12
 800d2d0:	4805      	ldr	r0, [pc, #20]	@ (800d2e8 <fiprintf+0x20>)
 800d2d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2d6:	6800      	ldr	r0, [r0, #0]
 800d2d8:	9301      	str	r3, [sp, #4]
 800d2da:	f000 f881 	bl	800d3e0 <_vfiprintf_r>
 800d2de:	b002      	add	sp, #8
 800d2e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2e4:	b003      	add	sp, #12
 800d2e6:	4770      	bx	lr
 800d2e8:	20000190 	.word	0x20000190

0800d2ec <_sbrk_r>:
 800d2ec:	b538      	push	{r3, r4, r5, lr}
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	4d05      	ldr	r5, [pc, #20]	@ (800d308 <_sbrk_r+0x1c>)
 800d2f2:	4604      	mov	r4, r0
 800d2f4:	4608      	mov	r0, r1
 800d2f6:	602b      	str	r3, [r5, #0]
 800d2f8:	f7f5 fce6 	bl	8002cc8 <_sbrk>
 800d2fc:	1c43      	adds	r3, r0, #1
 800d2fe:	d102      	bne.n	800d306 <_sbrk_r+0x1a>
 800d300:	682b      	ldr	r3, [r5, #0]
 800d302:	b103      	cbz	r3, 800d306 <_sbrk_r+0x1a>
 800d304:	6023      	str	r3, [r4, #0]
 800d306:	bd38      	pop	{r3, r4, r5, pc}
 800d308:	20003270 	.word	0x20003270

0800d30c <memchr>:
 800d30c:	4603      	mov	r3, r0
 800d30e:	b510      	push	{r4, lr}
 800d310:	b2c9      	uxtb	r1, r1
 800d312:	4402      	add	r2, r0
 800d314:	4293      	cmp	r3, r2
 800d316:	4618      	mov	r0, r3
 800d318:	d101      	bne.n	800d31e <memchr+0x12>
 800d31a:	2000      	movs	r0, #0
 800d31c:	e003      	b.n	800d326 <memchr+0x1a>
 800d31e:	7804      	ldrb	r4, [r0, #0]
 800d320:	3301      	adds	r3, #1
 800d322:	428c      	cmp	r4, r1
 800d324:	d1f6      	bne.n	800d314 <memchr+0x8>
 800d326:	bd10      	pop	{r4, pc}

0800d328 <abort>:
 800d328:	2006      	movs	r0, #6
 800d32a:	b508      	push	{r3, lr}
 800d32c:	f000 fa2c 	bl	800d788 <raise>
 800d330:	2001      	movs	r0, #1
 800d332:	f7f5 fc54 	bl	8002bde <_exit>

0800d336 <_realloc_r>:
 800d336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d33a:	4607      	mov	r7, r0
 800d33c:	4614      	mov	r4, r2
 800d33e:	460d      	mov	r5, r1
 800d340:	b921      	cbnz	r1, 800d34c <_realloc_r+0x16>
 800d342:	4611      	mov	r1, r2
 800d344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d348:	f7ff bba2 	b.w	800ca90 <_malloc_r>
 800d34c:	b92a      	cbnz	r2, 800d35a <_realloc_r+0x24>
 800d34e:	f7ff fb2d 	bl	800c9ac <_free_r>
 800d352:	4625      	mov	r5, r4
 800d354:	4628      	mov	r0, r5
 800d356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d35a:	f000 fa31 	bl	800d7c0 <_malloc_usable_size_r>
 800d35e:	4284      	cmp	r4, r0
 800d360:	4606      	mov	r6, r0
 800d362:	d802      	bhi.n	800d36a <_realloc_r+0x34>
 800d364:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d368:	d8f4      	bhi.n	800d354 <_realloc_r+0x1e>
 800d36a:	4621      	mov	r1, r4
 800d36c:	4638      	mov	r0, r7
 800d36e:	f7ff fb8f 	bl	800ca90 <_malloc_r>
 800d372:	4680      	mov	r8, r0
 800d374:	b908      	cbnz	r0, 800d37a <_realloc_r+0x44>
 800d376:	4645      	mov	r5, r8
 800d378:	e7ec      	b.n	800d354 <_realloc_r+0x1e>
 800d37a:	42b4      	cmp	r4, r6
 800d37c:	4622      	mov	r2, r4
 800d37e:	4629      	mov	r1, r5
 800d380:	bf28      	it	cs
 800d382:	4632      	movcs	r2, r6
 800d384:	f7ff fae5 	bl	800c952 <memcpy>
 800d388:	4629      	mov	r1, r5
 800d38a:	4638      	mov	r0, r7
 800d38c:	f7ff fb0e 	bl	800c9ac <_free_r>
 800d390:	e7f1      	b.n	800d376 <_realloc_r+0x40>

0800d392 <__sfputc_r>:
 800d392:	6893      	ldr	r3, [r2, #8]
 800d394:	b410      	push	{r4}
 800d396:	3b01      	subs	r3, #1
 800d398:	2b00      	cmp	r3, #0
 800d39a:	6093      	str	r3, [r2, #8]
 800d39c:	da07      	bge.n	800d3ae <__sfputc_r+0x1c>
 800d39e:	6994      	ldr	r4, [r2, #24]
 800d3a0:	42a3      	cmp	r3, r4
 800d3a2:	db01      	blt.n	800d3a8 <__sfputc_r+0x16>
 800d3a4:	290a      	cmp	r1, #10
 800d3a6:	d102      	bne.n	800d3ae <__sfputc_r+0x1c>
 800d3a8:	bc10      	pop	{r4}
 800d3aa:	f000 b931 	b.w	800d610 <__swbuf_r>
 800d3ae:	6813      	ldr	r3, [r2, #0]
 800d3b0:	1c58      	adds	r0, r3, #1
 800d3b2:	6010      	str	r0, [r2, #0]
 800d3b4:	7019      	strb	r1, [r3, #0]
 800d3b6:	4608      	mov	r0, r1
 800d3b8:	bc10      	pop	{r4}
 800d3ba:	4770      	bx	lr

0800d3bc <__sfputs_r>:
 800d3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3be:	4606      	mov	r6, r0
 800d3c0:	460f      	mov	r7, r1
 800d3c2:	4614      	mov	r4, r2
 800d3c4:	18d5      	adds	r5, r2, r3
 800d3c6:	42ac      	cmp	r4, r5
 800d3c8:	d101      	bne.n	800d3ce <__sfputs_r+0x12>
 800d3ca:	2000      	movs	r0, #0
 800d3cc:	e007      	b.n	800d3de <__sfputs_r+0x22>
 800d3ce:	463a      	mov	r2, r7
 800d3d0:	4630      	mov	r0, r6
 800d3d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3d6:	f7ff ffdc 	bl	800d392 <__sfputc_r>
 800d3da:	1c43      	adds	r3, r0, #1
 800d3dc:	d1f3      	bne.n	800d3c6 <__sfputs_r+0xa>
 800d3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d3e0 <_vfiprintf_r>:
 800d3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3e4:	460d      	mov	r5, r1
 800d3e6:	4614      	mov	r4, r2
 800d3e8:	4698      	mov	r8, r3
 800d3ea:	4606      	mov	r6, r0
 800d3ec:	b09d      	sub	sp, #116	@ 0x74
 800d3ee:	b118      	cbz	r0, 800d3f8 <_vfiprintf_r+0x18>
 800d3f0:	6a03      	ldr	r3, [r0, #32]
 800d3f2:	b90b      	cbnz	r3, 800d3f8 <_vfiprintf_r+0x18>
 800d3f4:	f7ff f920 	bl	800c638 <__sinit>
 800d3f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d3fa:	07d9      	lsls	r1, r3, #31
 800d3fc:	d405      	bmi.n	800d40a <_vfiprintf_r+0x2a>
 800d3fe:	89ab      	ldrh	r3, [r5, #12]
 800d400:	059a      	lsls	r2, r3, #22
 800d402:	d402      	bmi.n	800d40a <_vfiprintf_r+0x2a>
 800d404:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d406:	f7ff faa2 	bl	800c94e <__retarget_lock_acquire_recursive>
 800d40a:	89ab      	ldrh	r3, [r5, #12]
 800d40c:	071b      	lsls	r3, r3, #28
 800d40e:	d501      	bpl.n	800d414 <_vfiprintf_r+0x34>
 800d410:	692b      	ldr	r3, [r5, #16]
 800d412:	b99b      	cbnz	r3, 800d43c <_vfiprintf_r+0x5c>
 800d414:	4629      	mov	r1, r5
 800d416:	4630      	mov	r0, r6
 800d418:	f000 f938 	bl	800d68c <__swsetup_r>
 800d41c:	b170      	cbz	r0, 800d43c <_vfiprintf_r+0x5c>
 800d41e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d420:	07dc      	lsls	r4, r3, #31
 800d422:	d504      	bpl.n	800d42e <_vfiprintf_r+0x4e>
 800d424:	f04f 30ff 	mov.w	r0, #4294967295
 800d428:	b01d      	add	sp, #116	@ 0x74
 800d42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d42e:	89ab      	ldrh	r3, [r5, #12]
 800d430:	0598      	lsls	r0, r3, #22
 800d432:	d4f7      	bmi.n	800d424 <_vfiprintf_r+0x44>
 800d434:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d436:	f7ff fa8b 	bl	800c950 <__retarget_lock_release_recursive>
 800d43a:	e7f3      	b.n	800d424 <_vfiprintf_r+0x44>
 800d43c:	2300      	movs	r3, #0
 800d43e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d440:	2320      	movs	r3, #32
 800d442:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d446:	2330      	movs	r3, #48	@ 0x30
 800d448:	f04f 0901 	mov.w	r9, #1
 800d44c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d450:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d5fc <_vfiprintf_r+0x21c>
 800d454:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d458:	4623      	mov	r3, r4
 800d45a:	469a      	mov	sl, r3
 800d45c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d460:	b10a      	cbz	r2, 800d466 <_vfiprintf_r+0x86>
 800d462:	2a25      	cmp	r2, #37	@ 0x25
 800d464:	d1f9      	bne.n	800d45a <_vfiprintf_r+0x7a>
 800d466:	ebba 0b04 	subs.w	fp, sl, r4
 800d46a:	d00b      	beq.n	800d484 <_vfiprintf_r+0xa4>
 800d46c:	465b      	mov	r3, fp
 800d46e:	4622      	mov	r2, r4
 800d470:	4629      	mov	r1, r5
 800d472:	4630      	mov	r0, r6
 800d474:	f7ff ffa2 	bl	800d3bc <__sfputs_r>
 800d478:	3001      	adds	r0, #1
 800d47a:	f000 80a7 	beq.w	800d5cc <_vfiprintf_r+0x1ec>
 800d47e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d480:	445a      	add	r2, fp
 800d482:	9209      	str	r2, [sp, #36]	@ 0x24
 800d484:	f89a 3000 	ldrb.w	r3, [sl]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	f000 809f 	beq.w	800d5cc <_vfiprintf_r+0x1ec>
 800d48e:	2300      	movs	r3, #0
 800d490:	f04f 32ff 	mov.w	r2, #4294967295
 800d494:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d498:	f10a 0a01 	add.w	sl, sl, #1
 800d49c:	9304      	str	r3, [sp, #16]
 800d49e:	9307      	str	r3, [sp, #28]
 800d4a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d4a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800d4a6:	4654      	mov	r4, sl
 800d4a8:	2205      	movs	r2, #5
 800d4aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4ae:	4853      	ldr	r0, [pc, #332]	@ (800d5fc <_vfiprintf_r+0x21c>)
 800d4b0:	f7ff ff2c 	bl	800d30c <memchr>
 800d4b4:	9a04      	ldr	r2, [sp, #16]
 800d4b6:	b9d8      	cbnz	r0, 800d4f0 <_vfiprintf_r+0x110>
 800d4b8:	06d1      	lsls	r1, r2, #27
 800d4ba:	bf44      	itt	mi
 800d4bc:	2320      	movmi	r3, #32
 800d4be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4c2:	0713      	lsls	r3, r2, #28
 800d4c4:	bf44      	itt	mi
 800d4c6:	232b      	movmi	r3, #43	@ 0x2b
 800d4c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4cc:	f89a 3000 	ldrb.w	r3, [sl]
 800d4d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4d2:	d015      	beq.n	800d500 <_vfiprintf_r+0x120>
 800d4d4:	4654      	mov	r4, sl
 800d4d6:	2000      	movs	r0, #0
 800d4d8:	f04f 0c0a 	mov.w	ip, #10
 800d4dc:	9a07      	ldr	r2, [sp, #28]
 800d4de:	4621      	mov	r1, r4
 800d4e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4e4:	3b30      	subs	r3, #48	@ 0x30
 800d4e6:	2b09      	cmp	r3, #9
 800d4e8:	d94b      	bls.n	800d582 <_vfiprintf_r+0x1a2>
 800d4ea:	b1b0      	cbz	r0, 800d51a <_vfiprintf_r+0x13a>
 800d4ec:	9207      	str	r2, [sp, #28]
 800d4ee:	e014      	b.n	800d51a <_vfiprintf_r+0x13a>
 800d4f0:	eba0 0308 	sub.w	r3, r0, r8
 800d4f4:	fa09 f303 	lsl.w	r3, r9, r3
 800d4f8:	4313      	orrs	r3, r2
 800d4fa:	46a2      	mov	sl, r4
 800d4fc:	9304      	str	r3, [sp, #16]
 800d4fe:	e7d2      	b.n	800d4a6 <_vfiprintf_r+0xc6>
 800d500:	9b03      	ldr	r3, [sp, #12]
 800d502:	1d19      	adds	r1, r3, #4
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	9103      	str	r1, [sp, #12]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	bfbb      	ittet	lt
 800d50c:	425b      	neglt	r3, r3
 800d50e:	f042 0202 	orrlt.w	r2, r2, #2
 800d512:	9307      	strge	r3, [sp, #28]
 800d514:	9307      	strlt	r3, [sp, #28]
 800d516:	bfb8      	it	lt
 800d518:	9204      	strlt	r2, [sp, #16]
 800d51a:	7823      	ldrb	r3, [r4, #0]
 800d51c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d51e:	d10a      	bne.n	800d536 <_vfiprintf_r+0x156>
 800d520:	7863      	ldrb	r3, [r4, #1]
 800d522:	2b2a      	cmp	r3, #42	@ 0x2a
 800d524:	d132      	bne.n	800d58c <_vfiprintf_r+0x1ac>
 800d526:	9b03      	ldr	r3, [sp, #12]
 800d528:	3402      	adds	r4, #2
 800d52a:	1d1a      	adds	r2, r3, #4
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	9203      	str	r2, [sp, #12]
 800d530:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d534:	9305      	str	r3, [sp, #20]
 800d536:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d600 <_vfiprintf_r+0x220>
 800d53a:	2203      	movs	r2, #3
 800d53c:	4650      	mov	r0, sl
 800d53e:	7821      	ldrb	r1, [r4, #0]
 800d540:	f7ff fee4 	bl	800d30c <memchr>
 800d544:	b138      	cbz	r0, 800d556 <_vfiprintf_r+0x176>
 800d546:	2240      	movs	r2, #64	@ 0x40
 800d548:	9b04      	ldr	r3, [sp, #16]
 800d54a:	eba0 000a 	sub.w	r0, r0, sl
 800d54e:	4082      	lsls	r2, r0
 800d550:	4313      	orrs	r3, r2
 800d552:	3401      	adds	r4, #1
 800d554:	9304      	str	r3, [sp, #16]
 800d556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d55a:	2206      	movs	r2, #6
 800d55c:	4829      	ldr	r0, [pc, #164]	@ (800d604 <_vfiprintf_r+0x224>)
 800d55e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d562:	f7ff fed3 	bl	800d30c <memchr>
 800d566:	2800      	cmp	r0, #0
 800d568:	d03f      	beq.n	800d5ea <_vfiprintf_r+0x20a>
 800d56a:	4b27      	ldr	r3, [pc, #156]	@ (800d608 <_vfiprintf_r+0x228>)
 800d56c:	bb1b      	cbnz	r3, 800d5b6 <_vfiprintf_r+0x1d6>
 800d56e:	9b03      	ldr	r3, [sp, #12]
 800d570:	3307      	adds	r3, #7
 800d572:	f023 0307 	bic.w	r3, r3, #7
 800d576:	3308      	adds	r3, #8
 800d578:	9303      	str	r3, [sp, #12]
 800d57a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d57c:	443b      	add	r3, r7
 800d57e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d580:	e76a      	b.n	800d458 <_vfiprintf_r+0x78>
 800d582:	460c      	mov	r4, r1
 800d584:	2001      	movs	r0, #1
 800d586:	fb0c 3202 	mla	r2, ip, r2, r3
 800d58a:	e7a8      	b.n	800d4de <_vfiprintf_r+0xfe>
 800d58c:	2300      	movs	r3, #0
 800d58e:	f04f 0c0a 	mov.w	ip, #10
 800d592:	4619      	mov	r1, r3
 800d594:	3401      	adds	r4, #1
 800d596:	9305      	str	r3, [sp, #20]
 800d598:	4620      	mov	r0, r4
 800d59a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d59e:	3a30      	subs	r2, #48	@ 0x30
 800d5a0:	2a09      	cmp	r2, #9
 800d5a2:	d903      	bls.n	800d5ac <_vfiprintf_r+0x1cc>
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d0c6      	beq.n	800d536 <_vfiprintf_r+0x156>
 800d5a8:	9105      	str	r1, [sp, #20]
 800d5aa:	e7c4      	b.n	800d536 <_vfiprintf_r+0x156>
 800d5ac:	4604      	mov	r4, r0
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5b4:	e7f0      	b.n	800d598 <_vfiprintf_r+0x1b8>
 800d5b6:	ab03      	add	r3, sp, #12
 800d5b8:	9300      	str	r3, [sp, #0]
 800d5ba:	462a      	mov	r2, r5
 800d5bc:	4630      	mov	r0, r6
 800d5be:	4b13      	ldr	r3, [pc, #76]	@ (800d60c <_vfiprintf_r+0x22c>)
 800d5c0:	a904      	add	r1, sp, #16
 800d5c2:	f3af 8000 	nop.w
 800d5c6:	4607      	mov	r7, r0
 800d5c8:	1c78      	adds	r0, r7, #1
 800d5ca:	d1d6      	bne.n	800d57a <_vfiprintf_r+0x19a>
 800d5cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5ce:	07d9      	lsls	r1, r3, #31
 800d5d0:	d405      	bmi.n	800d5de <_vfiprintf_r+0x1fe>
 800d5d2:	89ab      	ldrh	r3, [r5, #12]
 800d5d4:	059a      	lsls	r2, r3, #22
 800d5d6:	d402      	bmi.n	800d5de <_vfiprintf_r+0x1fe>
 800d5d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d5da:	f7ff f9b9 	bl	800c950 <__retarget_lock_release_recursive>
 800d5de:	89ab      	ldrh	r3, [r5, #12]
 800d5e0:	065b      	lsls	r3, r3, #25
 800d5e2:	f53f af1f 	bmi.w	800d424 <_vfiprintf_r+0x44>
 800d5e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d5e8:	e71e      	b.n	800d428 <_vfiprintf_r+0x48>
 800d5ea:	ab03      	add	r3, sp, #12
 800d5ec:	9300      	str	r3, [sp, #0]
 800d5ee:	462a      	mov	r2, r5
 800d5f0:	4630      	mov	r0, r6
 800d5f2:	4b06      	ldr	r3, [pc, #24]	@ (800d60c <_vfiprintf_r+0x22c>)
 800d5f4:	a904      	add	r1, sp, #16
 800d5f6:	f7ff fca1 	bl	800cf3c <_printf_i>
 800d5fa:	e7e4      	b.n	800d5c6 <_vfiprintf_r+0x1e6>
 800d5fc:	0800dde0 	.word	0x0800dde0
 800d600:	0800dde6 	.word	0x0800dde6
 800d604:	0800ddea 	.word	0x0800ddea
 800d608:	00000000 	.word	0x00000000
 800d60c:	0800d3bd 	.word	0x0800d3bd

0800d610 <__swbuf_r>:
 800d610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d612:	460e      	mov	r6, r1
 800d614:	4614      	mov	r4, r2
 800d616:	4605      	mov	r5, r0
 800d618:	b118      	cbz	r0, 800d622 <__swbuf_r+0x12>
 800d61a:	6a03      	ldr	r3, [r0, #32]
 800d61c:	b90b      	cbnz	r3, 800d622 <__swbuf_r+0x12>
 800d61e:	f7ff f80b 	bl	800c638 <__sinit>
 800d622:	69a3      	ldr	r3, [r4, #24]
 800d624:	60a3      	str	r3, [r4, #8]
 800d626:	89a3      	ldrh	r3, [r4, #12]
 800d628:	071a      	lsls	r2, r3, #28
 800d62a:	d501      	bpl.n	800d630 <__swbuf_r+0x20>
 800d62c:	6923      	ldr	r3, [r4, #16]
 800d62e:	b943      	cbnz	r3, 800d642 <__swbuf_r+0x32>
 800d630:	4621      	mov	r1, r4
 800d632:	4628      	mov	r0, r5
 800d634:	f000 f82a 	bl	800d68c <__swsetup_r>
 800d638:	b118      	cbz	r0, 800d642 <__swbuf_r+0x32>
 800d63a:	f04f 37ff 	mov.w	r7, #4294967295
 800d63e:	4638      	mov	r0, r7
 800d640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d642:	6823      	ldr	r3, [r4, #0]
 800d644:	6922      	ldr	r2, [r4, #16]
 800d646:	b2f6      	uxtb	r6, r6
 800d648:	1a98      	subs	r0, r3, r2
 800d64a:	6963      	ldr	r3, [r4, #20]
 800d64c:	4637      	mov	r7, r6
 800d64e:	4283      	cmp	r3, r0
 800d650:	dc05      	bgt.n	800d65e <__swbuf_r+0x4e>
 800d652:	4621      	mov	r1, r4
 800d654:	4628      	mov	r0, r5
 800d656:	f7ff fe0f 	bl	800d278 <_fflush_r>
 800d65a:	2800      	cmp	r0, #0
 800d65c:	d1ed      	bne.n	800d63a <__swbuf_r+0x2a>
 800d65e:	68a3      	ldr	r3, [r4, #8]
 800d660:	3b01      	subs	r3, #1
 800d662:	60a3      	str	r3, [r4, #8]
 800d664:	6823      	ldr	r3, [r4, #0]
 800d666:	1c5a      	adds	r2, r3, #1
 800d668:	6022      	str	r2, [r4, #0]
 800d66a:	701e      	strb	r6, [r3, #0]
 800d66c:	6962      	ldr	r2, [r4, #20]
 800d66e:	1c43      	adds	r3, r0, #1
 800d670:	429a      	cmp	r2, r3
 800d672:	d004      	beq.n	800d67e <__swbuf_r+0x6e>
 800d674:	89a3      	ldrh	r3, [r4, #12]
 800d676:	07db      	lsls	r3, r3, #31
 800d678:	d5e1      	bpl.n	800d63e <__swbuf_r+0x2e>
 800d67a:	2e0a      	cmp	r6, #10
 800d67c:	d1df      	bne.n	800d63e <__swbuf_r+0x2e>
 800d67e:	4621      	mov	r1, r4
 800d680:	4628      	mov	r0, r5
 800d682:	f7ff fdf9 	bl	800d278 <_fflush_r>
 800d686:	2800      	cmp	r0, #0
 800d688:	d0d9      	beq.n	800d63e <__swbuf_r+0x2e>
 800d68a:	e7d6      	b.n	800d63a <__swbuf_r+0x2a>

0800d68c <__swsetup_r>:
 800d68c:	b538      	push	{r3, r4, r5, lr}
 800d68e:	4b29      	ldr	r3, [pc, #164]	@ (800d734 <__swsetup_r+0xa8>)
 800d690:	4605      	mov	r5, r0
 800d692:	6818      	ldr	r0, [r3, #0]
 800d694:	460c      	mov	r4, r1
 800d696:	b118      	cbz	r0, 800d6a0 <__swsetup_r+0x14>
 800d698:	6a03      	ldr	r3, [r0, #32]
 800d69a:	b90b      	cbnz	r3, 800d6a0 <__swsetup_r+0x14>
 800d69c:	f7fe ffcc 	bl	800c638 <__sinit>
 800d6a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6a4:	0719      	lsls	r1, r3, #28
 800d6a6:	d422      	bmi.n	800d6ee <__swsetup_r+0x62>
 800d6a8:	06da      	lsls	r2, r3, #27
 800d6aa:	d407      	bmi.n	800d6bc <__swsetup_r+0x30>
 800d6ac:	2209      	movs	r2, #9
 800d6ae:	602a      	str	r2, [r5, #0]
 800d6b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b8:	81a3      	strh	r3, [r4, #12]
 800d6ba:	e033      	b.n	800d724 <__swsetup_r+0x98>
 800d6bc:	0758      	lsls	r0, r3, #29
 800d6be:	d512      	bpl.n	800d6e6 <__swsetup_r+0x5a>
 800d6c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d6c2:	b141      	cbz	r1, 800d6d6 <__swsetup_r+0x4a>
 800d6c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d6c8:	4299      	cmp	r1, r3
 800d6ca:	d002      	beq.n	800d6d2 <__swsetup_r+0x46>
 800d6cc:	4628      	mov	r0, r5
 800d6ce:	f7ff f96d 	bl	800c9ac <_free_r>
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d6d6:	89a3      	ldrh	r3, [r4, #12]
 800d6d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d6dc:	81a3      	strh	r3, [r4, #12]
 800d6de:	2300      	movs	r3, #0
 800d6e0:	6063      	str	r3, [r4, #4]
 800d6e2:	6923      	ldr	r3, [r4, #16]
 800d6e4:	6023      	str	r3, [r4, #0]
 800d6e6:	89a3      	ldrh	r3, [r4, #12]
 800d6e8:	f043 0308 	orr.w	r3, r3, #8
 800d6ec:	81a3      	strh	r3, [r4, #12]
 800d6ee:	6923      	ldr	r3, [r4, #16]
 800d6f0:	b94b      	cbnz	r3, 800d706 <__swsetup_r+0x7a>
 800d6f2:	89a3      	ldrh	r3, [r4, #12]
 800d6f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d6f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d6fc:	d003      	beq.n	800d706 <__swsetup_r+0x7a>
 800d6fe:	4621      	mov	r1, r4
 800d700:	4628      	mov	r0, r5
 800d702:	f000 f88a 	bl	800d81a <__smakebuf_r>
 800d706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d70a:	f013 0201 	ands.w	r2, r3, #1
 800d70e:	d00a      	beq.n	800d726 <__swsetup_r+0x9a>
 800d710:	2200      	movs	r2, #0
 800d712:	60a2      	str	r2, [r4, #8]
 800d714:	6962      	ldr	r2, [r4, #20]
 800d716:	4252      	negs	r2, r2
 800d718:	61a2      	str	r2, [r4, #24]
 800d71a:	6922      	ldr	r2, [r4, #16]
 800d71c:	b942      	cbnz	r2, 800d730 <__swsetup_r+0xa4>
 800d71e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d722:	d1c5      	bne.n	800d6b0 <__swsetup_r+0x24>
 800d724:	bd38      	pop	{r3, r4, r5, pc}
 800d726:	0799      	lsls	r1, r3, #30
 800d728:	bf58      	it	pl
 800d72a:	6962      	ldrpl	r2, [r4, #20]
 800d72c:	60a2      	str	r2, [r4, #8]
 800d72e:	e7f4      	b.n	800d71a <__swsetup_r+0x8e>
 800d730:	2000      	movs	r0, #0
 800d732:	e7f7      	b.n	800d724 <__swsetup_r+0x98>
 800d734:	20000190 	.word	0x20000190

0800d738 <_raise_r>:
 800d738:	291f      	cmp	r1, #31
 800d73a:	b538      	push	{r3, r4, r5, lr}
 800d73c:	4605      	mov	r5, r0
 800d73e:	460c      	mov	r4, r1
 800d740:	d904      	bls.n	800d74c <_raise_r+0x14>
 800d742:	2316      	movs	r3, #22
 800d744:	6003      	str	r3, [r0, #0]
 800d746:	f04f 30ff 	mov.w	r0, #4294967295
 800d74a:	bd38      	pop	{r3, r4, r5, pc}
 800d74c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d74e:	b112      	cbz	r2, 800d756 <_raise_r+0x1e>
 800d750:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d754:	b94b      	cbnz	r3, 800d76a <_raise_r+0x32>
 800d756:	4628      	mov	r0, r5
 800d758:	f000 f830 	bl	800d7bc <_getpid_r>
 800d75c:	4622      	mov	r2, r4
 800d75e:	4601      	mov	r1, r0
 800d760:	4628      	mov	r0, r5
 800d762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d766:	f000 b817 	b.w	800d798 <_kill_r>
 800d76a:	2b01      	cmp	r3, #1
 800d76c:	d00a      	beq.n	800d784 <_raise_r+0x4c>
 800d76e:	1c59      	adds	r1, r3, #1
 800d770:	d103      	bne.n	800d77a <_raise_r+0x42>
 800d772:	2316      	movs	r3, #22
 800d774:	6003      	str	r3, [r0, #0]
 800d776:	2001      	movs	r0, #1
 800d778:	e7e7      	b.n	800d74a <_raise_r+0x12>
 800d77a:	2100      	movs	r1, #0
 800d77c:	4620      	mov	r0, r4
 800d77e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d782:	4798      	blx	r3
 800d784:	2000      	movs	r0, #0
 800d786:	e7e0      	b.n	800d74a <_raise_r+0x12>

0800d788 <raise>:
 800d788:	4b02      	ldr	r3, [pc, #8]	@ (800d794 <raise+0xc>)
 800d78a:	4601      	mov	r1, r0
 800d78c:	6818      	ldr	r0, [r3, #0]
 800d78e:	f7ff bfd3 	b.w	800d738 <_raise_r>
 800d792:	bf00      	nop
 800d794:	20000190 	.word	0x20000190

0800d798 <_kill_r>:
 800d798:	b538      	push	{r3, r4, r5, lr}
 800d79a:	2300      	movs	r3, #0
 800d79c:	4d06      	ldr	r5, [pc, #24]	@ (800d7b8 <_kill_r+0x20>)
 800d79e:	4604      	mov	r4, r0
 800d7a0:	4608      	mov	r0, r1
 800d7a2:	4611      	mov	r1, r2
 800d7a4:	602b      	str	r3, [r5, #0]
 800d7a6:	f7f5 fa0a 	bl	8002bbe <_kill>
 800d7aa:	1c43      	adds	r3, r0, #1
 800d7ac:	d102      	bne.n	800d7b4 <_kill_r+0x1c>
 800d7ae:	682b      	ldr	r3, [r5, #0]
 800d7b0:	b103      	cbz	r3, 800d7b4 <_kill_r+0x1c>
 800d7b2:	6023      	str	r3, [r4, #0]
 800d7b4:	bd38      	pop	{r3, r4, r5, pc}
 800d7b6:	bf00      	nop
 800d7b8:	20003270 	.word	0x20003270

0800d7bc <_getpid_r>:
 800d7bc:	f7f5 b9f8 	b.w	8002bb0 <_getpid>

0800d7c0 <_malloc_usable_size_r>:
 800d7c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7c4:	1f18      	subs	r0, r3, #4
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	bfbc      	itt	lt
 800d7ca:	580b      	ldrlt	r3, [r1, r0]
 800d7cc:	18c0      	addlt	r0, r0, r3
 800d7ce:	4770      	bx	lr

0800d7d0 <__swhatbuf_r>:
 800d7d0:	b570      	push	{r4, r5, r6, lr}
 800d7d2:	460c      	mov	r4, r1
 800d7d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7d8:	4615      	mov	r5, r2
 800d7da:	2900      	cmp	r1, #0
 800d7dc:	461e      	mov	r6, r3
 800d7de:	b096      	sub	sp, #88	@ 0x58
 800d7e0:	da0c      	bge.n	800d7fc <__swhatbuf_r+0x2c>
 800d7e2:	89a3      	ldrh	r3, [r4, #12]
 800d7e4:	2100      	movs	r1, #0
 800d7e6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d7ea:	bf14      	ite	ne
 800d7ec:	2340      	movne	r3, #64	@ 0x40
 800d7ee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d7f2:	2000      	movs	r0, #0
 800d7f4:	6031      	str	r1, [r6, #0]
 800d7f6:	602b      	str	r3, [r5, #0]
 800d7f8:	b016      	add	sp, #88	@ 0x58
 800d7fa:	bd70      	pop	{r4, r5, r6, pc}
 800d7fc:	466a      	mov	r2, sp
 800d7fe:	f000 f849 	bl	800d894 <_fstat_r>
 800d802:	2800      	cmp	r0, #0
 800d804:	dbed      	blt.n	800d7e2 <__swhatbuf_r+0x12>
 800d806:	9901      	ldr	r1, [sp, #4]
 800d808:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d80c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d810:	4259      	negs	r1, r3
 800d812:	4159      	adcs	r1, r3
 800d814:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d818:	e7eb      	b.n	800d7f2 <__swhatbuf_r+0x22>

0800d81a <__smakebuf_r>:
 800d81a:	898b      	ldrh	r3, [r1, #12]
 800d81c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d81e:	079d      	lsls	r5, r3, #30
 800d820:	4606      	mov	r6, r0
 800d822:	460c      	mov	r4, r1
 800d824:	d507      	bpl.n	800d836 <__smakebuf_r+0x1c>
 800d826:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d82a:	6023      	str	r3, [r4, #0]
 800d82c:	6123      	str	r3, [r4, #16]
 800d82e:	2301      	movs	r3, #1
 800d830:	6163      	str	r3, [r4, #20]
 800d832:	b003      	add	sp, #12
 800d834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d836:	466a      	mov	r2, sp
 800d838:	ab01      	add	r3, sp, #4
 800d83a:	f7ff ffc9 	bl	800d7d0 <__swhatbuf_r>
 800d83e:	9f00      	ldr	r7, [sp, #0]
 800d840:	4605      	mov	r5, r0
 800d842:	4639      	mov	r1, r7
 800d844:	4630      	mov	r0, r6
 800d846:	f7ff f923 	bl	800ca90 <_malloc_r>
 800d84a:	b948      	cbnz	r0, 800d860 <__smakebuf_r+0x46>
 800d84c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d850:	059a      	lsls	r2, r3, #22
 800d852:	d4ee      	bmi.n	800d832 <__smakebuf_r+0x18>
 800d854:	f023 0303 	bic.w	r3, r3, #3
 800d858:	f043 0302 	orr.w	r3, r3, #2
 800d85c:	81a3      	strh	r3, [r4, #12]
 800d85e:	e7e2      	b.n	800d826 <__smakebuf_r+0xc>
 800d860:	89a3      	ldrh	r3, [r4, #12]
 800d862:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d86a:	81a3      	strh	r3, [r4, #12]
 800d86c:	9b01      	ldr	r3, [sp, #4]
 800d86e:	6020      	str	r0, [r4, #0]
 800d870:	b15b      	cbz	r3, 800d88a <__smakebuf_r+0x70>
 800d872:	4630      	mov	r0, r6
 800d874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d878:	f000 f81e 	bl	800d8b8 <_isatty_r>
 800d87c:	b128      	cbz	r0, 800d88a <__smakebuf_r+0x70>
 800d87e:	89a3      	ldrh	r3, [r4, #12]
 800d880:	f023 0303 	bic.w	r3, r3, #3
 800d884:	f043 0301 	orr.w	r3, r3, #1
 800d888:	81a3      	strh	r3, [r4, #12]
 800d88a:	89a3      	ldrh	r3, [r4, #12]
 800d88c:	431d      	orrs	r5, r3
 800d88e:	81a5      	strh	r5, [r4, #12]
 800d890:	e7cf      	b.n	800d832 <__smakebuf_r+0x18>
	...

0800d894 <_fstat_r>:
 800d894:	b538      	push	{r3, r4, r5, lr}
 800d896:	2300      	movs	r3, #0
 800d898:	4d06      	ldr	r5, [pc, #24]	@ (800d8b4 <_fstat_r+0x20>)
 800d89a:	4604      	mov	r4, r0
 800d89c:	4608      	mov	r0, r1
 800d89e:	4611      	mov	r1, r2
 800d8a0:	602b      	str	r3, [r5, #0]
 800d8a2:	f7f5 f9eb 	bl	8002c7c <_fstat>
 800d8a6:	1c43      	adds	r3, r0, #1
 800d8a8:	d102      	bne.n	800d8b0 <_fstat_r+0x1c>
 800d8aa:	682b      	ldr	r3, [r5, #0]
 800d8ac:	b103      	cbz	r3, 800d8b0 <_fstat_r+0x1c>
 800d8ae:	6023      	str	r3, [r4, #0]
 800d8b0:	bd38      	pop	{r3, r4, r5, pc}
 800d8b2:	bf00      	nop
 800d8b4:	20003270 	.word	0x20003270

0800d8b8 <_isatty_r>:
 800d8b8:	b538      	push	{r3, r4, r5, lr}
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	4d05      	ldr	r5, [pc, #20]	@ (800d8d4 <_isatty_r+0x1c>)
 800d8be:	4604      	mov	r4, r0
 800d8c0:	4608      	mov	r0, r1
 800d8c2:	602b      	str	r3, [r5, #0]
 800d8c4:	f7f5 f9e9 	bl	8002c9a <_isatty>
 800d8c8:	1c43      	adds	r3, r0, #1
 800d8ca:	d102      	bne.n	800d8d2 <_isatty_r+0x1a>
 800d8cc:	682b      	ldr	r3, [r5, #0]
 800d8ce:	b103      	cbz	r3, 800d8d2 <_isatty_r+0x1a>
 800d8d0:	6023      	str	r3, [r4, #0]
 800d8d2:	bd38      	pop	{r3, r4, r5, pc}
 800d8d4:	20003270 	.word	0x20003270

0800d8d8 <_init>:
 800d8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8da:	bf00      	nop
 800d8dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8de:	bc08      	pop	{r3}
 800d8e0:	469e      	mov	lr, r3
 800d8e2:	4770      	bx	lr

0800d8e4 <_fini>:
 800d8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8e6:	bf00      	nop
 800d8e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8ea:	bc08      	pop	{r3}
 800d8ec:	469e      	mov	lr, r3
 800d8ee:	4770      	bx	lr
